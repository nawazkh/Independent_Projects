
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000009a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000690  00000000  00000000  000000f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000668  00000000  00000000  00000780  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	2e c0       	rjmp	.+92     	; 0x60 <__bad_interrupt>
   4:	2d c0       	rjmp	.+90     	; 0x60 <__bad_interrupt>
   6:	2c c0       	rjmp	.+88     	; 0x60 <__bad_interrupt>
   8:	2b c0       	rjmp	.+86     	; 0x60 <__bad_interrupt>
   a:	2a c0       	rjmp	.+84     	; 0x60 <__bad_interrupt>
   c:	29 c0       	rjmp	.+82     	; 0x60 <__bad_interrupt>
   e:	28 c0       	rjmp	.+80     	; 0x60 <__bad_interrupt>
  10:	27 c0       	rjmp	.+78     	; 0x60 <__bad_interrupt>
  12:	27 c0       	rjmp	.+78     	; 0x62 <__vector_9>
  14:	25 c0       	rjmp	.+74     	; 0x60 <__bad_interrupt>
  16:	24 c0       	rjmp	.+72     	; 0x60 <__bad_interrupt>
  18:	23 c0       	rjmp	.+70     	; 0x60 <__bad_interrupt>
  1a:	22 c0       	rjmp	.+68     	; 0x60 <__bad_interrupt>
  1c:	21 c0       	rjmp	.+66     	; 0x60 <__bad_interrupt>
  1e:	20 c0       	rjmp	.+64     	; 0x60 <__bad_interrupt>
  20:	1f c0       	rjmp	.+62     	; 0x60 <__bad_interrupt>
  22:	1e c0       	rjmp	.+60     	; 0x60 <__bad_interrupt>
  24:	1d c0       	rjmp	.+58     	; 0x60 <__bad_interrupt>
  26:	1c c0       	rjmp	.+56     	; 0x60 <__bad_interrupt>
  28:	1b c0       	rjmp	.+54     	; 0x60 <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf e5       	ldi	r28, 0x5F	; 95
  30:	d2 e0       	ldi	r29, 0x02	; 2
  32:	de bf       	out	0x3e, r29	; 62
  34:	cd bf       	out	0x3d, r28	; 61

00000036 <__do_copy_data>:
  36:	10 e0       	ldi	r17, 0x00	; 0
  38:	a0 e6       	ldi	r26, 0x60	; 96
  3a:	b0 e0       	ldi	r27, 0x00	; 0
  3c:	ea e9       	ldi	r30, 0x9A	; 154
  3e:	f0 e0       	ldi	r31, 0x00	; 0
  40:	02 c0       	rjmp	.+4      	; 0x46 <.do_copy_data_start>

00000042 <.do_copy_data_loop>:
  42:	05 90       	lpm	r0, Z+
  44:	0d 92       	st	X+, r0

00000046 <.do_copy_data_start>:
  46:	a0 36       	cpi	r26, 0x60	; 96
  48:	b1 07       	cpc	r27, r17
  4a:	d9 f7       	brne	.-10     	; 0x42 <.do_copy_data_loop>

0000004c <__do_clear_bss>:
  4c:	10 e0       	ldi	r17, 0x00	; 0
  4e:	a0 e6       	ldi	r26, 0x60	; 96
  50:	b0 e0       	ldi	r27, 0x00	; 0
  52:	01 c0       	rjmp	.+2      	; 0x56 <.do_clear_bss_start>

00000054 <.do_clear_bss_loop>:
  54:	1d 92       	st	X+, r1

00000056 <.do_clear_bss_start>:
  56:	a0 36       	cpi	r26, 0x60	; 96
  58:	b1 07       	cpc	r27, r17
  5a:	e1 f7       	brne	.-8      	; 0x54 <.do_clear_bss_loop>
  5c:	14 d0       	rcall	.+40     	; 0x86 <main>
  5e:	1c c0       	rjmp	.+56     	; 0x98 <_exit>

00000060 <__bad_interrupt>:
  60:	cf cf       	rjmp	.-98     	; 0x0 <__vectors>

00000062 <__vector_9>:
#include<avr/io.h>		//This is the header for AVR Microcontroller.
#include<avr/interrupt.h>

ISR (TIMER0_OVF_vect) //void timer0_ovf_isr(void)
{
  62:	1f 92       	push	r1
  64:	0f 92       	push	r0
  66:	0f b6       	in	r0, 0x3f	; 63
  68:	0f 92       	push	r0
  6a:	11 24       	eor	r1, r1
  6c:	8f 93       	push	r24
  6e:	9f 93       	push	r25
	
	PORTC^=0x18; 
  70:	85 b3       	in	r24, 0x15	; 21
  72:	98 e1       	ldi	r25, 0x18	; 24
  74:	89 27       	eor	r24, r25
  76:	85 bb       	out	0x15, r24	; 21
  78:	9f 91       	pop	r25
  7a:	8f 91       	pop	r24
  7c:	0f 90       	pop	r0
  7e:	0f be       	out	0x3f, r0	; 63
  80:	0f 90       	pop	r0
  82:	1f 90       	pop	r1
  84:	18 95       	reti

00000086 <main>:
}


int main(void)         
{
	DDRC=0xF8; 			// Port B data direction configuration as output port.
  86:	88 ef       	ldi	r24, 0xF8	; 248
  88:	84 bb       	out	0x14, r24	; 20
	TIMSK=0x01;			//This is for interrupt enable for timer0.
  8a:	81 e0       	ldi	r24, 0x01	; 1
  8c:	89 bf       	out	0x39, r24	; 57
	TCCR0=0x05;			//This is for timer0 initialization.
  8e:	85 e0       	ldi	r24, 0x05	; 5
  90:	83 bf       	out	0x33, r24	; 51
	TCNT0=0x00;
  92:	12 be       	out	0x32, r1	; 50
	sei();
  94:	78 94       	sei
  96:	ff cf       	rjmp	.-2      	; 0x96 <main+0x10>

00000098 <_exit>:
  98:	ff cf       	rjmp	.-2      	; 0x98 <_exit>
