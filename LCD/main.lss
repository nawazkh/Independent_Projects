
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000034e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  0000034e  000003e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  0080006e  0080006e  000003f0  2**0
                  ALLOC
  3 .stab         00000b7c  00000000  00000000  000003f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000085a  00000000  00000000  00000f6c  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
   8:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
   c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  10:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  14:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  18:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  1c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  20:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  24:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  28:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  2c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  30:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  34:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  38:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  3c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  40:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  44:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  48:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  4c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  50:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e4       	ldi	r30, 0x4E	; 78
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ae e6       	ldi	r26, 0x6E	; 110
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 37       	cpi	r26, 0x75	; 117
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0c 94 6d 01 	jmp	0x2da	; 0x2da <main>

0000008a <__bad_interrupt>:
  8a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008e <delayms>:
unsigned int delaycounter1,delaycounter2;
void delayms(unsigned int delaytime)
{

	 for(delaycounter1=0;delaycounter1<=delaytime;delaycounter1++)
  8e:	10 92 74 00 	sts	0x0074, r1
  92:	10 92 73 00 	sts	0x0073, r1
  96:	20 e0       	ldi	r18, 0x00	; 0
  98:	30 e0       	ldi	r19, 0x00	; 0
  9a:	40 e0       	ldi	r20, 0x00	; 0
  9c:	50 e0       	ldi	r21, 0x00	; 0
	...
	 {
		 for(delaycounter2=0;delaycounter2<=800;delaycounter2++)
		  {
		  asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
		  asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
  b6:	4f 5f       	subi	r20, 0xFF	; 255
  b8:	5f 4f       	sbci	r21, 0xFF	; 255
  ba:	63 e0       	ldi	r22, 0x03	; 3
  bc:	41 32       	cpi	r20, 0x21	; 33
  be:	56 07       	cpc	r21, r22
  c0:	71 f7       	brne	.-36     	; 0x9e <delayms+0x10>
  c2:	2f 5f       	subi	r18, 0xFF	; 255
  c4:	3f 4f       	sbci	r19, 0xFF	; 255
  c6:	82 17       	cp	r24, r18
  c8:	93 07       	cpc	r25, r19
  ca:	38 f7       	brcc	.-50     	; 0x9a <delayms+0xc>
  cc:	30 93 74 00 	sts	0x0074, r19
  d0:	20 93 73 00 	sts	0x0073, r18
  d4:	50 93 72 00 	sts	0x0072, r21
  d8:	40 93 71 00 	sts	0x0071, r20
  dc:	08 95       	ret

000000de <delayus>:
		  }
		
	 }
}

void delayus(unsigned int delaytime)
{

	 for(delaycounter1=0;delaycounter1<=delaytime;delaycounter1++)
  de:	10 92 74 00 	sts	0x0074, r1
  e2:	10 92 73 00 	sts	0x0073, r1
  e6:	20 e0       	ldi	r18, 0x00	; 0
  e8:	30 e0       	ldi	r19, 0x00	; 0
	...
	 {
		 
		  asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
		  asm("nop");asm("nop");asm("nop");asm("nop");
  fe:	2f 5f       	subi	r18, 0xFF	; 255
 100:	3f 4f       	sbci	r19, 0xFF	; 255
 102:	82 17       	cp	r24, r18
 104:	93 07       	cpc	r25, r19
 106:	88 f7       	brcc	.-30     	; 0xea <delayus+0xc>
 108:	30 93 74 00 	sts	0x0074, r19
 10c:	20 93 73 00 	sts	0x0073, r18
 110:	08 95       	ret

00000112 <dely_ns>:
}

void dely_ns(unsigned char tim)
{
	for(j=0;j<tim;j++)
 112:	10 92 6f 00 	sts	0x006F, r1
 116:	20 91 6e 00 	lds	r18, 0x006E
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	02 c0       	rjmp	.+4      	; 0x122 <dely_ns+0x10>
 11e:	9f 5f       	subi	r25, 0xFF	; 255
 120:	2b e0       	ldi	r18, 0x0B	; 11
 122:	98 17       	cp	r25, r24
 124:	e0 f3       	brcs	.-8      	; 0x11e <dely_ns+0xc>
 126:	20 93 6e 00 	sts	0x006E, r18
 12a:	90 93 6f 00 	sts	0x006F, r25
 12e:	08 95       	ret

00000130 <latch>:
 130:	aa 98       	cbi	0x15, 2	; 21
 132:	88 ec       	ldi	r24, 0xC8	; 200
 134:	0e 94 89 00 	call	0x112	; 0x112 <dely_ns>
 138:	aa 9a       	sbi	0x15, 2	; 21
 13a:	88 ec       	ldi	r24, 0xC8	; 200
 13c:	0e 94 89 00 	call	0x112	; 0x112 <dely_ns>
 140:	aa 98       	cbi	0x15, 2	; 21
 142:	08 95       	ret

00000144 <lcd_cmd>:
	{
		for(k=0;k<11;k++)
		{};
	}
}

void lcd_cmd(unsigned char cmd)
{
 144:	0f 93       	push	r16
 146:	1f 93       	push	r17
 148:	08 2f       	mov	r16, r24
	PORTC&=~0x07;
 14a:	85 b3       	in	r24, 0x15	; 21
 14c:	88 7f       	andi	r24, 0xF8	; 248
 14e:	85 bb       	out	0x15, r24	; 21
	PORTC=((cmd&0xF0));			
 150:	80 2f       	mov	r24, r16
 152:	80 7f       	andi	r24, 0xF0	; 240
 154:	85 bb       	out	0x15, r24	; 21
	latch();
 156:	0e 94 98 00 	call	0x130	; 0x130 <latch>
	PORTC=(((cmd&(0x0F))*16));	
 15a:	11 27       	eor	r17, r17
 15c:	0f 70       	andi	r16, 0x0F	; 15
 15e:	10 70       	andi	r17, 0x00	; 0
 160:	84 e0       	ldi	r24, 0x04	; 4
 162:	00 0f       	add	r16, r16
 164:	11 1f       	adc	r17, r17
 166:	8a 95       	dec	r24
 168:	e1 f7       	brne	.-8      	; 0x162 <lcd_cmd+0x1e>
 16a:	05 bb       	out	0x15, r16	; 21
	latch();
 16c:	0e 94 98 00 	call	0x130	; 0x130 <latch>
 170:	1f 91       	pop	r17
 172:	0f 91       	pop	r16
 174:	08 95       	ret

00000176 <lcd_char>:
}


void lcd_char(unsigned char single)
{
 176:	1f 93       	push	r17
 178:	18 2f       	mov	r17, r24
	PORTC=0x01;
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	85 bb       	out	0x15, r24	; 21
	PORTC=0x00;
 17e:	15 ba       	out	0x15, r1	; 21
	PORTC=(single&0xF0)|0x01;						
 180:	81 2f       	mov	r24, r17
 182:	80 7f       	andi	r24, 0xF0	; 240
 184:	81 60       	ori	r24, 0x01	; 1
 186:	85 bb       	out	0x15, r24	; 21
	latch();
 188:	0e 94 98 00 	call	0x130	; 0x130 <latch>
	PORTC=((single&(0x0F))*16)|0x01;
 18c:	12 95       	swap	r17
 18e:	10 7f       	andi	r17, 0xF0	; 240
 190:	11 60       	ori	r17, 0x01	; 1
 192:	15 bb       	out	0x15, r17	; 21
	latch();
 194:	0e 94 98 00 	call	0x130	; 0x130 <latch>
 198:	1f 91       	pop	r17
 19a:	08 95       	ret

0000019c <lcd_string>:
}

void lcd_string(unsigned char str[32])
{
 19c:	ef 92       	push	r14
 19e:	ff 92       	push	r15
 1a0:	0f 93       	push	r16
 1a2:	1f 93       	push	r17
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
 1a8:	7c 01       	movw	r14, r24
	unsigned char k=0;
	PORTC=0x01;
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	85 bb       	out	0x15, r24	; 21
	PORTC=0X00;
 1ae:	15 ba       	out	0x15, r1	; 21
 1b0:	00 e0       	ldi	r16, 0x00	; 0
 1b2:	10 e0       	ldi	r17, 0x00	; 0
 1b4:	14 c0       	rjmp	.+40     	; 0x1de <lcd_string+0x42>
		while(str[k]!='\0')	//Till null character is encountered
		{
			if(k==16)
 1b6:	90 31       	cpi	r25, 0x10	; 16
 1b8:	19 f4       	brne	.+6      	; 0x1c0 <lcd_string+0x24>
				lcd_cmd(0XC0);
 1ba:	80 ec       	ldi	r24, 0xC0	; 192
 1bc:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_cmd>
			PORTC=((str[k])&0xF0)|0x01;
 1c0:	88 81       	ld	r24, Y
 1c2:	80 7f       	andi	r24, 0xF0	; 240
 1c4:	81 60       	ori	r24, 0x01	; 1
 1c6:	85 bb       	out	0x15, r24	; 21
			latch();
 1c8:	0e 94 98 00 	call	0x130	; 0x130 <latch>
			PORTC=((str[k]&(0x0F))*16)|0x01;
 1cc:	88 81       	ld	r24, Y
 1ce:	82 95       	swap	r24
 1d0:	80 7f       	andi	r24, 0xF0	; 240
 1d2:	81 60       	ori	r24, 0x01	; 1
 1d4:	85 bb       	out	0x15, r24	; 21
			latch();
 1d6:	0e 94 98 00 	call	0x130	; 0x130 <latch>
 1da:	0f 5f       	subi	r16, 0xFF	; 255
 1dc:	1f 4f       	sbci	r17, 0xFF	; 255
 1de:	90 2f       	mov	r25, r16
 1e0:	e7 01       	movw	r28, r14
 1e2:	c0 0f       	add	r28, r16
 1e4:	d1 1d       	adc	r29, r1
 1e6:	88 81       	ld	r24, Y
 1e8:	88 23       	and	r24, r24
 1ea:	29 f7       	brne	.-54     	; 0x1b6 <lcd_string+0x1a>
 1ec:	df 91       	pop	r29
 1ee:	cf 91       	pop	r28
 1f0:	1f 91       	pop	r17
 1f2:	0f 91       	pop	r16
 1f4:	ff 90       	pop	r15
 1f6:	ef 90       	pop	r14
 1f8:	08 95       	ret

000001fa <lcd_showvalue>:
			k++;
		}
}


void lcd_showvalue(unsigned char num)	//prints the decimal 3digit value of num
{
 1fa:	df 92       	push	r13
 1fc:	ef 92       	push	r14
 1fe:	ff 92       	push	r15
 200:	0f 93       	push	r16
 202:	1f 93       	push	r17
 204:	d8 2e       	mov	r13, r24
	unsigned char H=0,T=0,O=0;
	H=num/100;
 206:	64 e6       	ldi	r22, 0x64	; 100
 208:	0e 94 74 01 	call	0x2e8	; 0x2e8 <__udivmodqi4>
 20c:	28 2f       	mov	r18, r24
	T=(num - (H*100))/10;
 20e:	94 e6       	ldi	r25, 0x64	; 100
 210:	e9 2e       	mov	r14, r25
 212:	8e 9d       	mul	r24, r14
 214:	70 01       	movw	r14, r0
 216:	11 24       	eor	r1, r1
 218:	8d 2d       	mov	r24, r13
 21a:	99 27       	eor	r25, r25
 21c:	8e 19       	sub	r24, r14
 21e:	9f 09       	sbc	r25, r15
 220:	6a e0       	ldi	r22, 0x0A	; 10
 222:	70 e0       	ldi	r23, 0x00	; 0
 224:	0e 94 80 01 	call	0x300	; 0x300 <__divmodhi4>
 228:	8b 01       	movw	r16, r22
	O=(num - (H*100) - (T*10));
	
	lcd_char(H+48);
 22a:	82 2f       	mov	r24, r18
 22c:	80 5d       	subi	r24, 0xD0	; 208
 22e:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_char>
	lcd_char(T+48);
 232:	80 2f       	mov	r24, r16
 234:	80 5d       	subi	r24, 0xD0	; 208
 236:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_char>
	lcd_char(O+48);
 23a:	de 18       	sub	r13, r14
 23c:	8a e0       	ldi	r24, 0x0A	; 10
 23e:	08 9f       	mul	r16, r24
 240:	c0 01       	movw	r24, r0
 242:	11 24       	eor	r1, r1
 244:	d8 1a       	sub	r13, r24
 246:	8d 2d       	mov	r24, r13
 248:	80 5d       	subi	r24, 0xD0	; 208
 24a:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_char>
 24e:	1f 91       	pop	r17
 250:	0f 91       	pop	r16
 252:	ff 90       	pop	r15
 254:	ef 90       	pop	r14
 256:	df 90       	pop	r13
 258:	08 95       	ret

0000025a <lcd_gotoxy>:
}

void lcd_gotoxy(unsigned char row,unsigned char column)			//move cursor to the specified position
{
   if(row==0)
 25a:	88 23       	and	r24, r24
 25c:	29 f4       	brne	.+10     	; 0x268 <lcd_gotoxy+0xe>
    {
	 lcd_cmd(0x80+column);
 25e:	86 2f       	mov	r24, r22
 260:	80 58       	subi	r24, 0x80	; 128
 262:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_cmd>
 266:	08 95       	ret
	}
   else if(row==1)
 268:	81 30       	cpi	r24, 0x01	; 1
 26a:	21 f4       	brne	.+8      	; 0x274 <lcd_gotoxy+0x1a>
	{
	 lcd_cmd(0xC0+column);	
 26c:	86 2f       	mov	r24, r22
 26e:	80 54       	subi	r24, 0x40	; 64
 270:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_cmd>
 274:	08 95       	ret

00000276 <delay_ms>:
	}	
}


void delay_ms(unsigned int ms)
{
 276:	09 c0       	rjmp	.+18     	; 0x28a <delay_ms+0x14>
	int i;

	while (ms-- > 0)
 278:	20 e0       	ldi	r18, 0x00	; 0
 27a:	30 e0       	ldi	r19, 0x00	; 0
	{
		
		for (i = 0; i < 3276; ++i)
			asm("nop");
 27c:	00 00       	nop
 27e:	2f 5f       	subi	r18, 0xFF	; 255
 280:	3f 4f       	sbci	r19, 0xFF	; 255
 282:	4c e0       	ldi	r20, 0x0C	; 12
 284:	2c 3c       	cpi	r18, 0xCC	; 204
 286:	34 07       	cpc	r19, r20
 288:	c9 f7       	brne	.-14     	; 0x27c <delay_ms+0x6>
 28a:	01 97       	sbiw	r24, 0x01	; 1
 28c:	2f ef       	ldi	r18, 0xFF	; 255
 28e:	8f 3f       	cpi	r24, 0xFF	; 255
 290:	92 07       	cpc	r25, r18
 292:	91 f7       	brne	.-28     	; 0x278 <delay_ms+0x2>
 294:	08 95       	ret

00000296 <lcd_init>:
 296:	84 e1       	ldi	r24, 0x14	; 20
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	0e 94 3b 01 	call	0x276	; 0x276 <delay_ms>
 29e:	85 b3       	in	r24, 0x15	; 21
 2a0:	80 93 70 00 	sts	0x0070, r24
 2a4:	8f ef       	ldi	r24, 0xFF	; 255
 2a6:	84 bb       	out	0x14, r24	; 20
 2a8:	87 bb       	out	0x17, r24	; 23
 2aa:	8f e0       	ldi	r24, 0x0F	; 15
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	0e 94 3b 01 	call	0x276	; 0x276 <delay_ms>
 2b2:	80 e2       	ldi	r24, 0x20	; 32
 2b4:	85 bb       	out	0x15, r24	; 21
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_cmd>
 2bc:	82 e0       	ldi	r24, 0x02	; 2
 2be:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_cmd>
 2c2:	80 e8       	ldi	r24, 0x80	; 128
 2c4:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_cmd>
 2c8:	84 e1       	ldi	r24, 0x14	; 20
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	0e 94 3b 01 	call	0x276	; 0x276 <delay_ms>
 2d0:	08 95       	ret

000002d2 <lcd_clear>:
	}
}

void lcd_clear()
{
 lcd_cmd(0x01);
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_cmd>
 2d8:	08 95       	ret

000002da <main>:
#include<technophilia/delay.h>
#include<technophilia/lcd.h>	//header file for interfacing LCD
int main()
 {
  lcd_init();					//function to initialize the LCD
 2da:	0e 94 4b 01 	call	0x296	; 0x296 <lcd_init>
  lcd_string("TECHNOPHILIA");	//function to print a string
 2de:	80 e6       	ldi	r24, 0x60	; 96
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_string>
 2e6:	ff cf       	rjmp	.-2      	; 0x2e6 <main+0xc>

000002e8 <__udivmodqi4>:
 2e8:	99 1b       	sub	r25, r25
 2ea:	79 e0       	ldi	r23, 0x09	; 9
 2ec:	04 c0       	rjmp	.+8      	; 0x2f6 <__udivmodqi4_ep>

000002ee <__udivmodqi4_loop>:
 2ee:	99 1f       	adc	r25, r25
 2f0:	96 17       	cp	r25, r22
 2f2:	08 f0       	brcs	.+2      	; 0x2f6 <__udivmodqi4_ep>
 2f4:	96 1b       	sub	r25, r22

000002f6 <__udivmodqi4_ep>:
 2f6:	88 1f       	adc	r24, r24
 2f8:	7a 95       	dec	r23
 2fa:	c9 f7       	brne	.-14     	; 0x2ee <__udivmodqi4_loop>
 2fc:	80 95       	com	r24
 2fe:	08 95       	ret

00000300 <__divmodhi4>:
 300:	97 fb       	bst	r25, 7
 302:	09 2e       	mov	r0, r25
 304:	07 26       	eor	r0, r23
 306:	0a d0       	rcall	.+20     	; 0x31c <__divmodhi4_neg1>
 308:	77 fd       	sbrc	r23, 7
 30a:	04 d0       	rcall	.+8      	; 0x314 <__divmodhi4_neg2>
 30c:	0c d0       	rcall	.+24     	; 0x326 <__udivmodhi4>
 30e:	06 d0       	rcall	.+12     	; 0x31c <__divmodhi4_neg1>
 310:	00 20       	and	r0, r0
 312:	1a f4       	brpl	.+6      	; 0x31a <__divmodhi4_exit>

00000314 <__divmodhi4_neg2>:
 314:	70 95       	com	r23
 316:	61 95       	neg	r22
 318:	7f 4f       	sbci	r23, 0xFF	; 255

0000031a <__divmodhi4_exit>:
 31a:	08 95       	ret

0000031c <__divmodhi4_neg1>:
 31c:	f6 f7       	brtc	.-4      	; 0x31a <__divmodhi4_exit>
 31e:	90 95       	com	r25
 320:	81 95       	neg	r24
 322:	9f 4f       	sbci	r25, 0xFF	; 255
 324:	08 95       	ret

00000326 <__udivmodhi4>:
 326:	aa 1b       	sub	r26, r26
 328:	bb 1b       	sub	r27, r27
 32a:	51 e1       	ldi	r21, 0x11	; 17
 32c:	07 c0       	rjmp	.+14     	; 0x33c <__udivmodhi4_ep>

0000032e <__udivmodhi4_loop>:
 32e:	aa 1f       	adc	r26, r26
 330:	bb 1f       	adc	r27, r27
 332:	a6 17       	cp	r26, r22
 334:	b7 07       	cpc	r27, r23
 336:	10 f0       	brcs	.+4      	; 0x33c <__udivmodhi4_ep>
 338:	a6 1b       	sub	r26, r22
 33a:	b7 0b       	sbc	r27, r23

0000033c <__udivmodhi4_ep>:
 33c:	88 1f       	adc	r24, r24
 33e:	99 1f       	adc	r25, r25
 340:	5a 95       	dec	r21
 342:	a9 f7       	brne	.-22     	; 0x32e <__udivmodhi4_loop>
 344:	80 95       	com	r24
 346:	90 95       	com	r25
 348:	bc 01       	movw	r22, r24
 34a:	cd 01       	movw	r24, r26
 34c:	08 95       	ret
