
atmega168_serialtest3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000136  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000003b  00000000  00000000  00000156  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000019f  00000000  00000000  00000191  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000013b  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001b5  00000000  00000000  0000046b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000040  00000000  00000000  00000620  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000d8  00000000  00000000  00000660  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000053  00000000  00000000  00000738  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  0000078b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 52 00 	call	0xa4	; 0xa4 <main>
  78:	0c 94 6f 00 	jmp	0xde	; 0xde <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <serial_init>:
#include <util/delay.h>

void serial_init(unsigned int bittimer)
{
	/* Set the baud rate */
	UBRR0H = (unsigned char) (bittimer >> 8);
  80:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char) bittimer;
  84:	80 93 c4 00 	sts	0x00C4, r24
	/* set the framing to 8N1 */
	UCSR0C = (3 << UCSZ00);
  88:	86 e0       	ldi	r24, 0x06	; 6
  8a:	80 93 c2 00 	sts	0x00C2, r24
	/* Engage! */
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
  8e:	88 e1       	ldi	r24, 0x18	; 24
  90:	80 93 c1 00 	sts	0x00C1, r24
	return;
}
  94:	08 95       	ret

00000096 <serial_read>:

unsigned char serial_read(void)
{
	while( !(UCSR0A & (1 << RXC0)) )
  96:	80 91 c0 00 	lds	r24, 0x00C0
  9a:	87 ff       	sbrs	r24, 7
  9c:	fc cf       	rjmp	.-8      	; 0x96 <serial_read>
		;
	return UDR0;
  9e:	80 91 c6 00 	lds	r24, 0x00C6
}
  a2:	08 95       	ret

000000a4 <main>:
#include <util/delay.h>

void serial_init(unsigned int bittimer)
{
	/* Set the baud rate */
	UBRR0H = (unsigned char) (bittimer >> 8);
  a4:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char) bittimer;
  a8:	85 e0       	ldi	r24, 0x05	; 5
  aa:	80 93 c4 00 	sts	0x00C4, r24
	/* set the framing to 8N1 */
	UCSR0C = (3 << UCSZ00);
  ae:	86 e0       	ldi	r24, 0x06	; 6
  b0:	80 93 c2 00 	sts	0x00C2, r24
	/* Engage! */
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
  b4:	88 e1       	ldi	r24, 0x18	; 24
  b6:	80 93 c1 00 	sts	0x00C1, r24
	while (1) {
		/* read a character and echo back the next one */
		c=serial_read();
		if( c='W')
		{
		PORTB=0b11111111;
  ba:	4f ef       	ldi	r20, 0xFF	; 255
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  bc:	29 e1       	ldi	r18, 0x19	; 25
  be:	30 e0       	ldi	r19, 0x00	; 0
	return;
}

unsigned char serial_read(void)
{
	while( !(UCSR0A & (1 << RXC0)) )
  c0:	80 91 c0 00 	lds	r24, 0x00C0
  c4:	87 ff       	sbrs	r24, 7
  c6:	fc cf       	rjmp	.-8      	; 0xc0 <main+0x1c>
		;
	return UDR0;
  c8:	80 91 c6 00 	lds	r24, 0x00C6
	while (1) {
		/* read a character and echo back the next one */
		c=serial_read();
		if( c='W')
		{
		PORTB=0b11111111;
  cc:	45 b9       	out	0x05, r20	; 5
  ce:	80 e1       	ldi	r24, 0x10	; 16
  d0:	97 e2       	ldi	r25, 0x27	; 39
  d2:	f9 01       	movw	r30, r18
  d4:	31 97       	sbiw	r30, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <main+0x30>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  d8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  da:	d9 f7       	brne	.-10     	; 0xd2 <main+0x2e>
  dc:	f1 cf       	rjmp	.-30     	; 0xc0 <main+0x1c>

000000de <_exit>:
  de:	f8 94       	cli

000000e0 <__stop_program>:
  e0:	ff cf       	rjmp	.-2      	; 0xe0 <__stop_program>
