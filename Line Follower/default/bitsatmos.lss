
bitsatmos.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000027ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001e6  00800060  000027ce  00002862  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002e  00800246  00800246  00002a48  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00002a48  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000025a  00000000  00000000  00002a68  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c39  00000000  00000000  00002cc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000028d  00000000  00000000  000038fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001023  00000000  00000000  00003b88  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001b0  00000000  00000000  00004bac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000268  00000000  00000000  00004d5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000059f  00000000  00000000  00004fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00005563  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 c7 0b 	jmp	0x178e	; 0x178e <__vector_1>
       8:	0c 94 a6 0a 	jmp	0x154c	; 0x154c <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 4f 0b 	jmp	0x169e	; 0x169e <__vector_18>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ec       	ldi	r30, 0xCE	; 206
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 34       	cpi	r26, 0x46	; 70
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a6 e4       	ldi	r26, 0x46	; 70
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 37       	cpi	r26, 0x74	; 116
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 cc 04 	call	0x998	; 0x998 <main>
      8a:	0c 94 e5 13 	jmp	0x27ca	; 0x27ca <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=0xF0;
      92:	84 b3       	in	r24, 0x14	; 20
      94:	80 7f       	andi	r24, 0xF0	; 240
      96:	84 bb       	out	0x14, r24	; 20

	//change LCD mode
	SET_RW();		//Read mode
      98:	ad 9a       	sbi	0x15, 5	; 21
	CLEAR_RS();		//Read status
      9a:	ac 98       	cbi	0x15, 4	; 21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
      9c:	81 e0       	ldi	r24, 0x01	; 1
      9e:	8a 95       	dec	r24
      a0:	f1 f7       	brne	.-4      	; 0x9e <LCDBusyLoop+0xc>

	
	do
	{

		SET_E();
      a2:	21 e0       	ldi	r18, 0x01	; 1
      a4:	ae 9a       	sbi	0x15, 6	; 21
      a6:	82 2f       	mov	r24, r18
      a8:	8a 95       	dec	r24
      aa:	f1 f7       	brne	.-4      	; 0xa8 <LCDBusyLoop+0x16>

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=LCD_DATA_PIN;
      ac:	83 b3       	in	r24, 0x13	; 19
		status=status<<4;
      ae:	82 95       	swap	r24
      b0:	80 7f       	andi	r24, 0xF0	; 240
      b2:	92 2f       	mov	r25, r18
      b4:	9a 95       	dec	r25
      b6:	f1 f7       	brne	.-4      	; 0xb4 <LCDBusyLoop+0x22>

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
      b8:	ae 98       	cbi	0x15, 6	; 21
      ba:	92 2f       	mov	r25, r18
      bc:	9a 95       	dec	r25
      be:	f1 f7       	brne	.-4      	; 0xbc <LCDBusyLoop+0x2a>
		_delay_us(1);	//tEL

		SET_E();
      c0:	ae 9a       	sbi	0x15, 6	; 21
      c2:	92 2f       	mov	r25, r18
      c4:	9a 95       	dec	r25
      c6:	f1 f7       	brne	.-4      	; 0xc4 <LCDBusyLoop+0x32>
		_delay_us(0.5);

		temp=LCD_DATA_PIN;
      c8:	93 b3       	in	r25, 0x13	; 19
      ca:	92 2f       	mov	r25, r18
      cc:	9a 95       	dec	r25
      ce:	f1 f7       	brne	.-4      	; 0xcc <LCDBusyLoop+0x3a>
		status=status|temp;

		busy=status & 0b10000000;

		_delay_us(0.5);
		CLEAR_E();
      d0:	ae 98       	cbi	0x15, 6	; 21
      d2:	92 2f       	mov	r25, r18
      d4:	9a 95       	dec	r25
      d6:	f1 f7       	brne	.-4      	; 0xd4 <LCDBusyLoop+0x42>
		_delay_us(1);	//tEL
	}while(busy);
      d8:	87 fd       	sbrc	r24, 7
      da:	e4 cf       	rjmp	.-56     	; 0xa4 <LCDBusyLoop+0x12>

	CLEAR_RW();		//write mode
      dc:	ad 98       	cbi	0x15, 5	; 21
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
      de:	84 b3       	in	r24, 0x14	; 20
      e0:	8f 60       	ori	r24, 0x0F	; 15
      e2:	84 bb       	out	0x14, r24	; 20

}
      e4:	08 95       	ret

000000e6 <LCDByte>:
#define CLEAR_RW() (LCD_RW_PORT&=(~(1<<LCD_RW_POS)))



void LCDByte(uint8_t c,uint8_t isdata)
{
      e6:	38 2f       	mov	r19, r24
uint8_t temp;

hn=c>>4;
ln=(c & 0x0F);

if(isdata==0)
      e8:	66 23       	and	r22, r22
      ea:	11 f4       	brne	.+4      	; 0xf0 <LCDByte+0xa>
	CLEAR_RS();
      ec:	ac 98       	cbi	0x15, 4	; 21
      ee:	01 c0       	rjmp	.+2      	; 0xf2 <LCDByte+0xc>
else
	SET_RS();
      f0:	ac 9a       	sbi	0x15, 4	; 21
      f2:	21 e0       	ldi	r18, 0x01	; 1
      f4:	82 2f       	mov	r24, r18
      f6:	8a 95       	dec	r24
      f8:	f1 f7       	brne	.-4      	; 0xf6 <LCDByte+0x10>

_delay_us(0.500);		//tAS

SET_E();
      fa:	ae 9a       	sbi	0x15, 6	; 21

//Send high nibble

temp=(LCD_DATA_PORT & 0XF0)|(hn);
      fc:	85 b3       	in	r24, 0x15	; 21
      fe:	93 2f       	mov	r25, r19
     100:	92 95       	swap	r25
     102:	9f 70       	andi	r25, 0x0F	; 15
     104:	80 7f       	andi	r24, 0xF0	; 240
     106:	98 2b       	or	r25, r24
LCD_DATA_PORT=temp;
     108:	95 bb       	out	0x15, r25	; 21
     10a:	82 2f       	mov	r24, r18
     10c:	8a 95       	dec	r24
     10e:	f1 f7       	brne	.-4      	; 0x10c <LCDByte+0x26>

_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
     110:	ae 98       	cbi	0x15, 6	; 21
     112:	82 2f       	mov	r24, r18
     114:	8a 95       	dec	r24
     116:	f1 f7       	brne	.-4      	; 0x114 <LCDByte+0x2e>

_delay_us(1);

//Send the lower nibble
SET_E();
     118:	ae 9a       	sbi	0x15, 6	; 21

temp=(LCD_DATA_PORT & 0XF0)|(ln);
     11a:	85 b3       	in	r24, 0x15	; 21
     11c:	3f 70       	andi	r19, 0x0F	; 15
     11e:	80 7f       	andi	r24, 0xF0	; 240
     120:	83 2b       	or	r24, r19

LCD_DATA_PORT=temp;
     122:	85 bb       	out	0x15, r24	; 21
     124:	82 2f       	mov	r24, r18
     126:	8a 95       	dec	r24
     128:	f1 f7       	brne	.-4      	; 0x126 <LCDByte+0x40>

_delay_us(1);			//tEH

//SEND

CLEAR_E();
     12a:	ae 98       	cbi	0x15, 6	; 21
     12c:	2a 95       	dec	r18
     12e:	f1 f7       	brne	.-4      	; 0x12c <LCDByte+0x46>

_delay_us(1);			//tEL

LCDBusyLoop();
     130:	0e 94 49 00 	call	0x92	; 0x92 <LCDBusyLoop>
}
     134:	08 95       	ret

00000136 <InitLCD>:
	LCD_DATA_DDR|=0x0F;

}

void InitLCD(uint8_t style)
{
     136:	1f 93       	push	r17
     138:	18 2f       	mov	r17, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     13a:	8c e4       	ldi	r24, 0x4C	; 76
     13c:	9d e1       	ldi	r25, 0x1D	; 29
     13e:	01 97       	sbiw	r24, 0x01	; 1
     140:	f1 f7       	brne	.-4      	; 0x13e <InitLCD+0x8>
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
     142:	84 b3       	in	r24, 0x14	; 20
     144:	8f 60       	ori	r24, 0x0F	; 15
     146:	84 bb       	out	0x14, r24	; 20
	LCD_E_DDR|=(1<<LCD_E_POS);
     148:	a6 9a       	sbi	0x14, 6	; 20
	LCD_RS_DDR|=(1<<LCD_RS_POS);
     14a:	a4 9a       	sbi	0x14, 4	; 20
	LCD_RW_DDR|=(1<<LCD_RW_POS);
     14c:	a5 9a       	sbi	0x14, 5	; 20

	LCD_DATA_PORT&=0XF0;
     14e:	85 b3       	in	r24, 0x15	; 21
     150:	80 7f       	andi	r24, 0xF0	; 240
     152:	85 bb       	out	0x15, r24	; 21
	CLEAR_E();
     154:	ae 98       	cbi	0x15, 6	; 21
	CLEAR_RW();
     156:	ad 98       	cbi	0x15, 5	; 21
	CLEAR_RS();
     158:	ac 98       	cbi	0x15, 4	; 21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     15a:	81 e0       	ldi	r24, 0x01	; 1
     15c:	98 2f       	mov	r25, r24
     15e:	9a 95       	dec	r25
     160:	f1 f7       	brne	.-4      	; 0x15e <InitLCD+0x28>

	//Set 4-bit mode
	_delay_us(0.3);	//tAS

	SET_E();
     162:	ae 9a       	sbi	0x15, 6	; 21
	LCD_DATA_PORT|=(0b00000010); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
     164:	a9 9a       	sbi	0x15, 1	; 21
     166:	98 2f       	mov	r25, r24
     168:	9a 95       	dec	r25
     16a:	f1 f7       	brne	.-4      	; 0x168 <InitLCD+0x32>
	_delay_us(1);
	CLEAR_E();
     16c:	ae 98       	cbi	0x15, 6	; 21
     16e:	8a 95       	dec	r24
     170:	f1 f7       	brne	.-4      	; 0x16e <InitLCD+0x38>
	_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
     172:	0e 94 49 00 	call	0x92	; 0x92 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
     176:	81 2f       	mov	r24, r17
     178:	8c 60       	ori	r24, 0x0C	; 12
     17a:	60 e0       	ldi	r22, 0x00	; 0
     17c:	0e 94 73 00 	call	0xe6	; 0xe6 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
     180:	88 e2       	ldi	r24, 0x28	; 40
     182:	60 e0       	ldi	r22, 0x00	; 0
     184:	0e 94 73 00 	call	0xe6	; 0xe6 <LCDByte>
}
     188:	1f 91       	pop	r17
     18a:	08 95       	ret

0000018c <LCDWriteString>:
void LCDWriteString(const char *msg)
{
     18c:	cf 93       	push	r28
     18e:	df 93       	push	r29
     190:	ec 01       	movw	r28, r24
     192:	04 c0       	rjmp	.+8      	; 0x19c <LCDWriteString+0x10>


	*****************************************************************/
 while(*msg!='\0')
 {
	LCDData(*msg);
     194:	61 e0       	ldi	r22, 0x01	; 1
     196:	0e 94 73 00 	call	0xe6	; 0xe6 <LCDByte>
	msg++;
     19a:	21 96       	adiw	r28, 0x01	; 1
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
     19c:	88 81       	ld	r24, Y
     19e:	88 23       	and	r24, r24
     1a0:	c9 f7       	brne	.-14     	; 0x194 <LCDWriteString+0x8>
 {
	LCDData(*msg);
	msg++;
 }
}
     1a2:	df 91       	pop	r29
     1a4:	cf 91       	pop	r28
     1a6:	08 95       	ret

000001a8 <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
     1a8:	ef 92       	push	r14
     1aa:	ff 92       	push	r15
     1ac:	0f 93       	push	r16
     1ae:	1f 93       	push	r17
     1b0:	df 93       	push	r29
     1b2:	cf 93       	push	r28
     1b4:	00 d0       	rcall	.+0      	; 0x1b6 <LCDWriteInt+0xe>
     1b6:	00 d0       	rcall	.+0      	; 0x1b8 <LCDWriteInt+0x10>
     1b8:	0f 92       	push	r0
     1ba:	cd b7       	in	r28, 0x3d	; 61
     1bc:	de b7       	in	r29, 0x3e	; 62
     1be:	9c 01       	movw	r18, r24
     1c0:	8b 01       	movw	r16, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
     1c2:	fe 01       	movw	r30, r28
     1c4:	31 96       	adiw	r30, 0x01	; 1
     1c6:	85 e0       	ldi	r24, 0x05	; 5
     1c8:	df 01       	movw	r26, r30
     1ca:	1d 92       	st	X+, r1
     1cc:	8a 95       	dec	r24
     1ce:	e9 f7       	brne	.-6      	; 0x1ca <LCDWriteInt+0x22>
     1d0:	fe 01       	movw	r30, r28
     1d2:	35 96       	adiw	r30, 0x05	; 5
     1d4:	0d c0       	rjmp	.+26     	; 0x1f0 <LCDWriteInt+0x48>
	int i=4,j=0;
	while(val)
	{
	str[i]=val%10;
     1d6:	c9 01       	movw	r24, r18
     1d8:	6a e0       	ldi	r22, 0x0A	; 10
     1da:	70 e0       	ldi	r23, 0x00	; 0
     1dc:	0e 94 87 13 	call	0x270e	; 0x270e <__divmodhi4>
     1e0:	80 83       	st	Z, r24
	val=val/10;
     1e2:	c9 01       	movw	r24, r18
     1e4:	6a e0       	ldi	r22, 0x0A	; 10
     1e6:	70 e0       	ldi	r23, 0x00	; 0
     1e8:	0e 94 87 13 	call	0x270e	; 0x270e <__divmodhi4>
     1ec:	9b 01       	movw	r18, r22
     1ee:	31 97       	sbiw	r30, 0x01	; 1

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
     1f0:	21 15       	cp	r18, r1
     1f2:	31 05       	cpc	r19, r1
     1f4:	81 f7       	brne	.-32     	; 0x1d6 <LCDWriteInt+0x2e>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
     1f6:	bf ef       	ldi	r27, 0xFF	; 255
     1f8:	0f 3f       	cpi	r16, 0xFF	; 255
     1fa:	1b 07       	cpc	r17, r27
     1fc:	79 f4       	brne	.+30     	; 0x21c <LCDWriteInt+0x74>
     1fe:	20 e0       	ldi	r18, 0x00	; 0
     200:	30 e0       	ldi	r19, 0x00	; 0
		while(str[j]==0) j++;
     202:	ae 01       	movw	r20, r28
     204:	4f 5f       	subi	r20, 0xFF	; 255
     206:	5f 4f       	sbci	r21, 0xFF	; 255
     208:	02 c0       	rjmp	.+4      	; 0x20e <LCDWriteInt+0x66>
     20a:	2f 5f       	subi	r18, 0xFF	; 255
     20c:	3f 4f       	sbci	r19, 0xFF	; 255
     20e:	fa 01       	movw	r30, r20
     210:	e2 0f       	add	r30, r18
     212:	f3 1f       	adc	r31, r19
     214:	80 81       	ld	r24, Z
     216:	88 23       	and	r24, r24
     218:	c1 f3       	breq	.-16     	; 0x20a <LCDWriteInt+0x62>
     21a:	04 c0       	rjmp	.+8      	; 0x224 <LCDWriteInt+0x7c>
	else
		j=5-field_length;
     21c:	25 e0       	ldi	r18, 0x05	; 5
     21e:	30 e0       	ldi	r19, 0x00	; 0
     220:	20 1b       	sub	r18, r16
     222:	31 0b       	sbc	r19, r17
     224:	7e 01       	movw	r14, r28
     226:	08 94       	sec
     228:	e1 1c       	adc	r14, r1
     22a:	f1 1c       	adc	r15, r1
     22c:	e2 0e       	add	r14, r18
     22e:	f3 1e       	adc	r15, r19
     230:	89 01       	movw	r16, r18
     232:	09 c0       	rjmp	.+18     	; 0x246 <LCDWriteInt+0x9e>

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
     234:	f7 01       	movw	r30, r14
     236:	81 91       	ld	r24, Z+
     238:	7f 01       	movw	r14, r30
     23a:	80 5d       	subi	r24, 0xD0	; 208
     23c:	61 e0       	ldi	r22, 0x01	; 1
     23e:	0e 94 73 00 	call	0xe6	; 0xe6 <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
     242:	0f 5f       	subi	r16, 0xFF	; 255
     244:	1f 4f       	sbci	r17, 0xFF	; 255
     246:	05 30       	cpi	r16, 0x05	; 5
     248:	11 05       	cpc	r17, r1
     24a:	a4 f3       	brlt	.-24     	; 0x234 <LCDWriteInt+0x8c>
	{
	LCDData(48+str[i]);
	}
}
     24c:	0f 90       	pop	r0
     24e:	0f 90       	pop	r0
     250:	0f 90       	pop	r0
     252:	0f 90       	pop	r0
     254:	0f 90       	pop	r0
     256:	cf 91       	pop	r28
     258:	df 91       	pop	r29
     25a:	1f 91       	pop	r17
     25c:	0f 91       	pop	r16
     25e:	ff 90       	pop	r15
     260:	ef 90       	pop	r14
     262:	08 95       	ret

00000264 <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 if(x<40)
     264:	88 32       	cpi	r24, 0x28	; 40
     266:	30 f4       	brcc	.+12     	; 0x274 <LCDGotoXY+0x10>
 {
  if(y) x|=0b01000000;
     268:	61 11       	cpse	r22, r1
     26a:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  LCDCmd(x);
     26c:	80 68       	ori	r24, 0x80	; 128
     26e:	60 e0       	ldi	r22, 0x00	; 0
     270:	0e 94 73 00 	call	0xe6	; 0xe6 <LCDByte>
     274:	08 95       	ret

00000276 <InitPorts>:
unsigned short int basespeed = 175, Kp = 30 , Ki = 4,Kd = 8;
float P, I, D, correction;

void InitPorts(void) 						//initialize the pins 
{
	sbi(DDRC, PC7);						//set LCD Baklight pin as output
     276:	a7 9a       	sbi	0x14, 7	; 20
	cbi(PORTC, PC7);		
     278:	af 98       	cbi	0x15, 7	; 21
	
	//initializes the pins connected to motor driver as output
	sbi(DDRD, PD5);						
     27a:	8d 9a       	sbi	0x11, 5	; 17
	sbi(DDRD, PD6);
     27c:	8e 9a       	sbi	0x11, 6	; 17
	sbi(DDRD, PD7);	
     27e:	8f 9a       	sbi	0x11, 7	; 17
	sbi(DDRD, PD4);
     280:	8c 9a       	sbi	0x11, 4	; 17
	sbi(DDRD, PD0);
     282:	88 9a       	sbi	0x11, 0	; 17
	sbi(DDRD, PD1);
     284:	89 9a       	sbi	0x11, 1	; 17
	cbi(PORTD, PD5);
     286:	95 98       	cbi	0x12, 5	; 18
	cbi(PORTD, PD6);
     288:	96 98       	cbi	0x12, 6	; 18
	cbi(PORTD, PD7);	
     28a:	97 98       	cbi	0x12, 7	; 18
	cbi(PORTD, PD4);
     28c:	94 98       	cbi	0x12, 4	; 18
	cbi(PORTD, PD0);
     28e:	90 98       	cbi	0x12, 0	; 18
	cbi(PORTD, PD1);	
     290:	91 98       	cbi	0x12, 1	; 18
	
	//initiallizes the motor enable pins as output
	sbi(PORTD, PD4);	
     292:	94 9a       	sbi	0x12, 4	; 18
	sbi(PORTD, PD5);		
     294:	95 9a       	sbi	0x12, 5	; 18
	

	
	//the following statements set the seitch pins as input pins
	cbi(DDRD, PD2);
     296:	8a 98       	cbi	0x11, 2	; 17
	cbi(DDRD, PD3);
     298:	8b 98       	cbi	0x11, 3	; 17
	cbi(DDRB, PB2);
     29a:	ba 98       	cbi	0x17, 2	; 23
	
	DDRA = 0;    								//sets the port connected to sensors as input	
     29c:	1a ba       	out	0x1a, r1	; 26
	PORTA = 0;   								//enable pull up	
     29e:	1b ba       	out	0x1b, r1	; 27
}
     2a0:	08 95       	ret

000002a2 <InitPWM>:
	
void InitPWM(void)								//initialize PWM				
{	
	TCCR1A = _BV(WGM10)   					    // 8 bit fast PWM
     2a2:	81 ea       	ldi	r24, 0xA1	; 161
     2a4:	8f bd       	out	0x2f, r24	; 47
		   | _BV(COM1A1)  						// set OC1A/B on compare match
		   | _BV(COM1B1);		
	TCCR1B = _BV(CS11)  	   				   // 1/8 prescale fast PWM
     2a6:	8a e0       	ldi	r24, 0x0A	; 10
     2a8:	8e bd       	out	0x2e, r24	; 46
		   | _BV(WGM12) ;  				
}	
     2aa:	08 95       	ret

000002ac <InitInterrupts>:

void InitInterrupts(void)
{
	cbi(MCUCR, ISC10);
     2ac:	85 b7       	in	r24, 0x35	; 53
     2ae:	8b 7f       	andi	r24, 0xFB	; 251
     2b0:	85 bf       	out	0x35, r24	; 53
	cbi(MCUCR, ISC11);
     2b2:	85 b7       	in	r24, 0x35	; 53
     2b4:	87 7f       	andi	r24, 0xF7	; 247
     2b6:	85 bf       	out	0x35, r24	; 53
	
	cbi(MCUCR, ISC00);
     2b8:	85 b7       	in	r24, 0x35	; 53
     2ba:	8e 7f       	andi	r24, 0xFE	; 254
     2bc:	85 bf       	out	0x35, r24	; 53
	cbi(MCUCR, ISC01);
     2be:	85 b7       	in	r24, 0x35	; 53
     2c0:	8d 7f       	andi	r24, 0xFD	; 253
     2c2:	85 bf       	out	0x35, r24	; 53
	
	cbi(MCUCR, ISC2);
     2c4:	85 b7       	in	r24, 0x35	; 53
     2c6:	8f 7b       	andi	r24, 0xBF	; 191
     2c8:	85 bf       	out	0x35, r24	; 53
	
	GICR  |= (1<<INT0);
     2ca:	8b b7       	in	r24, 0x3b	; 59
     2cc:	80 64       	ori	r24, 0x40	; 64
     2ce:	8b bf       	out	0x3b, r24	; 59
	GICR  |= (1<<INT1);
     2d0:	8b b7       	in	r24, 0x3b	; 59
     2d2:	80 68       	ori	r24, 0x80	; 128
     2d4:	8b bf       	out	0x3b, r24	; 59
	GICR  |= (1<<INT2);
     2d6:	8b b7       	in	r24, 0x3b	; 59
     2d8:	80 62       	ori	r24, 0x20	; 32
     2da:	8b bf       	out	0x3b, r24	; 59
}
     2dc:	08 95       	ret

000002de <CalcError>:

void CalcError()								//calculates the current error
{				
     2de:	2f 92       	push	r2
     2e0:	3f 92       	push	r3
     2e2:	4f 92       	push	r4
     2e4:	5f 92       	push	r5
     2e6:	6f 92       	push	r6
     2e8:	7f 92       	push	r7
     2ea:	8f 92       	push	r8
     2ec:	9f 92       	push	r9
     2ee:	af 92       	push	r10
     2f0:	bf 92       	push	r11
     2f2:	cf 92       	push	r12
     2f4:	df 92       	push	r13
     2f6:	ef 92       	push	r14
     2f8:	ff 92       	push	r15
     2fa:	0f 93       	push	r16
     2fc:	1f 93       	push	r17
     2fe:	df 93       	push	r29
     300:	cf 93       	push	r28
     302:	00 d0       	rcall	.+0      	; 0x304 <CalcError+0x26>
     304:	00 d0       	rcall	.+0      	; 0x306 <CalcError+0x28>
     306:	cd b7       	in	r28, 0x3d	; 61
     308:	de b7       	in	r29, 0x3e	; 62
	
	
	perror = error;
     30a:	80 91 46 02 	lds	r24, 0x0246
     30e:	90 91 47 02 	lds	r25, 0x0247
     312:	a0 91 48 02 	lds	r26, 0x0248
     316:	b0 91 49 02 	lds	r27, 0x0249
     31a:	80 93 4a 02 	sts	0x024A, r24
     31e:	90 93 4b 02 	sts	0x024B, r25
     322:	a0 93 4c 02 	sts	0x024C, r26
     326:	b0 93 4d 02 	sts	0x024D, r27
	
	//the following statements calculate the error
	
	error = (s1 * 1) + (s2 * 2) + (s3 * 3) + (s4 * 4) + (s5 * 5) + (s6 * 6) +(s7 * 7) + (s8*8);
     32a:	80 91 56 02 	lds	r24, 0x0256
     32e:	90 91 57 02 	lds	r25, 0x0257
     332:	9a 83       	std	Y+2, r25	; 0x02
     334:	89 83       	std	Y+1, r24	; 0x01
     336:	e0 90 6c 02 	lds	r14, 0x026C
     33a:	f0 90 6d 02 	lds	r15, 0x026D
     33e:	20 90 64 02 	lds	r2, 0x0264
     342:	30 90 65 02 	lds	r3, 0x0265
     346:	80 90 62 02 	lds	r8, 0x0262
     34a:	90 90 63 02 	lds	r9, 0x0263
     34e:	00 91 58 02 	lds	r16, 0x0258
     352:	10 91 59 02 	lds	r17, 0x0259
     356:	60 90 6e 02 	lds	r6, 0x026E
     35a:	70 90 6f 02 	lds	r7, 0x026F
     35e:	40 90 54 02 	lds	r4, 0x0254
     362:	50 90 55 02 	lds	r5, 0x0255
     366:	e0 91 5a 02 	lds	r30, 0x025A
     36a:	f0 91 5b 02 	lds	r31, 0x025B
     36e:	fc 83       	std	Y+4, r31	; 0x04
     370:	eb 83       	std	Y+3, r30	; 0x03
	error = (error)/(s1+s2+s3+s4+s5+s6+s7+s8);	
	error = error - 4.5;
     372:	b7 01       	movw	r22, r14
     374:	66 0f       	add	r22, r22
     376:	77 1f       	adc	r23, r23
     378:	6e 0d       	add	r22, r14
     37a:	7f 1d       	adc	r23, r15
     37c:	91 01       	movw	r18, r2
     37e:	22 0f       	add	r18, r18
     380:	33 1f       	adc	r19, r19
     382:	62 0f       	add	r22, r18
     384:	73 1f       	adc	r23, r19
     386:	68 0f       	add	r22, r24
     388:	79 1f       	adc	r23, r25
     38a:	94 01       	movw	r18, r8
     38c:	22 0f       	add	r18, r18
     38e:	33 1f       	adc	r19, r19
     390:	22 0f       	add	r18, r18
     392:	33 1f       	adc	r19, r19
     394:	28 0d       	add	r18, r8
     396:	39 1d       	adc	r19, r9
     398:	62 0f       	add	r22, r18
     39a:	73 1f       	adc	r23, r19
     39c:	98 01       	movw	r18, r16
     39e:	22 0f       	add	r18, r18
     3a0:	33 1f       	adc	r19, r19
     3a2:	22 0f       	add	r18, r18
     3a4:	33 1f       	adc	r19, r19
     3a6:	62 0f       	add	r22, r18
     3a8:	73 1f       	adc	r23, r19
     3aa:	93 01       	movw	r18, r6
     3ac:	53 e0       	ldi	r21, 0x03	; 3
     3ae:	22 0f       	add	r18, r18
     3b0:	33 1f       	adc	r19, r19
     3b2:	5a 95       	dec	r21
     3b4:	e1 f7       	brne	.-8      	; 0x3ae <CalcError+0xd0>
     3b6:	26 19       	sub	r18, r6
     3b8:	37 09       	sbc	r19, r7
     3ba:	62 0f       	add	r22, r18
     3bc:	73 1f       	adc	r23, r19
     3be:	92 01       	movw	r18, r4
     3c0:	22 0f       	add	r18, r18
     3c2:	33 1f       	adc	r19, r19
     3c4:	24 0d       	add	r18, r4
     3c6:	35 1d       	adc	r19, r5
     3c8:	22 0f       	add	r18, r18
     3ca:	33 1f       	adc	r19, r19
     3cc:	62 0f       	add	r22, r18
     3ce:	73 1f       	adc	r23, r19
     3d0:	9f 01       	movw	r18, r30
     3d2:	83 e0       	ldi	r24, 0x03	; 3
     3d4:	22 0f       	add	r18, r18
     3d6:	33 1f       	adc	r19, r19
     3d8:	8a 95       	dec	r24
     3da:	e1 f7       	brne	.-8      	; 0x3d4 <CalcError+0xf6>
     3dc:	62 0f       	add	r22, r18
     3de:	73 1f       	adc	r23, r19
     3e0:	80 e0       	ldi	r24, 0x00	; 0
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	0e 94 19 11 	call	0x2232	; 0x2232 <__floatunsisf>
     3e8:	5b 01       	movw	r10, r22
     3ea:	6c 01       	movw	r12, r24
     3ec:	89 81       	ldd	r24, Y+1	; 0x01
     3ee:	9a 81       	ldd	r25, Y+2	; 0x02
     3f0:	e8 0e       	add	r14, r24
     3f2:	f9 1e       	adc	r15, r25
     3f4:	e2 0c       	add	r14, r2
     3f6:	f3 1c       	adc	r15, r3
     3f8:	e8 0c       	add	r14, r8
     3fa:	f9 1c       	adc	r15, r9
     3fc:	e0 0e       	add	r14, r16
     3fe:	f1 1e       	adc	r15, r17
     400:	e6 0c       	add	r14, r6
     402:	f7 1c       	adc	r15, r7
     404:	e4 0c       	add	r14, r4
     406:	f5 1c       	adc	r15, r5
     408:	eb 81       	ldd	r30, Y+3	; 0x03
     40a:	fc 81       	ldd	r31, Y+4	; 0x04
     40c:	ee 0e       	add	r14, r30
     40e:	ff 1e       	adc	r15, r31
     410:	00 e0       	ldi	r16, 0x00	; 0
     412:	10 e0       	ldi	r17, 0x00	; 0
     414:	c8 01       	movw	r24, r16
     416:	b7 01       	movw	r22, r14
     418:	0e 94 19 11 	call	0x2232	; 0x2232 <__floatunsisf>
     41c:	9b 01       	movw	r18, r22
     41e:	ac 01       	movw	r20, r24
     420:	c6 01       	movw	r24, r12
     422:	b5 01       	movw	r22, r10
     424:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <__divsf3>
     428:	20 e0       	ldi	r18, 0x00	; 0
     42a:	30 e0       	ldi	r19, 0x00	; 0
     42c:	40 e9       	ldi	r20, 0x90	; 144
     42e:	50 e4       	ldi	r21, 0x40	; 64
     430:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <__subsf3>
     434:	60 93 46 02 	sts	0x0246, r22
     438:	70 93 47 02 	sts	0x0247, r23
     43c:	80 93 48 02 	sts	0x0248, r24
     440:	90 93 49 02 	sts	0x0249, r25
}
     444:	0f 90       	pop	r0
     446:	0f 90       	pop	r0
     448:	0f 90       	pop	r0
     44a:	0f 90       	pop	r0
     44c:	cf 91       	pop	r28
     44e:	df 91       	pop	r29
     450:	1f 91       	pop	r17
     452:	0f 91       	pop	r16
     454:	ff 90       	pop	r15
     456:	ef 90       	pop	r14
     458:	df 90       	pop	r13
     45a:	cf 90       	pop	r12
     45c:	bf 90       	pop	r11
     45e:	af 90       	pop	r10
     460:	9f 90       	pop	r9
     462:	8f 90       	pop	r8
     464:	7f 90       	pop	r7
     466:	6f 90       	pop	r6
     468:	5f 90       	pop	r5
     46a:	4f 90       	pop	r4
     46c:	3f 90       	pop	r3
     46e:	2f 90       	pop	r2
     470:	08 95       	ret

00000472 <LeftMB>:

void LeftMB(void)	
{
	sbi(PORTD, PD5);
     472:	95 9a       	sbi	0x12, 5	; 18
	cbi(PORTD, PD6);
     474:	96 98       	cbi	0x12, 6	; 18
	sbi(PORTD, PD7);
     476:	97 9a       	sbi	0x12, 7	; 18
}
     478:	08 95       	ret

0000047a <RightMF>:

void RightMF(void)
{
	sbi(PORTD, PD4);
     47a:	94 9a       	sbi	0x12, 4	; 18
	cbi(PORTD, PD0);
     47c:	90 98       	cbi	0x12, 0	; 18
	sbi(PORTD, PD1);
     47e:	91 9a       	sbi	0x12, 1	; 18
}
     480:	08 95       	ret

00000482 <LeftMF>:
void LeftMF(void)
{
	sbi(PORTD, PD5);
     482:	95 9a       	sbi	0x12, 5	; 18
	sbi(PORTD, PD6);
     484:	96 9a       	sbi	0x12, 6	; 18
	cbi(PORTD, PD7);
     486:	97 98       	cbi	0x12, 7	; 18
}
     488:	08 95       	ret

0000048a <RightMB>:

void RightMB(void)
{
	sbi(PORTD, PD4);
     48a:	94 9a       	sbi	0x12, 4	; 18
	sbi(PORTD, PD0);
     48c:	90 9a       	sbi	0x12, 0	; 18
	cbi(PORTD, PD1);
     48e:	91 98       	cbi	0x12, 1	; 18
}
     490:	08 95       	ret

00000492 <LeftMS>:
void LeftMS(void)
{
	sbi(PORTD, PD5);
     492:	95 9a       	sbi	0x12, 5	; 18
	sbi(PORTD, PD6);
     494:	96 9a       	sbi	0x12, 6	; 18
	sbi(PORTD, PD7);
     496:	97 9a       	sbi	0x12, 7	; 18
}
     498:	08 95       	ret

0000049a <RightMS>:

void RightMS(void)
{
	sbi(PORTD, PD4);
     49a:	94 9a       	sbi	0x12, 4	; 18
	sbi(PORTD, PD0);
     49c:	90 9a       	sbi	0x12, 0	; 18
	sbi(PORTD, PD1);
     49e:	91 9a       	sbi	0x12, 1	; 18
}
     4a0:	08 95       	ret

000004a2 <delay>:

void delay(float n)
{
     4a2:	cf 92       	push	r12
     4a4:	df 92       	push	r13
     4a6:	ef 92       	push	r14
     4a8:	ff 92       	push	r15
     4aa:	0f 93       	push	r16
     4ac:	1f 93       	push	r17
     4ae:	cf 93       	push	r28
     4b0:	df 93       	push	r29
	n *= 10;
     4b2:	20 e0       	ldi	r18, 0x00	; 0
     4b4:	30 e0       	ldi	r19, 0x00	; 0
     4b6:	40 e2       	ldi	r20, 0x20	; 32
     4b8:	51 e4       	ldi	r21, 0x41	; 65
     4ba:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <__mulsf3>
     4be:	7b 01       	movw	r14, r22
     4c0:	8c 01       	movw	r16, r24
     4c2:	c0 e0       	ldi	r28, 0x00	; 0
     4c4:	d0 e0       	ldi	r29, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     4c6:	68 ea       	ldi	r22, 0xA8	; 168
     4c8:	c6 2e       	mov	r12, r22
     4ca:	61 e6       	ldi	r22, 0x61	; 97
     4cc:	d6 2e       	mov	r13, r22
     4ce:	04 c0       	rjmp	.+8      	; 0x4d8 <delay+0x36>
     4d0:	c6 01       	movw	r24, r12
     4d2:	01 97       	sbiw	r24, 0x01	; 1
     4d4:	f1 f7       	brne	.-4      	; 0x4d2 <delay+0x30>
	for(int i = 0; i < n; i++)
     4d6:	21 96       	adiw	r28, 0x01	; 1
     4d8:	be 01       	movw	r22, r28
     4da:	88 27       	eor	r24, r24
     4dc:	77 fd       	sbrc	r23, 7
     4de:	80 95       	com	r24
     4e0:	98 2f       	mov	r25, r24
     4e2:	0e 94 67 10 	call	0x20ce	; 0x20ce <__floatsisf>
     4e6:	a8 01       	movw	r20, r16
     4e8:	97 01       	movw	r18, r14
     4ea:	0e 94 37 10 	call	0x206e	; 0x206e <__ltsf2>
     4ee:	87 fd       	sbrc	r24, 7
     4f0:	ef cf       	rjmp	.-34     	; 0x4d0 <delay+0x2e>
		_delay_ms(F_CPU/10000);
}
     4f2:	df 91       	pop	r29
     4f4:	cf 91       	pop	r28
     4f6:	1f 91       	pop	r17
     4f8:	0f 91       	pop	r16
     4fa:	ff 90       	pop	r15
     4fc:	ef 90       	pop	r14
     4fe:	df 90       	pop	r13
     500:	cf 90       	pop	r12
     502:	08 95       	ret

00000504 <BacklightOn>:

void BacklightOn(void)
{
	sbi(PORTC, PC7);
     504:	af 9a       	sbi	0x15, 7	; 21
}
     506:	08 95       	ret

00000508 <BacklightOff>:

void BacklightOff(void)
{
	cbi(PORTC, PC7);
     508:	af 98       	cbi	0x15, 7	; 21
     50a:	08 95       	ret

0000050c <assign>:
#include "nawaz/LotL.h"

void assign(void)
{
if(PINA==(PINA=(1<<PA7)))
     50c:	80 e8       	ldi	r24, 0x80	; 128
     50e:	89 bb       	out	0x19, r24	; 25
     510:	89 b3       	in	r24, 0x19	; 25
     512:	80 38       	cpi	r24, 0x80	; 128
     514:	31 f4       	brne	.+12     	; 0x522 <assign+0x16>
{
s1=1;
     516:	81 e0       	ldi	r24, 0x01	; 1
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	90 93 57 02 	sts	0x0257, r25
     51e:	80 93 56 02 	sts	0x0256, r24
}

if(PINA==(PINA=(1<<PA6)))
     522:	80 e4       	ldi	r24, 0x40	; 64
     524:	89 bb       	out	0x19, r24	; 25
     526:	89 b3       	in	r24, 0x19	; 25
     528:	80 34       	cpi	r24, 0x40	; 64
     52a:	31 f4       	brne	.+12     	; 0x538 <assign+0x2c>
{
s2=1;
     52c:	81 e0       	ldi	r24, 0x01	; 1
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	90 93 65 02 	sts	0x0265, r25
     534:	80 93 64 02 	sts	0x0264, r24
}
if(PINA==(PINA=(1<<PA5)))
     538:	80 e2       	ldi	r24, 0x20	; 32
     53a:	89 bb       	out	0x19, r24	; 25
     53c:	89 b3       	in	r24, 0x19	; 25
     53e:	80 32       	cpi	r24, 0x20	; 32
     540:	31 f4       	brne	.+12     	; 0x54e <assign+0x42>
{
s3=1;
     542:	81 e0       	ldi	r24, 0x01	; 1
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	90 93 6d 02 	sts	0x026D, r25
     54a:	80 93 6c 02 	sts	0x026C, r24
}
if(PINA==(PINA=(1<<PA4)))
     54e:	80 e1       	ldi	r24, 0x10	; 16
     550:	89 bb       	out	0x19, r24	; 25
     552:	89 b3       	in	r24, 0x19	; 25
     554:	80 31       	cpi	r24, 0x10	; 16
     556:	31 f4       	brne	.+12     	; 0x564 <assign+0x58>
{
s4=1;
     558:	81 e0       	ldi	r24, 0x01	; 1
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	90 93 59 02 	sts	0x0259, r25
     560:	80 93 58 02 	sts	0x0258, r24
}
if(PINA==(PINA=(1<<PA3)))
     564:	88 e0       	ldi	r24, 0x08	; 8
     566:	89 bb       	out	0x19, r24	; 25
     568:	89 b3       	in	r24, 0x19	; 25
     56a:	88 30       	cpi	r24, 0x08	; 8
     56c:	31 f4       	brne	.+12     	; 0x57a <assign+0x6e>
{
s5=1;
     56e:	81 e0       	ldi	r24, 0x01	; 1
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	90 93 63 02 	sts	0x0263, r25
     576:	80 93 62 02 	sts	0x0262, r24
}
if(PINA==(PINA=(1<<PA2)))
     57a:	84 e0       	ldi	r24, 0x04	; 4
     57c:	89 bb       	out	0x19, r24	; 25
     57e:	89 b3       	in	r24, 0x19	; 25
     580:	84 30       	cpi	r24, 0x04	; 4
     582:	31 f4       	brne	.+12     	; 0x590 <assign+0x84>
{
s6=1;
     584:	81 e0       	ldi	r24, 0x01	; 1
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	90 93 55 02 	sts	0x0255, r25
     58c:	80 93 54 02 	sts	0x0254, r24
}
if(PINA==(PINA=(1<<PA1)))
     590:	82 e0       	ldi	r24, 0x02	; 2
     592:	89 bb       	out	0x19, r24	; 25
     594:	89 b3       	in	r24, 0x19	; 25
     596:	82 30       	cpi	r24, 0x02	; 2
     598:	31 f4       	brne	.+12     	; 0x5a6 <assign+0x9a>
{
s7=1;
     59a:	81 e0       	ldi	r24, 0x01	; 1
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	90 93 6f 02 	sts	0x026F, r25
     5a2:	80 93 6e 02 	sts	0x026E, r24
}
if(PINA==(PINA=(1<<PA0)))
     5a6:	81 e0       	ldi	r24, 0x01	; 1
     5a8:	89 bb       	out	0x19, r24	; 25
     5aa:	89 b3       	in	r24, 0x19	; 25
     5ac:	81 30       	cpi	r24, 0x01	; 1
     5ae:	31 f4       	brne	.+12     	; 0x5bc <assign+0xb0>
{
s8=1;
     5b0:	81 e0       	ldi	r24, 0x01	; 1
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	90 93 5b 02 	sts	0x025B, r25
     5b8:	80 93 5a 02 	sts	0x025A, r24
     5bc:	08 95       	ret

000005be <DispAdjustmentMenu>:
}

void DispAdjustmentMenu(void)
{		
	
	LCDGotoXY(0, 1);
     5be:	80 e0       	ldi	r24, 0x00	; 0
     5c0:	61 e0       	ldi	r22, 0x01	; 1
     5c2:	0e 94 32 01 	call	0x264	; 0x264 <LCDGotoXY>
	LCDWriteInt(s1, 1);	
     5c6:	80 91 56 02 	lds	r24, 0x0256
     5ca:	90 91 57 02 	lds	r25, 0x0257
     5ce:	61 e0       	ldi	r22, 0x01	; 1
     5d0:	70 e0       	ldi	r23, 0x00	; 0
     5d2:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteInt>
	
	LCDGotoXY(2, 1);
     5d6:	82 e0       	ldi	r24, 0x02	; 2
     5d8:	61 e0       	ldi	r22, 0x01	; 1
     5da:	0e 94 32 01 	call	0x264	; 0x264 <LCDGotoXY>
	LCDWriteInt(s2, 1);
     5de:	80 91 64 02 	lds	r24, 0x0264
     5e2:	90 91 65 02 	lds	r25, 0x0265
     5e6:	61 e0       	ldi	r22, 0x01	; 1
     5e8:	70 e0       	ldi	r23, 0x00	; 0
     5ea:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteInt>
	
	LCDGotoXY(4, 1);
     5ee:	84 e0       	ldi	r24, 0x04	; 4
     5f0:	61 e0       	ldi	r22, 0x01	; 1
     5f2:	0e 94 32 01 	call	0x264	; 0x264 <LCDGotoXY>
	LCDWriteInt(s3, 1);
     5f6:	80 91 6c 02 	lds	r24, 0x026C
     5fa:	90 91 6d 02 	lds	r25, 0x026D
     5fe:	61 e0       	ldi	r22, 0x01	; 1
     600:	70 e0       	ldi	r23, 0x00	; 0
     602:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteInt>

	LCDGotoXY(6, 1);
     606:	86 e0       	ldi	r24, 0x06	; 6
     608:	61 e0       	ldi	r22, 0x01	; 1
     60a:	0e 94 32 01 	call	0x264	; 0x264 <LCDGotoXY>
	LCDWriteInt(s4, 1);
     60e:	80 91 58 02 	lds	r24, 0x0258
     612:	90 91 59 02 	lds	r25, 0x0259
     616:	61 e0       	ldi	r22, 0x01	; 1
     618:	70 e0       	ldi	r23, 0x00	; 0
     61a:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteInt>
	
	LCDGotoXY(9,1);
     61e:	89 e0       	ldi	r24, 0x09	; 9
     620:	61 e0       	ldi	r22, 0x01	; 1
     622:	0e 94 32 01 	call	0x264	; 0x264 <LCDGotoXY>
	LCDWriteInt(s5, 1);
     626:	80 91 62 02 	lds	r24, 0x0262
     62a:	90 91 63 02 	lds	r25, 0x0263
     62e:	61 e0       	ldi	r22, 0x01	; 1
     630:	70 e0       	ldi	r23, 0x00	; 0
     632:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteInt>

	LCDGotoXY(11, 1);
     636:	8b e0       	ldi	r24, 0x0B	; 11
     638:	61 e0       	ldi	r22, 0x01	; 1
     63a:	0e 94 32 01 	call	0x264	; 0x264 <LCDGotoXY>
	LCDWriteInt(s6, 1);	
     63e:	80 91 54 02 	lds	r24, 0x0254
     642:	90 91 55 02 	lds	r25, 0x0255
     646:	61 e0       	ldi	r22, 0x01	; 1
     648:	70 e0       	ldi	r23, 0x00	; 0
     64a:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteInt>

	LCDGotoXY(13, 1);
     64e:	8d e0       	ldi	r24, 0x0D	; 13
     650:	61 e0       	ldi	r22, 0x01	; 1
     652:	0e 94 32 01 	call	0x264	; 0x264 <LCDGotoXY>
	LCDWriteInt(s7, 1);	
     656:	80 91 6e 02 	lds	r24, 0x026E
     65a:	90 91 6f 02 	lds	r25, 0x026F
     65e:	61 e0       	ldi	r22, 0x01	; 1
     660:	70 e0       	ldi	r23, 0x00	; 0
     662:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteInt>
	
	LCDGotoXY(15, 1);
     666:	8f e0       	ldi	r24, 0x0F	; 15
     668:	61 e0       	ldi	r22, 0x01	; 1
     66a:	0e 94 32 01 	call	0x264	; 0x264 <LCDGotoXY>
	LCDWriteInt(s8, 1);			
     66e:	80 91 5a 02 	lds	r24, 0x025A
     672:	90 91 5b 02 	lds	r25, 0x025B
     676:	61 e0       	ldi	r22, 0x01	; 1
     678:	70 e0       	ldi	r23, 0x00	; 0
     67a:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteInt>
	
		
}
     67e:	08 95       	ret

00000680 <DispMenu>:
		
}

void DispMenu(int m)
{
	switch(m)
     680:	8d 32       	cpi	r24, 0x2D	; 45
     682:	91 05       	cpc	r25, r1
     684:	09 f4       	brne	.+2      	; 0x688 <DispMenu+0x8>
     686:	2a c1       	rjmp	.+596    	; 0x8dc <DispMenu+0x25c>
     688:	8e 32       	cpi	r24, 0x2E	; 46
     68a:	91 05       	cpc	r25, r1
     68c:	f4 f4       	brge	.+60     	; 0x6ca <DispMenu+0x4a>
     68e:	89 31       	cpi	r24, 0x19	; 25
     690:	91 05       	cpc	r25, r1
     692:	09 f4       	brne	.+2      	; 0x696 <DispMenu+0x16>
     694:	ef c0       	rjmp	.+478    	; 0x874 <DispMenu+0x1f4>
     696:	8a 31       	cpi	r24, 0x1A	; 26
     698:	91 05       	cpc	r25, r1
     69a:	5c f4       	brge	.+22     	; 0x6b2 <DispMenu+0x32>
     69c:	8a 30       	cpi	r24, 0x0A	; 10
     69e:	91 05       	cpc	r25, r1
     6a0:	09 f4       	brne	.+2      	; 0x6a4 <DispMenu+0x24>
     6a2:	46 c0       	rjmp	.+140    	; 0x730 <DispMenu+0xb0>
     6a4:	84 31       	cpi	r24, 0x14	; 20
     6a6:	91 05       	cpc	r25, r1
     6a8:	09 f4       	brne	.+2      	; 0x6ac <DispMenu+0x2c>
     6aa:	5d c0       	rjmp	.+186    	; 0x766 <DispMenu+0xe6>
     6ac:	89 2b       	or	r24, r25
     6ae:	69 f1       	breq	.+90     	; 0x70a <DispMenu+0x8a>
     6b0:	08 95       	ret
     6b2:	83 32       	cpi	r24, 0x23	; 35
     6b4:	91 05       	cpc	r25, r1
     6b6:	09 f4       	brne	.+2      	; 0x6ba <DispMenu+0x3a>
     6b8:	f6 c0       	rjmp	.+492    	; 0x8a6 <DispMenu+0x226>
     6ba:	88 32       	cpi	r24, 0x28	; 40
     6bc:	91 05       	cpc	r25, r1
     6be:	09 f4       	brne	.+2      	; 0x6c2 <DispMenu+0x42>
     6c0:	78 c0       	rjmp	.+240    	; 0x7b2 <DispMenu+0x132>
     6c2:	4e 97       	sbiw	r24, 0x1e	; 30
     6c4:	09 f0       	breq	.+2      	; 0x6c8 <DispMenu+0x48>
     6c6:	67 c1       	rjmp	.+718    	; 0x996 <DispMenu+0x316>
     6c8:	61 c0       	rjmp	.+194    	; 0x78c <DispMenu+0x10c>
     6ca:	81 34       	cpi	r24, 0x41	; 65
     6cc:	91 05       	cpc	r25, r1
     6ce:	09 f4       	brne	.+2      	; 0x6d2 <DispMenu+0x52>
     6d0:	37 c1       	rjmp	.+622    	; 0x940 <DispMenu+0x2c0>
     6d2:	82 34       	cpi	r24, 0x42	; 66
     6d4:	91 05       	cpc	r25, r1
     6d6:	64 f4       	brge	.+24     	; 0x6f0 <DispMenu+0x70>
     6d8:	87 33       	cpi	r24, 0x37	; 55
     6da:	91 05       	cpc	r25, r1
     6dc:	09 f4       	brne	.+2      	; 0x6e0 <DispMenu+0x60>
     6de:	17 c1       	rjmp	.+558    	; 0x90e <DispMenu+0x28e>
     6e0:	8c 33       	cpi	r24, 0x3C	; 60
     6e2:	91 05       	cpc	r25, r1
     6e4:	09 f4       	brne	.+2      	; 0x6e8 <DispMenu+0x68>
     6e6:	8b c0       	rjmp	.+278    	; 0x7fe <DispMenu+0x17e>
     6e8:	c2 97       	sbiw	r24, 0x32	; 50
     6ea:	09 f0       	breq	.+2      	; 0x6ee <DispMenu+0x6e>
     6ec:	54 c1       	rjmp	.+680    	; 0x996 <DispMenu+0x316>
     6ee:	74 c0       	rjmp	.+232    	; 0x7d8 <DispMenu+0x158>
     6f0:	8b 34       	cpi	r24, 0x4B	; 75
     6f2:	91 05       	cpc	r25, r1
     6f4:	09 f4       	brne	.+2      	; 0x6f8 <DispMenu+0x78>
     6f6:	41 c1       	rjmp	.+642    	; 0x97a <DispMenu+0x2fa>
     6f8:	80 35       	cpi	r24, 0x50	; 80
     6fa:	91 05       	cpc	r25, r1
     6fc:	09 f4       	brne	.+2      	; 0x700 <DispMenu+0x80>
     6fe:	a5 c0       	rjmp	.+330    	; 0x84a <DispMenu+0x1ca>
     700:	86 34       	cpi	r24, 0x46	; 70
     702:	91 05       	cpc	r25, r1
     704:	09 f0       	breq	.+2      	; 0x708 <DispMenu+0x88>
     706:	47 c1       	rjmp	.+654    	; 0x996 <DispMenu+0x316>
     708:	8d c0       	rjmp	.+282    	; 0x824 <DispMenu+0x1a4>
	{
		case 0:
			
			LCDClear();
     70a:	81 e0       	ldi	r24, 0x01	; 1
     70c:	60 e0       	ldi	r22, 0x00	; 0
     70e:	0e 94 73 00 	call	0xe6	; 0xe6 <LCDByte>
			LCDGotoXY(0, 0);
     712:	80 e0       	ldi	r24, 0x00	; 0
     714:	60 e0       	ldi	r22, 0x00	; 0
     716:	0e 94 32 01 	call	0x264	; 0x264 <LCDGotoXY>
			LCDWriteString("Lord ofthe Lines");
     71a:	80 e6       	ldi	r24, 0x60	; 96
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	0e 94 c6 00 	call	0x18c	; 0x18c <LCDWriteString>
			
			LCDGotoXY(0 ,1);
     722:	80 e0       	ldi	r24, 0x00	; 0
     724:	61 e0       	ldi	r22, 0x01	; 1
     726:	0e 94 32 01 	call	0x264	; 0x264 <LCDGotoXY>
			LCDWriteString("Start");	
     72a:	81 e7       	ldi	r24, 0x71	; 113
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	12 c0       	rjmp	.+36     	; 0x754 <DispMenu+0xd4>
			LCDGotoXY(8 ,1);
			LCDWriteString("Settings");
			break;
			
		case 10:
			LCDClear();
     730:	81 e0       	ldi	r24, 0x01	; 1
     732:	60 e0       	ldi	r22, 0x00	; 0
     734:	0e 94 73 00 	call	0xe6	; 0xe6 <LCDByte>
			LCDGotoXY(0, 0);
     738:	80 e0       	ldi	r24, 0x00	; 0
     73a:	60 e0       	ldi	r22, 0x00	; 0
     73c:	0e 94 32 01 	call	0x264	; 0x264 <LCDGotoXY>
			LCDWriteString("Lord ofthe Lines");
     740:	80 e6       	ldi	r24, 0x60	; 96
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	0e 94 c6 00 	call	0x18c	; 0x18c <LCDWriteString>
			
			LCDGotoXY(0 ,1);
     748:	80 e0       	ldi	r24, 0x00	; 0
     74a:	61 e0       	ldi	r22, 0x01	; 1
     74c:	0e 94 32 01 	call	0x264	; 0x264 <LCDGotoXY>
			LCDWriteString("Pause");	
     750:	80 e8       	ldi	r24, 0x80	; 128
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	0e 94 c6 00 	call	0x18c	; 0x18c <LCDWriteString>
			LCDGotoXY(8 ,1);
     758:	88 e0       	ldi	r24, 0x08	; 8
     75a:	61 e0       	ldi	r22, 0x01	; 1
     75c:	0e 94 32 01 	call	0x264	; 0x264 <LCDGotoXY>
			LCDWriteString("Settings");
     760:	87 e7       	ldi	r24, 0x77	; 119
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	84 c0       	rjmp	.+264    	; 0x86e <DispMenu+0x1ee>
			break;
		
		case 20:
			LCDClear();
     766:	81 e0       	ldi	r24, 0x01	; 1
     768:	60 e0       	ldi	r22, 0x00	; 0
     76a:	0e 94 73 00 	call	0xe6	; 0xe6 <LCDByte>
			LCDGotoXY(0, 0);
     76e:	80 e0       	ldi	r24, 0x00	; 0
     770:	60 e0       	ldi	r22, 0x00	; 0
     772:	0e 94 32 01 	call	0x264	; 0x264 <LCDGotoXY>
			LCDWriteString("Settings");
     776:	87 e7       	ldi	r24, 0x77	; 119
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	0e 94 c6 00 	call	0x18c	; 0x18c <LCDWriteString>
			
			LCDGotoXY(0, 1);
     77e:	80 e0       	ldi	r24, 0x00	; 0
     780:	61 e0       	ldi	r22, 0x01	; 1
     782:	0e 94 32 01 	call	0x264	; 0x264 <LCDGotoXY>
			LCDWriteString("1. Max Speed");
     786:	86 e8       	ldi	r24, 0x86	; 134
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	71 c0       	rjmp	.+226    	; 0x86e <DispMenu+0x1ee>
			break;		
			
		case 30:
			LCDClear();
     78c:	81 e0       	ldi	r24, 0x01	; 1
     78e:	60 e0       	ldi	r22, 0x00	; 0
     790:	0e 94 73 00 	call	0xe6	; 0xe6 <LCDByte>
			LCDGotoXY(0, 0);
     794:	80 e0       	ldi	r24, 0x00	; 0
     796:	60 e0       	ldi	r22, 0x00	; 0
     798:	0e 94 32 01 	call	0x264	; 0x264 <LCDGotoXY>
			LCDWriteString("Settings");
     79c:	87 e7       	ldi	r24, 0x77	; 119
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	0e 94 c6 00 	call	0x18c	; 0x18c <LCDWriteString>
			
			LCDGotoXY(0, 1);
     7a4:	80 e0       	ldi	r24, 0x00	; 0
     7a6:	61 e0       	ldi	r22, 0x01	; 1
     7a8:	0e 94 32 01 	call	0x264	; 0x264 <LCDGotoXY>
			LCDWriteString("2. Base Speed");
     7ac:	83 e9       	ldi	r24, 0x93	; 147
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	5e c0       	rjmp	.+188    	; 0x86e <DispMenu+0x1ee>
			break;
			
		case 40:
			LCDClear();
     7b2:	81 e0       	ldi	r24, 0x01	; 1
     7b4:	60 e0       	ldi	r22, 0x00	; 0
     7b6:	0e 94 73 00 	call	0xe6	; 0xe6 <LCDByte>
			LCDGotoXY(0, 0);
     7ba:	80 e0       	ldi	r24, 0x00	; 0
     7bc:	60 e0       	ldi	r22, 0x00	; 0
     7be:	0e 94 32 01 	call	0x264	; 0x264 <LCDGotoXY>
			LCDWriteString("Settings");
     7c2:	87 e7       	ldi	r24, 0x77	; 119
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	0e 94 c6 00 	call	0x18c	; 0x18c <LCDWriteString>
			
			LCDGotoXY(0, 1);
     7ca:	80 e0       	ldi	r24, 0x00	; 0
     7cc:	61 e0       	ldi	r22, 0x01	; 1
     7ce:	0e 94 32 01 	call	0x264	; 0x264 <LCDGotoXY>
			LCDWriteString("3. Propotional");
     7d2:	81 ea       	ldi	r24, 0xA1	; 161
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	4b c0       	rjmp	.+150    	; 0x86e <DispMenu+0x1ee>
			break;
		
		case 50:
			LCDClear();
     7d8:	81 e0       	ldi	r24, 0x01	; 1
     7da:	60 e0       	ldi	r22, 0x00	; 0
     7dc:	0e 94 73 00 	call	0xe6	; 0xe6 <LCDByte>
			LCDGotoXY(0, 0);
     7e0:	80 e0       	ldi	r24, 0x00	; 0
     7e2:	60 e0       	ldi	r22, 0x00	; 0
     7e4:	0e 94 32 01 	call	0x264	; 0x264 <LCDGotoXY>
			LCDWriteString("Settings");
     7e8:	87 e7       	ldi	r24, 0x77	; 119
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	0e 94 c6 00 	call	0x18c	; 0x18c <LCDWriteString>
			
			LCDGotoXY(0, 1);
     7f0:	80 e0       	ldi	r24, 0x00	; 0
     7f2:	61 e0       	ldi	r22, 0x01	; 1
     7f4:	0e 94 32 01 	call	0x264	; 0x264 <LCDGotoXY>
			LCDWriteString("4. Integral");
     7f8:	80 eb       	ldi	r24, 0xB0	; 176
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	38 c0       	rjmp	.+112    	; 0x86e <DispMenu+0x1ee>
			break;
			
		case 60:
			LCDClear();
     7fe:	81 e0       	ldi	r24, 0x01	; 1
     800:	60 e0       	ldi	r22, 0x00	; 0
     802:	0e 94 73 00 	call	0xe6	; 0xe6 <LCDByte>
			LCDGotoXY(0, 0);
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	60 e0       	ldi	r22, 0x00	; 0
     80a:	0e 94 32 01 	call	0x264	; 0x264 <LCDGotoXY>
			LCDWriteString("Settings");
     80e:	87 e7       	ldi	r24, 0x77	; 119
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	0e 94 c6 00 	call	0x18c	; 0x18c <LCDWriteString>
			
			LCDGotoXY(0, 1);
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	61 e0       	ldi	r22, 0x01	; 1
     81a:	0e 94 32 01 	call	0x264	; 0x264 <LCDGotoXY>
			LCDWriteString("5. Derivative");
     81e:	8c eb       	ldi	r24, 0xBC	; 188
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	25 c0       	rjmp	.+74     	; 0x86e <DispMenu+0x1ee>
			break;
		
		case 70:
			LCDClear();
     824:	81 e0       	ldi	r24, 0x01	; 1
     826:	60 e0       	ldi	r22, 0x00	; 0
     828:	0e 94 73 00 	call	0xe6	; 0xe6 <LCDByte>
			LCDGotoXY(0, 0);
     82c:	80 e0       	ldi	r24, 0x00	; 0
     82e:	60 e0       	ldi	r22, 0x00	; 0
     830:	0e 94 32 01 	call	0x264	; 0x264 <LCDGotoXY>
			LCDWriteString("Settings");
     834:	87 e7       	ldi	r24, 0x77	; 119
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	0e 94 c6 00 	call	0x18c	; 0x18c <LCDWriteString>
			
			LCDGotoXY(0, 1);
     83c:	80 e0       	ldi	r24, 0x00	; 0
     83e:	61 e0       	ldi	r22, 0x01	; 1
     840:	0e 94 32 01 	call	0x264	; 0x264 <LCDGotoXY>
			LCDWriteString("7. Adjust Sensor");
     844:	8a ec       	ldi	r24, 0xCA	; 202
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	12 c0       	rjmp	.+36     	; 0x86e <DispMenu+0x1ee>
			break;
		
		case 80:
			LCDClear();
     84a:	81 e0       	ldi	r24, 0x01	; 1
     84c:	60 e0       	ldi	r22, 0x00	; 0
     84e:	0e 94 73 00 	call	0xe6	; 0xe6 <LCDByte>
			LCDGotoXY(0, 0);
     852:	80 e0       	ldi	r24, 0x00	; 0
     854:	60 e0       	ldi	r22, 0x00	; 0
     856:	0e 94 32 01 	call	0x264	; 0x264 <LCDGotoXY>
			LCDWriteString("Settings");
     85a:	87 e7       	ldi	r24, 0x77	; 119
     85c:	90 e0       	ldi	r25, 0x00	; 0
     85e:	0e 94 c6 00 	call	0x18c	; 0x18c <LCDWriteString>
			
			LCDGotoXY(0, 1);
     862:	80 e0       	ldi	r24, 0x00	; 0
     864:	61 e0       	ldi	r22, 0x01	; 1
     866:	0e 94 32 01 	call	0x264	; 0x264 <LCDGotoXY>
			LCDWriteString("6. Done");
     86a:	8b ed       	ldi	r24, 0xDB	; 219
     86c:	90 e0       	ldi	r25, 0x00	; 0
     86e:	0e 94 c6 00 	call	0x18c	; 0x18c <LCDWriteString>
     872:	08 95       	ret
			break;
		
		case 25:
			LCDClear();
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	60 e0       	ldi	r22, 0x00	; 0
     878:	0e 94 73 00 	call	0xe6	; 0xe6 <LCDByte>
			LCDGotoXY(0, 0);
     87c:	80 e0       	ldi	r24, 0x00	; 0
     87e:	60 e0       	ldi	r22, 0x00	; 0
     880:	0e 94 32 01 	call	0x264	; 0x264 <LCDGotoXY>
			LCDWriteString("Settings");
     884:	87 e7       	ldi	r24, 0x77	; 119
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	0e 94 c6 00 	call	0x18c	; 0x18c <LCDWriteString>
			
			LCDGotoXY(0, 1);
     88c:	80 e0       	ldi	r24, 0x00	; 0
     88e:	61 e0       	ldi	r22, 0x01	; 1
     890:	0e 94 32 01 	call	0x264	; 0x264 <LCDGotoXY>
			LCDWriteString("Max Speed: ");
     894:	83 ee       	ldi	r24, 0xE3	; 227
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	0e 94 c6 00 	call	0x18c	; 0x18c <LCDWriteString>
			LCDWriteInt(maxspeed, 3);
     89c:	80 91 34 01 	lds	r24, 0x0134
     8a0:	90 91 35 01 	lds	r25, 0x0135
     8a4:	18 c0       	rjmp	.+48     	; 0x8d6 <DispMenu+0x256>
			break;		
			
		case 35:
			LCDClear();
     8a6:	81 e0       	ldi	r24, 0x01	; 1
     8a8:	60 e0       	ldi	r22, 0x00	; 0
     8aa:	0e 94 73 00 	call	0xe6	; 0xe6 <LCDByte>
			LCDGotoXY(0, 0);
     8ae:	80 e0       	ldi	r24, 0x00	; 0
     8b0:	60 e0       	ldi	r22, 0x00	; 0
     8b2:	0e 94 32 01 	call	0x264	; 0x264 <LCDGotoXY>
			LCDWriteString("Settings");
     8b6:	87 e7       	ldi	r24, 0x77	; 119
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	0e 94 c6 00 	call	0x18c	; 0x18c <LCDWriteString>
			
			LCDGotoXY(0, 1);
     8be:	80 e0       	ldi	r24, 0x00	; 0
     8c0:	61 e0       	ldi	r22, 0x01	; 1
     8c2:	0e 94 32 01 	call	0x264	; 0x264 <LCDGotoXY>
			LCDWriteString("Base Speed: ");
     8c6:	8f ee       	ldi	r24, 0xEF	; 239
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	0e 94 c6 00 	call	0x18c	; 0x18c <LCDWriteString>
			LCDWriteInt(basespeed, 3);
     8ce:	80 91 36 01 	lds	r24, 0x0136
     8d2:	90 91 37 01 	lds	r25, 0x0137
     8d6:	63 e0       	ldi	r22, 0x03	; 3
     8d8:	70 e0       	ldi	r23, 0x00	; 0
     8da:	4c c0       	rjmp	.+152    	; 0x974 <DispMenu+0x2f4>
			break;
			
		case 45:
			LCDClear();
     8dc:	81 e0       	ldi	r24, 0x01	; 1
     8de:	60 e0       	ldi	r22, 0x00	; 0
     8e0:	0e 94 73 00 	call	0xe6	; 0xe6 <LCDByte>
			LCDGotoXY(0, 0);
     8e4:	80 e0       	ldi	r24, 0x00	; 0
     8e6:	60 e0       	ldi	r22, 0x00	; 0
     8e8:	0e 94 32 01 	call	0x264	; 0x264 <LCDGotoXY>
			LCDWriteString("Settings");
     8ec:	87 e7       	ldi	r24, 0x77	; 119
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	0e 94 c6 00 	call	0x18c	; 0x18c <LCDWriteString>
			
			LCDGotoXY(0, 1);
     8f4:	80 e0       	ldi	r24, 0x00	; 0
     8f6:	61 e0       	ldi	r22, 0x01	; 1
     8f8:	0e 94 32 01 	call	0x264	; 0x264 <LCDGotoXY>
			LCDWriteString("Propotional: ");
     8fc:	8c ef       	ldi	r24, 0xFC	; 252
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	0e 94 c6 00 	call	0x18c	; 0x18c <LCDWriteString>
			LCDWriteInt(Kp, 2);
     904:	80 91 38 01 	lds	r24, 0x0138
     908:	90 91 39 01 	lds	r25, 0x0139
     90c:	31 c0       	rjmp	.+98     	; 0x970 <DispMenu+0x2f0>
			break;
		
		case 55:
			LCDClear();
     90e:	81 e0       	ldi	r24, 0x01	; 1
     910:	60 e0       	ldi	r22, 0x00	; 0
     912:	0e 94 73 00 	call	0xe6	; 0xe6 <LCDByte>
			LCDGotoXY(0, 0);
     916:	80 e0       	ldi	r24, 0x00	; 0
     918:	60 e0       	ldi	r22, 0x00	; 0
     91a:	0e 94 32 01 	call	0x264	; 0x264 <LCDGotoXY>
			LCDWriteString("Settings");
     91e:	87 e7       	ldi	r24, 0x77	; 119
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	0e 94 c6 00 	call	0x18c	; 0x18c <LCDWriteString>
			
			LCDGotoXY(0, 1);
     926:	80 e0       	ldi	r24, 0x00	; 0
     928:	61 e0       	ldi	r22, 0x01	; 1
     92a:	0e 94 32 01 	call	0x264	; 0x264 <LCDGotoXY>
			LCDWriteString("Integral: ");
     92e:	8a e0       	ldi	r24, 0x0A	; 10
     930:	91 e0       	ldi	r25, 0x01	; 1
     932:	0e 94 c6 00 	call	0x18c	; 0x18c <LCDWriteString>
			LCDWriteInt(Ki, 2);
     936:	80 91 3a 01 	lds	r24, 0x013A
     93a:	90 91 3b 01 	lds	r25, 0x013B
     93e:	18 c0       	rjmp	.+48     	; 0x970 <DispMenu+0x2f0>
			break;
			
		case 65:
			LCDClear();
     940:	81 e0       	ldi	r24, 0x01	; 1
     942:	60 e0       	ldi	r22, 0x00	; 0
     944:	0e 94 73 00 	call	0xe6	; 0xe6 <LCDByte>
			LCDGotoXY(0, 0);
     948:	80 e0       	ldi	r24, 0x00	; 0
     94a:	60 e0       	ldi	r22, 0x00	; 0
     94c:	0e 94 32 01 	call	0x264	; 0x264 <LCDGotoXY>
			LCDWriteString("Settings");
     950:	87 e7       	ldi	r24, 0x77	; 119
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	0e 94 c6 00 	call	0x18c	; 0x18c <LCDWriteString>
			
			LCDGotoXY(0, 1);
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	61 e0       	ldi	r22, 0x01	; 1
     95c:	0e 94 32 01 	call	0x264	; 0x264 <LCDGotoXY>
			LCDWriteString("Derivative: ");
     960:	85 e1       	ldi	r24, 0x15	; 21
     962:	91 e0       	ldi	r25, 0x01	; 1
     964:	0e 94 c6 00 	call	0x18c	; 0x18c <LCDWriteString>
			LCDWriteInt(Kd, 2);
     968:	80 91 3c 01 	lds	r24, 0x013C
     96c:	90 91 3d 01 	lds	r25, 0x013D
     970:	62 e0       	ldi	r22, 0x02	; 2
     972:	70 e0       	ldi	r23, 0x00	; 0
     974:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDWriteInt>
     978:	08 95       	ret
			break;
		case 75:
			LCDClear();
     97a:	81 e0       	ldi	r24, 0x01	; 1
     97c:	60 e0       	ldi	r22, 0x00	; 0
     97e:	0e 94 73 00 	call	0xe6	; 0xe6 <LCDByte>
			LCDGotoXY(0, 0);
     982:	80 e0       	ldi	r24, 0x00	; 0
     984:	60 e0       	ldi	r22, 0x00	; 0
     986:	0e 94 32 01 	call	0x264	; 0x264 <LCDGotoXY>
			LCDWriteString("Sensors");			
     98a:	82 e2       	ldi	r24, 0x22	; 34
     98c:	91 e0       	ldi	r25, 0x01	; 1
     98e:	0e 94 c6 00 	call	0x18c	; 0x18c <LCDWriteString>
			DispAdjustmentMenu();
     992:	0e 94 df 02 	call	0x5be	; 0x5be <DispAdjustmentMenu>
     996:	08 95       	ret

00000998 <main>:
	}
	DispMenu(menu);
}

int main(void)
{	
     998:	2f 92       	push	r2
     99a:	3f 92       	push	r3
     99c:	4f 92       	push	r4
     99e:	5f 92       	push	r5
     9a0:	6f 92       	push	r6
     9a2:	7f 92       	push	r7
     9a4:	8f 92       	push	r8
     9a6:	9f 92       	push	r9
     9a8:	af 92       	push	r10
     9aa:	bf 92       	push	r11
     9ac:	cf 92       	push	r12
     9ae:	df 92       	push	r13
     9b0:	ef 92       	push	r14
     9b2:	ff 92       	push	r15
     9b4:	0f 93       	push	r16
     9b6:	1f 93       	push	r17
     9b8:	cf 93       	push	r28
     9ba:	df 93       	push	r29
	unsigned int p;
	
	//call all initializing functions
	InitPorts();
     9bc:	0e 94 3b 01 	call	0x276	; 0x276 <InitPorts>
	InitInterrupts();
     9c0:	0e 94 56 01 	call	0x2ac	; 0x2ac <InitInterrupts>
	PORTA = 0;   								//enable pull up	
}
	
void InitPWM(void)								//initialize PWM				
{	
	TCCR1A = _BV(WGM10)   					    // 8 bit fast PWM
     9c4:	81 ea       	ldi	r24, 0xA1	; 161
     9c6:	8f bd       	out	0x2f, r24	; 47
		   | _BV(COM1A1)  						// set OC1A/B on compare match
		   | _BV(COM1B1);		
	TCCR1B = _BV(CS11)  	   				   // 1/8 prescale fast PWM
     9c8:	8a e0       	ldi	r24, 0x0A	; 10
     9ca:	8e bd       	out	0x2e, r24	; 46
	InitPWM();		
	InitLCD(0);								//LS_BLINK|LS_ULINE
     9cc:	80 e0       	ldi	r24, 0x00	; 0
     9ce:	0e 94 9b 00 	call	0x136	; 0x136 <InitLCD>
	LCDClear();
     9d2:	81 e0       	ldi	r24, 0x01	; 1
     9d4:	60 e0       	ldi	r22, 0x00	; 0
     9d6:	0e 94 73 00 	call	0xe6	; 0xe6 <LCDByte>
	sei();								//enables interrupts
     9da:	78 94       	sei
		_delay_ms(F_CPU/10000);
}

void BacklightOn(void)
{
	sbi(PORTC, PC7);
     9dc:	af 9a       	sbi	0x15, 7	; 21
	
	//prints the openning screen
	BacklightOn();	
	LCDClear();
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	60 e0       	ldi	r22, 0x00	; 0
     9e2:	0e 94 73 00 	call	0xe6	; 0xe6 <LCDByte>
	LCDGotoXY(0,0);
     9e6:	80 e0       	ldi	r24, 0x00	; 0
     9e8:	60 e0       	ldi	r22, 0x00	; 0
     9ea:	0e 94 32 01 	call	0x264	; 0x264 <LCDGotoXY>
	LCDWriteString("Lord ofthe Lines");
     9ee:	80 e6       	ldi	r24, 0x60	; 96
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	0e 94 c6 00 	call	0x18c	; 0x18c <LCDWriteString>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	48 ea       	ldi	r20, 0xA8	; 168
     9fc:	51 e6       	ldi	r21, 0x61	; 97
     9fe:	05 c0       	rjmp	.+10     	; 0xa0a <main+0x72>
     a00:	ca 01       	movw	r24, r20
     a02:	01 97       	sbiw	r24, 0x01	; 1
     a04:	f1 f7       	brne	.-4      	; 0xa02 <main+0x6a>
}

void delay(float n)
{
	n *= 10;
	for(int i = 0; i < n; i++)
     a06:	2f 5f       	subi	r18, 0xFF	; 255
     a08:	3f 4f       	sbci	r19, 0xFF	; 255
     a0a:	2a 30       	cpi	r18, 0x0A	; 10
     a0c:	31 05       	cpc	r19, r1
     a0e:	c1 f7       	brne	.-16     	; 0xa00 <main+0x68>
	delay(1);
	
	LCDGotoXY(3, 1);
     a10:	83 e0       	ldi	r24, 0x03	; 3
     a12:	61 e0       	ldi	r22, 0x01	; 1
     a14:	0e 94 32 01 	call	0x264	; 0x264 <LCDGotoXY>
	LCDWriteString("$Nawaz$");		
     a18:	8a e2       	ldi	r24, 0x2A	; 42
     a1a:	91 e0       	ldi	r25, 0x01	; 1
     a1c:	0e 94 c6 00 	call	0x18c	; 0x18c <LCDWriteString>
     a20:	20 e0       	ldi	r18, 0x00	; 0
     a22:	30 e0       	ldi	r19, 0x00	; 0
     a24:	48 ea       	ldi	r20, 0xA8	; 168
     a26:	51 e6       	ldi	r21, 0x61	; 97
     a28:	05 c0       	rjmp	.+10     	; 0xa34 <main+0x9c>
     a2a:	ca 01       	movw	r24, r20
     a2c:	01 97       	sbiw	r24, 0x01	; 1
     a2e:	f1 f7       	brne	.-4      	; 0xa2c <main+0x94>
     a30:	2f 5f       	subi	r18, 0xFF	; 255
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	2a 30       	cpi	r18, 0x0A	; 10
     a36:	31 05       	cpc	r19, r1
     a38:	c1 f7       	brne	.-16     	; 0xa2a <main+0x92>
	delay(1);
	DispMenu(0);							//displays home screen
     a3a:	80 e0       	ldi	r24, 0x00	; 0
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	0e 94 40 03 	call	0x680	; 0x680 <DispMenu>
				correction = P + I + D;
				
				rightpulse =  basespeed + correction;
				leftpulse = basespeed - correction;	
PORTD=(0<<PD0) | (0<<PD1) | (0<<PD6) | (1<<PD7);
OCR1A = 255-leftpulse;
     a42:	cf ef       	ldi	r28, 0xFF	; 255
     a44:	d0 e0       	ldi	r29, 0x00	; 0
	delay(1);
	DispMenu(0);							//displays home screen
	
	while(true)
	{		
		if(pause == false)					
     a46:	80 91 32 01 	lds	r24, 0x0132
     a4a:	88 23       	and	r24, r24
     a4c:	09 f0       	breq	.+2      	; 0xa50 <main+0xb8>
     a4e:	79 c5       	rjmp	.+2802   	; 0x1542 <main+0xbaa>
		{					
				
			
			if((PINA==0b00000000))// EDIT HERE!!! :P :P insert each case here. write appropriate output for motors
     a50:	89 b3       	in	r24, 0x19	; 25
     a52:	88 23       	and	r24, r24
     a54:	09 f0       	breq	.+2      	; 0xa58 <main+0xc0>
     a56:	98 c0       	rjmp	.+304    	; 0xb88 <main+0x1f0>
{
assign();
     a58:	0e 94 86 02 	call	0x50c	; 0x50c <assign>
	CalcError();
     a5c:	0e 94 6f 01 	call	0x2de	; 0x2de <CalcError>
				P = error * Kp;
     a60:	60 90 46 02 	lds	r6, 0x0246
     a64:	70 90 47 02 	lds	r7, 0x0247
     a68:	80 90 48 02 	lds	r8, 0x0248
     a6c:	90 90 49 02 	lds	r9, 0x0249
     a70:	60 91 38 01 	lds	r22, 0x0138
     a74:	70 91 39 01 	lds	r23, 0x0139
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	0e 94 19 11 	call	0x2232	; 0x2232 <__floatunsisf>
     a80:	9b 01       	movw	r18, r22
     a82:	ac 01       	movw	r20, r24
     a84:	c4 01       	movw	r24, r8
     a86:	b3 01       	movw	r22, r6
     a88:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <__mulsf3>
     a8c:	1b 01       	movw	r2, r22
     a8e:	2c 01       	movw	r4, r24
     a90:	60 93 70 02 	sts	0x0270, r22
     a94:	70 93 71 02 	sts	0x0271, r23
     a98:	80 93 72 02 	sts	0x0272, r24
     a9c:	90 93 73 02 	sts	0x0273, r25
				
				I += error;
     aa0:	c4 01       	movw	r24, r8
     aa2:	b3 01       	movw	r22, r6
     aa4:	20 91 66 02 	lds	r18, 0x0266
     aa8:	30 91 67 02 	lds	r19, 0x0267
     aac:	40 91 68 02 	lds	r20, 0x0268
     ab0:	50 91 69 02 	lds	r21, 0x0269
     ab4:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <__addsf3>
     ab8:	7b 01       	movw	r14, r22
     aba:	8c 01       	movw	r16, r24
				I = I * Ki;
     abc:	60 91 3a 01 	lds	r22, 0x013A
     ac0:	70 91 3b 01 	lds	r23, 0x013B
     ac4:	80 e0       	ldi	r24, 0x00	; 0
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	0e 94 19 11 	call	0x2232	; 0x2232 <__floatunsisf>
     acc:	9b 01       	movw	r18, r22
     ace:	ac 01       	movw	r20, r24
     ad0:	c8 01       	movw	r24, r16
     ad2:	b7 01       	movw	r22, r14
     ad4:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <__mulsf3>
     ad8:	5b 01       	movw	r10, r22
     ada:	6c 01       	movw	r12, r24
     adc:	60 93 66 02 	sts	0x0266, r22
     ae0:	70 93 67 02 	sts	0x0267, r23
     ae4:	80 93 68 02 	sts	0x0268, r24
     ae8:	90 93 69 02 	sts	0x0269, r25
				
				D = error - perror;
     aec:	c4 01       	movw	r24, r8
     aee:	b3 01       	movw	r22, r6
     af0:	20 91 4a 02 	lds	r18, 0x024A
     af4:	30 91 4b 02 	lds	r19, 0x024B
     af8:	40 91 4c 02 	lds	r20, 0x024C
     afc:	50 91 4d 02 	lds	r21, 0x024D
     b00:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <__subsf3>
     b04:	7b 01       	movw	r14, r22
     b06:	8c 01       	movw	r16, r24
     b08:	60 93 50 02 	sts	0x0250, r22
     b0c:	70 93 51 02 	sts	0x0251, r23
     b10:	80 93 52 02 	sts	0x0252, r24
     b14:	90 93 53 02 	sts	0x0253, r25
				
				correction = P + I + D;
     b18:	c2 01       	movw	r24, r4
     b1a:	b1 01       	movw	r22, r2
     b1c:	a6 01       	movw	r20, r12
     b1e:	95 01       	movw	r18, r10
     b20:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <__addsf3>
     b24:	a8 01       	movw	r20, r16
     b26:	97 01       	movw	r18, r14
     b28:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <__addsf3>
     b2c:	7b 01       	movw	r14, r22
     b2e:	8c 01       	movw	r16, r24
     b30:	60 93 5c 02 	sts	0x025C, r22
     b34:	70 93 5d 02 	sts	0x025D, r23
     b38:	80 93 5e 02 	sts	0x025E, r24
     b3c:	90 93 5f 02 	sts	0x025F, r25
				
				rightpulse =  basespeed + correction;
     b40:	60 91 36 01 	lds	r22, 0x0136
     b44:	70 91 37 01 	lds	r23, 0x0137
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	90 e0       	ldi	r25, 0x00	; 0
     b4c:	0e 94 19 11 	call	0x2232	; 0x2232 <__floatunsisf>
     b50:	5b 01       	movw	r10, r22
     b52:	6c 01       	movw	r12, r24
     b54:	a8 01       	movw	r20, r16
     b56:	97 01       	movw	r18, r14
     b58:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <__addsf3>
     b5c:	0e 94 8b 0c 	call	0x1916	; 0x1916 <__fixunssfsi>
     b60:	4b 01       	movw	r8, r22
     b62:	70 93 61 02 	sts	0x0261, r23
     b66:	60 93 60 02 	sts	0x0260, r22
				leftpulse = basespeed - correction;
     b6a:	c6 01       	movw	r24, r12
     b6c:	b5 01       	movw	r22, r10
     b6e:	a8 01       	movw	r20, r16
     b70:	97 01       	movw	r18, r14
     b72:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <__subsf3>
     b76:	0e 94 8b 0c 	call	0x1916	; 0x1916 <__fixunssfsi>
     b7a:	9b 01       	movw	r18, r22
     b7c:	70 93 6b 02 	sts	0x026B, r23
     b80:	60 93 6a 02 	sts	0x026A, r22
				
PORTD=(0<<PD0) | (1<<PD1) | (0<<PD6) | (1<<PD7);
     b84:	82 e8       	ldi	r24, 0x82	; 130
     b86:	d2 c4       	rjmp	.+2468   	; 0x152c <main+0xb94>
			
			
	
				
							
if(PINA==0b00011000||PINA==0b00010000||PINA==0b00001000)
     b88:	89 b3       	in	r24, 0x19	; 25
     b8a:	88 31       	cpi	r24, 0x18	; 24
     b8c:	39 f0       	breq	.+14     	; 0xb9c <main+0x204>
     b8e:	89 b3       	in	r24, 0x19	; 25
     b90:	80 31       	cpi	r24, 0x10	; 16
     b92:	21 f0       	breq	.+8      	; 0xb9c <main+0x204>
     b94:	89 b3       	in	r24, 0x19	; 25
     b96:	88 30       	cpi	r24, 0x08	; 8
     b98:	09 f0       	breq	.+2      	; 0xb9c <main+0x204>
     b9a:	a2 c0       	rjmp	.+324    	; 0xce0 <main+0x348>
{
assign();
     b9c:	0e 94 86 02 	call	0x50c	; 0x50c <assign>

	CalcError();
     ba0:	0e 94 6f 01 	call	0x2de	; 0x2de <CalcError>
				P = error * Kp;
     ba4:	60 90 46 02 	lds	r6, 0x0246
     ba8:	70 90 47 02 	lds	r7, 0x0247
     bac:	80 90 48 02 	lds	r8, 0x0248
     bb0:	90 90 49 02 	lds	r9, 0x0249
     bb4:	60 91 38 01 	lds	r22, 0x0138
     bb8:	70 91 39 01 	lds	r23, 0x0139
     bbc:	80 e0       	ldi	r24, 0x00	; 0
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	0e 94 19 11 	call	0x2232	; 0x2232 <__floatunsisf>
     bc4:	9b 01       	movw	r18, r22
     bc6:	ac 01       	movw	r20, r24
     bc8:	c4 01       	movw	r24, r8
     bca:	b3 01       	movw	r22, r6
     bcc:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <__mulsf3>
     bd0:	1b 01       	movw	r2, r22
     bd2:	2c 01       	movw	r4, r24
     bd4:	60 93 70 02 	sts	0x0270, r22
     bd8:	70 93 71 02 	sts	0x0271, r23
     bdc:	80 93 72 02 	sts	0x0272, r24
     be0:	90 93 73 02 	sts	0x0273, r25
				
				I += error;
     be4:	c4 01       	movw	r24, r8
     be6:	b3 01       	movw	r22, r6
     be8:	20 91 66 02 	lds	r18, 0x0266
     bec:	30 91 67 02 	lds	r19, 0x0267
     bf0:	40 91 68 02 	lds	r20, 0x0268
     bf4:	50 91 69 02 	lds	r21, 0x0269
     bf8:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <__addsf3>
     bfc:	7b 01       	movw	r14, r22
     bfe:	8c 01       	movw	r16, r24
				I = I * Ki;
     c00:	60 91 3a 01 	lds	r22, 0x013A
     c04:	70 91 3b 01 	lds	r23, 0x013B
     c08:	80 e0       	ldi	r24, 0x00	; 0
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	0e 94 19 11 	call	0x2232	; 0x2232 <__floatunsisf>
     c10:	9b 01       	movw	r18, r22
     c12:	ac 01       	movw	r20, r24
     c14:	c8 01       	movw	r24, r16
     c16:	b7 01       	movw	r22, r14
     c18:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <__mulsf3>
     c1c:	5b 01       	movw	r10, r22
     c1e:	6c 01       	movw	r12, r24
     c20:	60 93 66 02 	sts	0x0266, r22
     c24:	70 93 67 02 	sts	0x0267, r23
     c28:	80 93 68 02 	sts	0x0268, r24
     c2c:	90 93 69 02 	sts	0x0269, r25
				
				D = error - perror;
     c30:	c4 01       	movw	r24, r8
     c32:	b3 01       	movw	r22, r6
     c34:	20 91 4a 02 	lds	r18, 0x024A
     c38:	30 91 4b 02 	lds	r19, 0x024B
     c3c:	40 91 4c 02 	lds	r20, 0x024C
     c40:	50 91 4d 02 	lds	r21, 0x024D
     c44:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <__subsf3>
     c48:	7b 01       	movw	r14, r22
     c4a:	8c 01       	movw	r16, r24
     c4c:	60 93 50 02 	sts	0x0250, r22
     c50:	70 93 51 02 	sts	0x0251, r23
     c54:	80 93 52 02 	sts	0x0252, r24
     c58:	90 93 53 02 	sts	0x0253, r25
				
				correction = P + I + D;
     c5c:	c2 01       	movw	r24, r4
     c5e:	b1 01       	movw	r22, r2
     c60:	a6 01       	movw	r20, r12
     c62:	95 01       	movw	r18, r10
     c64:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <__addsf3>
     c68:	a8 01       	movw	r20, r16
     c6a:	97 01       	movw	r18, r14
     c6c:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <__addsf3>
     c70:	7b 01       	movw	r14, r22
     c72:	8c 01       	movw	r16, r24
     c74:	60 93 5c 02 	sts	0x025C, r22
     c78:	70 93 5d 02 	sts	0x025D, r23
     c7c:	80 93 5e 02 	sts	0x025E, r24
     c80:	90 93 5f 02 	sts	0x025F, r25
				
				rightpulse =  basespeed + correction;
     c84:	60 91 36 01 	lds	r22, 0x0136
     c88:	70 91 37 01 	lds	r23, 0x0137
     c8c:	80 e0       	ldi	r24, 0x00	; 0
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	0e 94 19 11 	call	0x2232	; 0x2232 <__floatunsisf>
     c94:	5b 01       	movw	r10, r22
     c96:	6c 01       	movw	r12, r24
     c98:	a8 01       	movw	r20, r16
     c9a:	97 01       	movw	r18, r14
     c9c:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <__addsf3>
     ca0:	0e 94 8b 0c 	call	0x1916	; 0x1916 <__fixunssfsi>
     ca4:	4b 01       	movw	r8, r22
     ca6:	70 93 61 02 	sts	0x0261, r23
     caa:	60 93 60 02 	sts	0x0260, r22
				leftpulse = basespeed - correction;	
     cae:	c6 01       	movw	r24, r12
     cb0:	b5 01       	movw	r22, r10
     cb2:	a8 01       	movw	r20, r16
     cb4:	97 01       	movw	r18, r14
     cb6:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <__subsf3>
     cba:	0e 94 8b 0c 	call	0x1916	; 0x1916 <__fixunssfsi>
     cbe:	9b 01       	movw	r18, r22
     cc0:	70 93 6b 02 	sts	0x026B, r23
     cc4:	60 93 6a 02 	sts	0x026A, r22
PORTD=(0<<PD0) | (1<<PD1) | (0<<PD6) | (1<<PD7);
     cc8:	82 e8       	ldi	r24, 0x82	; 130
     cca:	82 bb       	out	0x12, r24	; 18
OCR1A = 255-leftpulse;
     ccc:	ce 01       	movw	r24, r28
     cce:	82 1b       	sub	r24, r18
     cd0:	93 0b       	sbc	r25, r19
     cd2:	9b bd       	out	0x2b, r25	; 43
     cd4:	8a bd       	out	0x2a, r24	; 42
				OCR1B = 255-rightpulse;
     cd6:	ce 01       	movw	r24, r28
     cd8:	88 19       	sub	r24, r8
     cda:	99 09       	sbc	r25, r9
     cdc:	99 bd       	out	0x29, r25	; 41
     cde:	88 bd       	out	0x28, r24	; 40
}

if((PINA==0b00110000||PINA==0b00111000||PINA==0b01011000||PINA==0b01111000||PINA==0b11111000||PINA==0b11100000))
     ce0:	89 b3       	in	r24, 0x19	; 25
     ce2:	80 33       	cpi	r24, 0x30	; 48
     ce4:	81 f0       	breq	.+32     	; 0xd06 <main+0x36e>
     ce6:	89 b3       	in	r24, 0x19	; 25
     ce8:	88 33       	cpi	r24, 0x38	; 56
     cea:	69 f0       	breq	.+26     	; 0xd06 <main+0x36e>
     cec:	89 b3       	in	r24, 0x19	; 25
     cee:	88 35       	cpi	r24, 0x58	; 88
     cf0:	51 f0       	breq	.+20     	; 0xd06 <main+0x36e>
     cf2:	89 b3       	in	r24, 0x19	; 25
     cf4:	88 37       	cpi	r24, 0x78	; 120
     cf6:	39 f0       	breq	.+14     	; 0xd06 <main+0x36e>
     cf8:	89 b3       	in	r24, 0x19	; 25
     cfa:	88 3f       	cpi	r24, 0xF8	; 248
     cfc:	21 f0       	breq	.+8      	; 0xd06 <main+0x36e>
     cfe:	89 b3       	in	r24, 0x19	; 25
     d00:	80 3e       	cpi	r24, 0xE0	; 224
     d02:	09 f0       	breq	.+2      	; 0xd06 <main+0x36e>
     d04:	a2 c0       	rjmp	.+324    	; 0xe4a <main+0x4b2>
{
assign();
     d06:	0e 94 86 02 	call	0x50c	; 0x50c <assign>
	CalcError();
     d0a:	0e 94 6f 01 	call	0x2de	; 0x2de <CalcError>
				P = error * Kp;
     d0e:	60 90 46 02 	lds	r6, 0x0246
     d12:	70 90 47 02 	lds	r7, 0x0247
     d16:	80 90 48 02 	lds	r8, 0x0248
     d1a:	90 90 49 02 	lds	r9, 0x0249
     d1e:	60 91 38 01 	lds	r22, 0x0138
     d22:	70 91 39 01 	lds	r23, 0x0139
     d26:	80 e0       	ldi	r24, 0x00	; 0
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	0e 94 19 11 	call	0x2232	; 0x2232 <__floatunsisf>
     d2e:	9b 01       	movw	r18, r22
     d30:	ac 01       	movw	r20, r24
     d32:	c4 01       	movw	r24, r8
     d34:	b3 01       	movw	r22, r6
     d36:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <__mulsf3>
     d3a:	1b 01       	movw	r2, r22
     d3c:	2c 01       	movw	r4, r24
     d3e:	60 93 70 02 	sts	0x0270, r22
     d42:	70 93 71 02 	sts	0x0271, r23
     d46:	80 93 72 02 	sts	0x0272, r24
     d4a:	90 93 73 02 	sts	0x0273, r25
				
				I += error;
     d4e:	c4 01       	movw	r24, r8
     d50:	b3 01       	movw	r22, r6
     d52:	20 91 66 02 	lds	r18, 0x0266
     d56:	30 91 67 02 	lds	r19, 0x0267
     d5a:	40 91 68 02 	lds	r20, 0x0268
     d5e:	50 91 69 02 	lds	r21, 0x0269
     d62:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <__addsf3>
     d66:	7b 01       	movw	r14, r22
     d68:	8c 01       	movw	r16, r24
				I = I * Ki;
     d6a:	60 91 3a 01 	lds	r22, 0x013A
     d6e:	70 91 3b 01 	lds	r23, 0x013B
     d72:	80 e0       	ldi	r24, 0x00	; 0
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	0e 94 19 11 	call	0x2232	; 0x2232 <__floatunsisf>
     d7a:	9b 01       	movw	r18, r22
     d7c:	ac 01       	movw	r20, r24
     d7e:	c8 01       	movw	r24, r16
     d80:	b7 01       	movw	r22, r14
     d82:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <__mulsf3>
     d86:	5b 01       	movw	r10, r22
     d88:	6c 01       	movw	r12, r24
     d8a:	60 93 66 02 	sts	0x0266, r22
     d8e:	70 93 67 02 	sts	0x0267, r23
     d92:	80 93 68 02 	sts	0x0268, r24
     d96:	90 93 69 02 	sts	0x0269, r25
				
				D = error - perror;
     d9a:	c4 01       	movw	r24, r8
     d9c:	b3 01       	movw	r22, r6
     d9e:	20 91 4a 02 	lds	r18, 0x024A
     da2:	30 91 4b 02 	lds	r19, 0x024B
     da6:	40 91 4c 02 	lds	r20, 0x024C
     daa:	50 91 4d 02 	lds	r21, 0x024D
     dae:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <__subsf3>
     db2:	7b 01       	movw	r14, r22
     db4:	8c 01       	movw	r16, r24
     db6:	60 93 50 02 	sts	0x0250, r22
     dba:	70 93 51 02 	sts	0x0251, r23
     dbe:	80 93 52 02 	sts	0x0252, r24
     dc2:	90 93 53 02 	sts	0x0253, r25
				
				correction = P + I + D;
     dc6:	c2 01       	movw	r24, r4
     dc8:	b1 01       	movw	r22, r2
     dca:	a6 01       	movw	r20, r12
     dcc:	95 01       	movw	r18, r10
     dce:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <__addsf3>
     dd2:	a8 01       	movw	r20, r16
     dd4:	97 01       	movw	r18, r14
     dd6:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <__addsf3>
     dda:	7b 01       	movw	r14, r22
     ddc:	8c 01       	movw	r16, r24
     dde:	60 93 5c 02 	sts	0x025C, r22
     de2:	70 93 5d 02 	sts	0x025D, r23
     de6:	80 93 5e 02 	sts	0x025E, r24
     dea:	90 93 5f 02 	sts	0x025F, r25
				
				rightpulse =  basespeed + correction;
     dee:	60 91 36 01 	lds	r22, 0x0136
     df2:	70 91 37 01 	lds	r23, 0x0137
     df6:	80 e0       	ldi	r24, 0x00	; 0
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	0e 94 19 11 	call	0x2232	; 0x2232 <__floatunsisf>
     dfe:	5b 01       	movw	r10, r22
     e00:	6c 01       	movw	r12, r24
     e02:	a8 01       	movw	r20, r16
     e04:	97 01       	movw	r18, r14
     e06:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <__addsf3>
     e0a:	0e 94 8b 0c 	call	0x1916	; 0x1916 <__fixunssfsi>
     e0e:	4b 01       	movw	r8, r22
     e10:	70 93 61 02 	sts	0x0261, r23
     e14:	60 93 60 02 	sts	0x0260, r22
				leftpulse = basespeed - correction;	
     e18:	c6 01       	movw	r24, r12
     e1a:	b5 01       	movw	r22, r10
     e1c:	a8 01       	movw	r20, r16
     e1e:	97 01       	movw	r18, r14
     e20:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <__subsf3>
     e24:	0e 94 8b 0c 	call	0x1916	; 0x1916 <__fixunssfsi>
     e28:	9b 01       	movw	r18, r22
     e2a:	70 93 6b 02 	sts	0x026B, r23
     e2e:	60 93 6a 02 	sts	0x026A, r22
PORTD=(0<<PD0) | (0<<PD1) | (0<<PD6) | (1<<PD7);
     e32:	80 e8       	ldi	r24, 0x80	; 128
     e34:	82 bb       	out	0x12, r24	; 18
OCR1A =255-leftpulse;
     e36:	ce 01       	movw	r24, r28
     e38:	82 1b       	sub	r24, r18
     e3a:	93 0b       	sbc	r25, r19
     e3c:	9b bd       	out	0x2b, r25	; 43
     e3e:	8a bd       	out	0x2a, r24	; 42
				OCR1B =255-rightpulse;
     e40:	ce 01       	movw	r24, r28
     e42:	88 19       	sub	r24, r8
     e44:	99 09       	sbc	r25, r9
     e46:	99 bd       	out	0x29, r25	; 41
     e48:	88 bd       	out	0x28, r24	; 40
}

if((PINA==0b00001100||PINA==0b00011100||PINA==0b00011010||PINA==0b00011110||PINA==0b00011111||PINA==0b00000111))
     e4a:	89 b3       	in	r24, 0x19	; 25
     e4c:	8c 30       	cpi	r24, 0x0C	; 12
     e4e:	81 f0       	breq	.+32     	; 0xe70 <main+0x4d8>
     e50:	89 b3       	in	r24, 0x19	; 25
     e52:	8c 31       	cpi	r24, 0x1C	; 28
     e54:	69 f0       	breq	.+26     	; 0xe70 <main+0x4d8>
     e56:	89 b3       	in	r24, 0x19	; 25
     e58:	8a 31       	cpi	r24, 0x1A	; 26
     e5a:	51 f0       	breq	.+20     	; 0xe70 <main+0x4d8>
     e5c:	89 b3       	in	r24, 0x19	; 25
     e5e:	8e 31       	cpi	r24, 0x1E	; 30
     e60:	39 f0       	breq	.+14     	; 0xe70 <main+0x4d8>
     e62:	89 b3       	in	r24, 0x19	; 25
     e64:	8f 31       	cpi	r24, 0x1F	; 31
     e66:	21 f0       	breq	.+8      	; 0xe70 <main+0x4d8>
     e68:	89 b3       	in	r24, 0x19	; 25
     e6a:	87 30       	cpi	r24, 0x07	; 7
     e6c:	09 f0       	breq	.+2      	; 0xe70 <main+0x4d8>
     e6e:	a2 c0       	rjmp	.+324    	; 0xfb4 <main+0x61c>
{
assign();
     e70:	0e 94 86 02 	call	0x50c	; 0x50c <assign>
	CalcError();
     e74:	0e 94 6f 01 	call	0x2de	; 0x2de <CalcError>
				P = error * Kp;
     e78:	60 90 46 02 	lds	r6, 0x0246
     e7c:	70 90 47 02 	lds	r7, 0x0247
     e80:	80 90 48 02 	lds	r8, 0x0248
     e84:	90 90 49 02 	lds	r9, 0x0249
     e88:	60 91 38 01 	lds	r22, 0x0138
     e8c:	70 91 39 01 	lds	r23, 0x0139
     e90:	80 e0       	ldi	r24, 0x00	; 0
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	0e 94 19 11 	call	0x2232	; 0x2232 <__floatunsisf>
     e98:	9b 01       	movw	r18, r22
     e9a:	ac 01       	movw	r20, r24
     e9c:	c4 01       	movw	r24, r8
     e9e:	b3 01       	movw	r22, r6
     ea0:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <__mulsf3>
     ea4:	1b 01       	movw	r2, r22
     ea6:	2c 01       	movw	r4, r24
     ea8:	60 93 70 02 	sts	0x0270, r22
     eac:	70 93 71 02 	sts	0x0271, r23
     eb0:	80 93 72 02 	sts	0x0272, r24
     eb4:	90 93 73 02 	sts	0x0273, r25
				
				I += error;
     eb8:	c4 01       	movw	r24, r8
     eba:	b3 01       	movw	r22, r6
     ebc:	20 91 66 02 	lds	r18, 0x0266
     ec0:	30 91 67 02 	lds	r19, 0x0267
     ec4:	40 91 68 02 	lds	r20, 0x0268
     ec8:	50 91 69 02 	lds	r21, 0x0269
     ecc:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <__addsf3>
     ed0:	7b 01       	movw	r14, r22
     ed2:	8c 01       	movw	r16, r24
				I = I * Ki;
     ed4:	60 91 3a 01 	lds	r22, 0x013A
     ed8:	70 91 3b 01 	lds	r23, 0x013B
     edc:	80 e0       	ldi	r24, 0x00	; 0
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	0e 94 19 11 	call	0x2232	; 0x2232 <__floatunsisf>
     ee4:	9b 01       	movw	r18, r22
     ee6:	ac 01       	movw	r20, r24
     ee8:	c8 01       	movw	r24, r16
     eea:	b7 01       	movw	r22, r14
     eec:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <__mulsf3>
     ef0:	5b 01       	movw	r10, r22
     ef2:	6c 01       	movw	r12, r24
     ef4:	60 93 66 02 	sts	0x0266, r22
     ef8:	70 93 67 02 	sts	0x0267, r23
     efc:	80 93 68 02 	sts	0x0268, r24
     f00:	90 93 69 02 	sts	0x0269, r25
				
				D = error - perror;
     f04:	c4 01       	movw	r24, r8
     f06:	b3 01       	movw	r22, r6
     f08:	20 91 4a 02 	lds	r18, 0x024A
     f0c:	30 91 4b 02 	lds	r19, 0x024B
     f10:	40 91 4c 02 	lds	r20, 0x024C
     f14:	50 91 4d 02 	lds	r21, 0x024D
     f18:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <__subsf3>
     f1c:	7b 01       	movw	r14, r22
     f1e:	8c 01       	movw	r16, r24
     f20:	60 93 50 02 	sts	0x0250, r22
     f24:	70 93 51 02 	sts	0x0251, r23
     f28:	80 93 52 02 	sts	0x0252, r24
     f2c:	90 93 53 02 	sts	0x0253, r25
				
				correction = P + I + D;
     f30:	c2 01       	movw	r24, r4
     f32:	b1 01       	movw	r22, r2
     f34:	a6 01       	movw	r20, r12
     f36:	95 01       	movw	r18, r10
     f38:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <__addsf3>
     f3c:	a8 01       	movw	r20, r16
     f3e:	97 01       	movw	r18, r14
     f40:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <__addsf3>
     f44:	7b 01       	movw	r14, r22
     f46:	8c 01       	movw	r16, r24
     f48:	60 93 5c 02 	sts	0x025C, r22
     f4c:	70 93 5d 02 	sts	0x025D, r23
     f50:	80 93 5e 02 	sts	0x025E, r24
     f54:	90 93 5f 02 	sts	0x025F, r25
				
				rightpulse =  basespeed + correction;
     f58:	60 91 36 01 	lds	r22, 0x0136
     f5c:	70 91 37 01 	lds	r23, 0x0137
     f60:	80 e0       	ldi	r24, 0x00	; 0
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	0e 94 19 11 	call	0x2232	; 0x2232 <__floatunsisf>
     f68:	5b 01       	movw	r10, r22
     f6a:	6c 01       	movw	r12, r24
     f6c:	a8 01       	movw	r20, r16
     f6e:	97 01       	movw	r18, r14
     f70:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <__addsf3>
     f74:	0e 94 8b 0c 	call	0x1916	; 0x1916 <__fixunssfsi>
     f78:	4b 01       	movw	r8, r22
     f7a:	70 93 61 02 	sts	0x0261, r23
     f7e:	60 93 60 02 	sts	0x0260, r22
				leftpulse = basespeed - correction;	
     f82:	c6 01       	movw	r24, r12
     f84:	b5 01       	movw	r22, r10
     f86:	a8 01       	movw	r20, r16
     f88:	97 01       	movw	r18, r14
     f8a:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <__subsf3>
     f8e:	0e 94 8b 0c 	call	0x1916	; 0x1916 <__fixunssfsi>
     f92:	9b 01       	movw	r18, r22
     f94:	70 93 6b 02 	sts	0x026B, r23
     f98:	60 93 6a 02 	sts	0x026A, r22
PORTD=(0<<PD0) | (1<<PD1) | (0<<PD6) | (0<<PD7);
     f9c:	82 e0       	ldi	r24, 0x02	; 2
     f9e:	82 bb       	out	0x12, r24	; 18
OCR1A =255-leftpulse;
     fa0:	ce 01       	movw	r24, r28
     fa2:	82 1b       	sub	r24, r18
     fa4:	93 0b       	sbc	r25, r19
     fa6:	9b bd       	out	0x2b, r25	; 43
     fa8:	8a bd       	out	0x2a, r24	; 42
				OCR1B =255-rightpulse;
     faa:	ce 01       	movw	r24, r28
     fac:	88 19       	sub	r24, r8
     fae:	99 09       	sbc	r25, r9
     fb0:	99 bd       	out	0x29, r25	; 41
     fb2:	88 bd       	out	0x28, r24	; 40
}

if((PINA==0b11111111))
     fb4:	89 b3       	in	r24, 0x19	; 25
     fb6:	8f 3f       	cpi	r24, 0xFF	; 255
     fb8:	09 f0       	breq	.+2      	; 0xfbc <main+0x624>
     fba:	a1 c0       	rjmp	.+322    	; 0x10fe <main+0x766>
{
assign();
     fbc:	0e 94 86 02 	call	0x50c	; 0x50c <assign>
	CalcError();
     fc0:	0e 94 6f 01 	call	0x2de	; 0x2de <CalcError>
				P = error * Kp;
     fc4:	60 90 46 02 	lds	r6, 0x0246
     fc8:	70 90 47 02 	lds	r7, 0x0247
     fcc:	80 90 48 02 	lds	r8, 0x0248
     fd0:	90 90 49 02 	lds	r9, 0x0249
     fd4:	60 91 38 01 	lds	r22, 0x0138
     fd8:	70 91 39 01 	lds	r23, 0x0139
     fdc:	80 e0       	ldi	r24, 0x00	; 0
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	0e 94 19 11 	call	0x2232	; 0x2232 <__floatunsisf>
     fe4:	9b 01       	movw	r18, r22
     fe6:	ac 01       	movw	r20, r24
     fe8:	c4 01       	movw	r24, r8
     fea:	b3 01       	movw	r22, r6
     fec:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <__mulsf3>
     ff0:	1b 01       	movw	r2, r22
     ff2:	2c 01       	movw	r4, r24
     ff4:	60 93 70 02 	sts	0x0270, r22
     ff8:	70 93 71 02 	sts	0x0271, r23
     ffc:	80 93 72 02 	sts	0x0272, r24
    1000:	90 93 73 02 	sts	0x0273, r25
				
				I += error;
    1004:	c4 01       	movw	r24, r8
    1006:	b3 01       	movw	r22, r6
    1008:	20 91 66 02 	lds	r18, 0x0266
    100c:	30 91 67 02 	lds	r19, 0x0267
    1010:	40 91 68 02 	lds	r20, 0x0268
    1014:	50 91 69 02 	lds	r21, 0x0269
    1018:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <__addsf3>
    101c:	7b 01       	movw	r14, r22
    101e:	8c 01       	movw	r16, r24
				I = I * Ki;
    1020:	60 91 3a 01 	lds	r22, 0x013A
    1024:	70 91 3b 01 	lds	r23, 0x013B
    1028:	80 e0       	ldi	r24, 0x00	; 0
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	0e 94 19 11 	call	0x2232	; 0x2232 <__floatunsisf>
    1030:	9b 01       	movw	r18, r22
    1032:	ac 01       	movw	r20, r24
    1034:	c8 01       	movw	r24, r16
    1036:	b7 01       	movw	r22, r14
    1038:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <__mulsf3>
    103c:	5b 01       	movw	r10, r22
    103e:	6c 01       	movw	r12, r24
    1040:	60 93 66 02 	sts	0x0266, r22
    1044:	70 93 67 02 	sts	0x0267, r23
    1048:	80 93 68 02 	sts	0x0268, r24
    104c:	90 93 69 02 	sts	0x0269, r25
				
				D = error - perror;
    1050:	c4 01       	movw	r24, r8
    1052:	b3 01       	movw	r22, r6
    1054:	20 91 4a 02 	lds	r18, 0x024A
    1058:	30 91 4b 02 	lds	r19, 0x024B
    105c:	40 91 4c 02 	lds	r20, 0x024C
    1060:	50 91 4d 02 	lds	r21, 0x024D
    1064:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <__subsf3>
    1068:	7b 01       	movw	r14, r22
    106a:	8c 01       	movw	r16, r24
    106c:	60 93 50 02 	sts	0x0250, r22
    1070:	70 93 51 02 	sts	0x0251, r23
    1074:	80 93 52 02 	sts	0x0252, r24
    1078:	90 93 53 02 	sts	0x0253, r25
				
				correction = P + I + D;
    107c:	c2 01       	movw	r24, r4
    107e:	b1 01       	movw	r22, r2
    1080:	a6 01       	movw	r20, r12
    1082:	95 01       	movw	r18, r10
    1084:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <__addsf3>
    1088:	a8 01       	movw	r20, r16
    108a:	97 01       	movw	r18, r14
    108c:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <__addsf3>
    1090:	7b 01       	movw	r14, r22
    1092:	8c 01       	movw	r16, r24
    1094:	60 93 5c 02 	sts	0x025C, r22
    1098:	70 93 5d 02 	sts	0x025D, r23
    109c:	80 93 5e 02 	sts	0x025E, r24
    10a0:	90 93 5f 02 	sts	0x025F, r25
				
				rightpulse =  basespeed + correction;
    10a4:	60 91 36 01 	lds	r22, 0x0136
    10a8:	70 91 37 01 	lds	r23, 0x0137
    10ac:	80 e0       	ldi	r24, 0x00	; 0
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	0e 94 19 11 	call	0x2232	; 0x2232 <__floatunsisf>
    10b4:	5b 01       	movw	r10, r22
    10b6:	6c 01       	movw	r12, r24
    10b8:	a8 01       	movw	r20, r16
    10ba:	97 01       	movw	r18, r14
    10bc:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <__addsf3>
    10c0:	0e 94 8b 0c 	call	0x1916	; 0x1916 <__fixunssfsi>
    10c4:	4b 01       	movw	r8, r22
    10c6:	70 93 61 02 	sts	0x0261, r23
    10ca:	60 93 60 02 	sts	0x0260, r22
				leftpulse = basespeed - correction;	
    10ce:	c6 01       	movw	r24, r12
    10d0:	b5 01       	movw	r22, r10
    10d2:	a8 01       	movw	r20, r16
    10d4:	97 01       	movw	r18, r14
    10d6:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <__subsf3>
    10da:	0e 94 8b 0c 	call	0x1916	; 0x1916 <__fixunssfsi>
    10de:	9b 01       	movw	r18, r22
    10e0:	70 93 6b 02 	sts	0x026B, r23
    10e4:	60 93 6a 02 	sts	0x026A, r22
PORTD=0b00000000;
    10e8:	12 ba       	out	0x12, r1	; 18
OCR1A =255-leftpulse;
    10ea:	ce 01       	movw	r24, r28
    10ec:	82 1b       	sub	r24, r18
    10ee:	93 0b       	sbc	r25, r19
    10f0:	9b bd       	out	0x2b, r25	; 43
    10f2:	8a bd       	out	0x2a, r24	; 42
				OCR1B =255-rightpulse;
    10f4:	ce 01       	movw	r24, r28
    10f6:	88 19       	sub	r24, r8
    10f8:	99 09       	sbc	r25, r9
    10fa:	99 bd       	out	0x29, r25	; 41
    10fc:	88 bd       	out	0x28, r24	; 40





if((PINA==0b00111100||PINA==0b01011010||PINA==0b10011001))
    10fe:	89 b3       	in	r24, 0x19	; 25
    1100:	8c 33       	cpi	r24, 0x3C	; 60
    1102:	39 f0       	breq	.+14     	; 0x1112 <main+0x77a>
    1104:	89 b3       	in	r24, 0x19	; 25
    1106:	8a 35       	cpi	r24, 0x5A	; 90
    1108:	21 f0       	breq	.+8      	; 0x1112 <main+0x77a>
    110a:	89 b3       	in	r24, 0x19	; 25
    110c:	89 39       	cpi	r24, 0x99	; 153
    110e:	09 f0       	breq	.+2      	; 0x1112 <main+0x77a>
    1110:	a2 c0       	rjmp	.+324    	; 0x1256 <main+0x8be>
{
assign();
    1112:	0e 94 86 02 	call	0x50c	; 0x50c <assign>
	CalcError();
    1116:	0e 94 6f 01 	call	0x2de	; 0x2de <CalcError>
				P = error * Kp;
    111a:	60 90 46 02 	lds	r6, 0x0246
    111e:	70 90 47 02 	lds	r7, 0x0247
    1122:	80 90 48 02 	lds	r8, 0x0248
    1126:	90 90 49 02 	lds	r9, 0x0249
    112a:	60 91 38 01 	lds	r22, 0x0138
    112e:	70 91 39 01 	lds	r23, 0x0139
    1132:	80 e0       	ldi	r24, 0x00	; 0
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	0e 94 19 11 	call	0x2232	; 0x2232 <__floatunsisf>
    113a:	9b 01       	movw	r18, r22
    113c:	ac 01       	movw	r20, r24
    113e:	c4 01       	movw	r24, r8
    1140:	b3 01       	movw	r22, r6
    1142:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <__mulsf3>
    1146:	1b 01       	movw	r2, r22
    1148:	2c 01       	movw	r4, r24
    114a:	60 93 70 02 	sts	0x0270, r22
    114e:	70 93 71 02 	sts	0x0271, r23
    1152:	80 93 72 02 	sts	0x0272, r24
    1156:	90 93 73 02 	sts	0x0273, r25
				
				I += error;
    115a:	c4 01       	movw	r24, r8
    115c:	b3 01       	movw	r22, r6
    115e:	20 91 66 02 	lds	r18, 0x0266
    1162:	30 91 67 02 	lds	r19, 0x0267
    1166:	40 91 68 02 	lds	r20, 0x0268
    116a:	50 91 69 02 	lds	r21, 0x0269
    116e:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <__addsf3>
    1172:	7b 01       	movw	r14, r22
    1174:	8c 01       	movw	r16, r24
				I = I * Ki;
    1176:	60 91 3a 01 	lds	r22, 0x013A
    117a:	70 91 3b 01 	lds	r23, 0x013B
    117e:	80 e0       	ldi	r24, 0x00	; 0
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	0e 94 19 11 	call	0x2232	; 0x2232 <__floatunsisf>
    1186:	9b 01       	movw	r18, r22
    1188:	ac 01       	movw	r20, r24
    118a:	c8 01       	movw	r24, r16
    118c:	b7 01       	movw	r22, r14
    118e:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <__mulsf3>
    1192:	5b 01       	movw	r10, r22
    1194:	6c 01       	movw	r12, r24
    1196:	60 93 66 02 	sts	0x0266, r22
    119a:	70 93 67 02 	sts	0x0267, r23
    119e:	80 93 68 02 	sts	0x0268, r24
    11a2:	90 93 69 02 	sts	0x0269, r25
				
				D = error - perror;
    11a6:	c4 01       	movw	r24, r8
    11a8:	b3 01       	movw	r22, r6
    11aa:	20 91 4a 02 	lds	r18, 0x024A
    11ae:	30 91 4b 02 	lds	r19, 0x024B
    11b2:	40 91 4c 02 	lds	r20, 0x024C
    11b6:	50 91 4d 02 	lds	r21, 0x024D
    11ba:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <__subsf3>
    11be:	7b 01       	movw	r14, r22
    11c0:	8c 01       	movw	r16, r24
    11c2:	60 93 50 02 	sts	0x0250, r22
    11c6:	70 93 51 02 	sts	0x0251, r23
    11ca:	80 93 52 02 	sts	0x0252, r24
    11ce:	90 93 53 02 	sts	0x0253, r25
				
				correction = P + I + D;
    11d2:	c2 01       	movw	r24, r4
    11d4:	b1 01       	movw	r22, r2
    11d6:	a6 01       	movw	r20, r12
    11d8:	95 01       	movw	r18, r10
    11da:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <__addsf3>
    11de:	a8 01       	movw	r20, r16
    11e0:	97 01       	movw	r18, r14
    11e2:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <__addsf3>
    11e6:	7b 01       	movw	r14, r22
    11e8:	8c 01       	movw	r16, r24
    11ea:	60 93 5c 02 	sts	0x025C, r22
    11ee:	70 93 5d 02 	sts	0x025D, r23
    11f2:	80 93 5e 02 	sts	0x025E, r24
    11f6:	90 93 5f 02 	sts	0x025F, r25
				
				rightpulse =  basespeed + correction;
    11fa:	60 91 36 01 	lds	r22, 0x0136
    11fe:	70 91 37 01 	lds	r23, 0x0137
    1202:	80 e0       	ldi	r24, 0x00	; 0
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	0e 94 19 11 	call	0x2232	; 0x2232 <__floatunsisf>
    120a:	5b 01       	movw	r10, r22
    120c:	6c 01       	movw	r12, r24
    120e:	a8 01       	movw	r20, r16
    1210:	97 01       	movw	r18, r14
    1212:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <__addsf3>
    1216:	0e 94 8b 0c 	call	0x1916	; 0x1916 <__fixunssfsi>
    121a:	4b 01       	movw	r8, r22
    121c:	70 93 61 02 	sts	0x0261, r23
    1220:	60 93 60 02 	sts	0x0260, r22
				leftpulse = basespeed - correction;	
    1224:	c6 01       	movw	r24, r12
    1226:	b5 01       	movw	r22, r10
    1228:	a8 01       	movw	r20, r16
    122a:	97 01       	movw	r18, r14
    122c:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <__subsf3>
    1230:	0e 94 8b 0c 	call	0x1916	; 0x1916 <__fixunssfsi>
    1234:	9b 01       	movw	r18, r22
    1236:	70 93 6b 02 	sts	0x026B, r23
    123a:	60 93 6a 02 	sts	0x026A, r22
PORTD=(0<<PD0) | (1<<PD1) | (0<<PD6) | (0<<PD7);
    123e:	82 e0       	ldi	r24, 0x02	; 2
    1240:	82 bb       	out	0x12, r24	; 18
OCR1A = 255-leftpulse;
    1242:	ce 01       	movw	r24, r28
    1244:	82 1b       	sub	r24, r18
    1246:	93 0b       	sbc	r25, r19
    1248:	9b bd       	out	0x2b, r25	; 43
    124a:	8a bd       	out	0x2a, r24	; 42
				OCR1B = 255-rightpulse;
    124c:	ce 01       	movw	r24, r28
    124e:	88 19       	sub	r24, r8
    1250:	99 09       	sbc	r25, r9
    1252:	99 bd       	out	0x29, r25	; 41
    1254:	88 bd       	out	0x28, r24	; 40
}

if((PINA==0b00000100||PINA==0b00000010||PINA==0b00000001||PINA==0b00000110||PINA==0b00000011||PINA==0b00011011||PINA==0b00001110||PINA==0b00011001))
    1256:	89 b3       	in	r24, 0x19	; 25
    1258:	84 30       	cpi	r24, 0x04	; 4
    125a:	b1 f0       	breq	.+44     	; 0x1288 <main+0x8f0>
    125c:	89 b3       	in	r24, 0x19	; 25
    125e:	82 30       	cpi	r24, 0x02	; 2
    1260:	99 f0       	breq	.+38     	; 0x1288 <main+0x8f0>
    1262:	89 b3       	in	r24, 0x19	; 25
    1264:	81 30       	cpi	r24, 0x01	; 1
    1266:	81 f0       	breq	.+32     	; 0x1288 <main+0x8f0>
    1268:	89 b3       	in	r24, 0x19	; 25
    126a:	86 30       	cpi	r24, 0x06	; 6
    126c:	69 f0       	breq	.+26     	; 0x1288 <main+0x8f0>
    126e:	89 b3       	in	r24, 0x19	; 25
    1270:	83 30       	cpi	r24, 0x03	; 3
    1272:	51 f0       	breq	.+20     	; 0x1288 <main+0x8f0>
    1274:	89 b3       	in	r24, 0x19	; 25
    1276:	8b 31       	cpi	r24, 0x1B	; 27
    1278:	39 f0       	breq	.+14     	; 0x1288 <main+0x8f0>
    127a:	89 b3       	in	r24, 0x19	; 25
    127c:	8e 30       	cpi	r24, 0x0E	; 14
    127e:	21 f0       	breq	.+8      	; 0x1288 <main+0x8f0>
    1280:	89 b3       	in	r24, 0x19	; 25
    1282:	89 31       	cpi	r24, 0x19	; 25
    1284:	09 f0       	breq	.+2      	; 0x1288 <main+0x8f0>
    1286:	a2 c0       	rjmp	.+324    	; 0x13cc <main+0xa34>
{
assign();
    1288:	0e 94 86 02 	call	0x50c	; 0x50c <assign>
	CalcError();
    128c:	0e 94 6f 01 	call	0x2de	; 0x2de <CalcError>
				P = error * Kp;
    1290:	60 90 46 02 	lds	r6, 0x0246
    1294:	70 90 47 02 	lds	r7, 0x0247
    1298:	80 90 48 02 	lds	r8, 0x0248
    129c:	90 90 49 02 	lds	r9, 0x0249
    12a0:	60 91 38 01 	lds	r22, 0x0138
    12a4:	70 91 39 01 	lds	r23, 0x0139
    12a8:	80 e0       	ldi	r24, 0x00	; 0
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	0e 94 19 11 	call	0x2232	; 0x2232 <__floatunsisf>
    12b0:	9b 01       	movw	r18, r22
    12b2:	ac 01       	movw	r20, r24
    12b4:	c4 01       	movw	r24, r8
    12b6:	b3 01       	movw	r22, r6
    12b8:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <__mulsf3>
    12bc:	1b 01       	movw	r2, r22
    12be:	2c 01       	movw	r4, r24
    12c0:	60 93 70 02 	sts	0x0270, r22
    12c4:	70 93 71 02 	sts	0x0271, r23
    12c8:	80 93 72 02 	sts	0x0272, r24
    12cc:	90 93 73 02 	sts	0x0273, r25
				
				I += error;
    12d0:	c4 01       	movw	r24, r8
    12d2:	b3 01       	movw	r22, r6
    12d4:	20 91 66 02 	lds	r18, 0x0266
    12d8:	30 91 67 02 	lds	r19, 0x0267
    12dc:	40 91 68 02 	lds	r20, 0x0268
    12e0:	50 91 69 02 	lds	r21, 0x0269
    12e4:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <__addsf3>
    12e8:	7b 01       	movw	r14, r22
    12ea:	8c 01       	movw	r16, r24
				I = I * Ki;
    12ec:	60 91 3a 01 	lds	r22, 0x013A
    12f0:	70 91 3b 01 	lds	r23, 0x013B
    12f4:	80 e0       	ldi	r24, 0x00	; 0
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	0e 94 19 11 	call	0x2232	; 0x2232 <__floatunsisf>
    12fc:	9b 01       	movw	r18, r22
    12fe:	ac 01       	movw	r20, r24
    1300:	c8 01       	movw	r24, r16
    1302:	b7 01       	movw	r22, r14
    1304:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <__mulsf3>
    1308:	5b 01       	movw	r10, r22
    130a:	6c 01       	movw	r12, r24
    130c:	60 93 66 02 	sts	0x0266, r22
    1310:	70 93 67 02 	sts	0x0267, r23
    1314:	80 93 68 02 	sts	0x0268, r24
    1318:	90 93 69 02 	sts	0x0269, r25
				
				D = error - perror;
    131c:	c4 01       	movw	r24, r8
    131e:	b3 01       	movw	r22, r6
    1320:	20 91 4a 02 	lds	r18, 0x024A
    1324:	30 91 4b 02 	lds	r19, 0x024B
    1328:	40 91 4c 02 	lds	r20, 0x024C
    132c:	50 91 4d 02 	lds	r21, 0x024D
    1330:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <__subsf3>
    1334:	7b 01       	movw	r14, r22
    1336:	8c 01       	movw	r16, r24
    1338:	60 93 50 02 	sts	0x0250, r22
    133c:	70 93 51 02 	sts	0x0251, r23
    1340:	80 93 52 02 	sts	0x0252, r24
    1344:	90 93 53 02 	sts	0x0253, r25
				
				correction = P + I + D;
    1348:	c2 01       	movw	r24, r4
    134a:	b1 01       	movw	r22, r2
    134c:	a6 01       	movw	r20, r12
    134e:	95 01       	movw	r18, r10
    1350:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <__addsf3>
    1354:	a8 01       	movw	r20, r16
    1356:	97 01       	movw	r18, r14
    1358:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <__addsf3>
    135c:	7b 01       	movw	r14, r22
    135e:	8c 01       	movw	r16, r24
    1360:	60 93 5c 02 	sts	0x025C, r22
    1364:	70 93 5d 02 	sts	0x025D, r23
    1368:	80 93 5e 02 	sts	0x025E, r24
    136c:	90 93 5f 02 	sts	0x025F, r25
				
				rightpulse =  basespeed + correction;
    1370:	60 91 36 01 	lds	r22, 0x0136
    1374:	70 91 37 01 	lds	r23, 0x0137
    1378:	80 e0       	ldi	r24, 0x00	; 0
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	0e 94 19 11 	call	0x2232	; 0x2232 <__floatunsisf>
    1380:	5b 01       	movw	r10, r22
    1382:	6c 01       	movw	r12, r24
    1384:	a8 01       	movw	r20, r16
    1386:	97 01       	movw	r18, r14
    1388:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <__addsf3>
    138c:	0e 94 8b 0c 	call	0x1916	; 0x1916 <__fixunssfsi>
    1390:	4b 01       	movw	r8, r22
    1392:	70 93 61 02 	sts	0x0261, r23
    1396:	60 93 60 02 	sts	0x0260, r22
				leftpulse = basespeed - correction;	
    139a:	c6 01       	movw	r24, r12
    139c:	b5 01       	movw	r22, r10
    139e:	a8 01       	movw	r20, r16
    13a0:	97 01       	movw	r18, r14
    13a2:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <__subsf3>
    13a6:	0e 94 8b 0c 	call	0x1916	; 0x1916 <__fixunssfsi>
    13aa:	9b 01       	movw	r18, r22
    13ac:	70 93 6b 02 	sts	0x026B, r23
    13b0:	60 93 6a 02 	sts	0x026A, r22
PORTD=(0<<PD0) | (1<<PD1) | (0<<PD6) | (0<<PD7);
    13b4:	82 e0       	ldi	r24, 0x02	; 2
    13b6:	82 bb       	out	0x12, r24	; 18
OCR1A = 255-leftpulse;
    13b8:	ce 01       	movw	r24, r28
    13ba:	82 1b       	sub	r24, r18
    13bc:	93 0b       	sbc	r25, r19
    13be:	9b bd       	out	0x2b, r25	; 43
    13c0:	8a bd       	out	0x2a, r24	; 42
				OCR1B = 255-rightpulse;
    13c2:	ce 01       	movw	r24, r28
    13c4:	88 19       	sub	r24, r8
    13c6:	99 09       	sbc	r25, r9
    13c8:	99 bd       	out	0x29, r25	; 41
    13ca:	88 bd       	out	0x28, r24	; 40

}


if((PINA==0b00100000||PINA==0b01000000||PINA==0b10000000||PINA==0b01100000||PINA==0b11000000||PINA==0b11011000||PINA==0b01110000||PINA==0b10011000))
    13cc:	89 b3       	in	r24, 0x19	; 25
    13ce:	80 32       	cpi	r24, 0x20	; 32
    13d0:	b1 f0       	breq	.+44     	; 0x13fe <main+0xa66>
    13d2:	89 b3       	in	r24, 0x19	; 25
    13d4:	80 34       	cpi	r24, 0x40	; 64
    13d6:	99 f0       	breq	.+38     	; 0x13fe <main+0xa66>
    13d8:	89 b3       	in	r24, 0x19	; 25
    13da:	80 38       	cpi	r24, 0x80	; 128
    13dc:	81 f0       	breq	.+32     	; 0x13fe <main+0xa66>
    13de:	89 b3       	in	r24, 0x19	; 25
    13e0:	80 36       	cpi	r24, 0x60	; 96
    13e2:	69 f0       	breq	.+26     	; 0x13fe <main+0xa66>
    13e4:	89 b3       	in	r24, 0x19	; 25
    13e6:	80 3c       	cpi	r24, 0xC0	; 192
    13e8:	51 f0       	breq	.+20     	; 0x13fe <main+0xa66>
    13ea:	89 b3       	in	r24, 0x19	; 25
    13ec:	88 3d       	cpi	r24, 0xD8	; 216
    13ee:	39 f0       	breq	.+14     	; 0x13fe <main+0xa66>
    13f0:	89 b3       	in	r24, 0x19	; 25
    13f2:	80 37       	cpi	r24, 0x70	; 112
    13f4:	21 f0       	breq	.+8      	; 0x13fe <main+0xa66>
    13f6:	89 b3       	in	r24, 0x19	; 25
    13f8:	88 39       	cpi	r24, 0x98	; 152
    13fa:	09 f0       	breq	.+2      	; 0x13fe <main+0xa66>
    13fc:	a2 c0       	rjmp	.+324    	; 0x1542 <main+0xbaa>
{
assign();
    13fe:	0e 94 86 02 	call	0x50c	; 0x50c <assign>
	CalcError();
    1402:	0e 94 6f 01 	call	0x2de	; 0x2de <CalcError>
				P = error * Kp;
    1406:	60 90 46 02 	lds	r6, 0x0246
    140a:	70 90 47 02 	lds	r7, 0x0247
    140e:	80 90 48 02 	lds	r8, 0x0248
    1412:	90 90 49 02 	lds	r9, 0x0249
    1416:	60 91 38 01 	lds	r22, 0x0138
    141a:	70 91 39 01 	lds	r23, 0x0139
    141e:	80 e0       	ldi	r24, 0x00	; 0
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	0e 94 19 11 	call	0x2232	; 0x2232 <__floatunsisf>
    1426:	9b 01       	movw	r18, r22
    1428:	ac 01       	movw	r20, r24
    142a:	c4 01       	movw	r24, r8
    142c:	b3 01       	movw	r22, r6
    142e:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <__mulsf3>
    1432:	1b 01       	movw	r2, r22
    1434:	2c 01       	movw	r4, r24
    1436:	60 93 70 02 	sts	0x0270, r22
    143a:	70 93 71 02 	sts	0x0271, r23
    143e:	80 93 72 02 	sts	0x0272, r24
    1442:	90 93 73 02 	sts	0x0273, r25
				
				I += error;
    1446:	c4 01       	movw	r24, r8
    1448:	b3 01       	movw	r22, r6
    144a:	20 91 66 02 	lds	r18, 0x0266
    144e:	30 91 67 02 	lds	r19, 0x0267
    1452:	40 91 68 02 	lds	r20, 0x0268
    1456:	50 91 69 02 	lds	r21, 0x0269
    145a:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <__addsf3>
    145e:	7b 01       	movw	r14, r22
    1460:	8c 01       	movw	r16, r24
				I = I * Ki;
    1462:	60 91 3a 01 	lds	r22, 0x013A
    1466:	70 91 3b 01 	lds	r23, 0x013B
    146a:	80 e0       	ldi	r24, 0x00	; 0
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	0e 94 19 11 	call	0x2232	; 0x2232 <__floatunsisf>
    1472:	9b 01       	movw	r18, r22
    1474:	ac 01       	movw	r20, r24
    1476:	c8 01       	movw	r24, r16
    1478:	b7 01       	movw	r22, r14
    147a:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <__mulsf3>
    147e:	5b 01       	movw	r10, r22
    1480:	6c 01       	movw	r12, r24
    1482:	60 93 66 02 	sts	0x0266, r22
    1486:	70 93 67 02 	sts	0x0267, r23
    148a:	80 93 68 02 	sts	0x0268, r24
    148e:	90 93 69 02 	sts	0x0269, r25
				
				D = error - perror;
    1492:	c4 01       	movw	r24, r8
    1494:	b3 01       	movw	r22, r6
    1496:	20 91 4a 02 	lds	r18, 0x024A
    149a:	30 91 4b 02 	lds	r19, 0x024B
    149e:	40 91 4c 02 	lds	r20, 0x024C
    14a2:	50 91 4d 02 	lds	r21, 0x024D
    14a6:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <__subsf3>
    14aa:	7b 01       	movw	r14, r22
    14ac:	8c 01       	movw	r16, r24
    14ae:	60 93 50 02 	sts	0x0250, r22
    14b2:	70 93 51 02 	sts	0x0251, r23
    14b6:	80 93 52 02 	sts	0x0252, r24
    14ba:	90 93 53 02 	sts	0x0253, r25
				
				correction = P + I + D;
    14be:	c2 01       	movw	r24, r4
    14c0:	b1 01       	movw	r22, r2
    14c2:	a6 01       	movw	r20, r12
    14c4:	95 01       	movw	r18, r10
    14c6:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <__addsf3>
    14ca:	a8 01       	movw	r20, r16
    14cc:	97 01       	movw	r18, r14
    14ce:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <__addsf3>
    14d2:	7b 01       	movw	r14, r22
    14d4:	8c 01       	movw	r16, r24
    14d6:	60 93 5c 02 	sts	0x025C, r22
    14da:	70 93 5d 02 	sts	0x025D, r23
    14de:	80 93 5e 02 	sts	0x025E, r24
    14e2:	90 93 5f 02 	sts	0x025F, r25
				
				rightpulse =  basespeed + correction;
    14e6:	60 91 36 01 	lds	r22, 0x0136
    14ea:	70 91 37 01 	lds	r23, 0x0137
    14ee:	80 e0       	ldi	r24, 0x00	; 0
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	0e 94 19 11 	call	0x2232	; 0x2232 <__floatunsisf>
    14f6:	5b 01       	movw	r10, r22
    14f8:	6c 01       	movw	r12, r24
    14fa:	a8 01       	movw	r20, r16
    14fc:	97 01       	movw	r18, r14
    14fe:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <__addsf3>
    1502:	0e 94 8b 0c 	call	0x1916	; 0x1916 <__fixunssfsi>
    1506:	4b 01       	movw	r8, r22
    1508:	70 93 61 02 	sts	0x0261, r23
    150c:	60 93 60 02 	sts	0x0260, r22
				leftpulse = basespeed - correction;	
    1510:	c6 01       	movw	r24, r12
    1512:	b5 01       	movw	r22, r10
    1514:	a8 01       	movw	r20, r16
    1516:	97 01       	movw	r18, r14
    1518:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <__subsf3>
    151c:	0e 94 8b 0c 	call	0x1916	; 0x1916 <__fixunssfsi>
    1520:	9b 01       	movw	r18, r22
    1522:	70 93 6b 02 	sts	0x026B, r23
    1526:	60 93 6a 02 	sts	0x026A, r22
PORTD=(0<<PD0) | (0<<PD1) | (0<<PD6) | (1<<PD7);
    152a:	80 e8       	ldi	r24, 0x80	; 128
    152c:	82 bb       	out	0x12, r24	; 18
OCR1A = 255-leftpulse;
    152e:	ce 01       	movw	r24, r28
    1530:	82 1b       	sub	r24, r18
    1532:	93 0b       	sbc	r25, r19
    1534:	9b bd       	out	0x2b, r25	; 43
    1536:	8a bd       	out	0x2a, r24	; 42
				OCR1B = 255-rightpulse;
    1538:	ce 01       	movw	r24, r28
    153a:	88 19       	sub	r24, r8
    153c:	99 09       	sbc	r25, r9
    153e:	99 bd       	out	0x29, r25	; 41
    1540:	88 bd       	out	0x28, r24	; 40
    1542:	84 ec       	ldi	r24, 0xC4	; 196
    1544:	99 e0       	ldi	r25, 0x09	; 9
    1546:	01 97       	sbiw	r24, 0x01	; 1
    1548:	f1 f7       	brne	.-4      	; 0x1546 <main+0xbae>
    154a:	7d ca       	rjmp	.-2822   	; 0xa46 <main+0xae>

0000154c <__vector_2>:
	

}

SIGNAL (SIG_INTERRUPT1)				// right switch	
{
    154c:	1f 92       	push	r1
    154e:	0f 92       	push	r0
    1550:	0f b6       	in	r0, 0x3f	; 63
    1552:	0f 92       	push	r0
    1554:	11 24       	eor	r1, r1
    1556:	2f 93       	push	r18
    1558:	3f 93       	push	r19
    155a:	4f 93       	push	r20
    155c:	5f 93       	push	r21
    155e:	6f 93       	push	r22
    1560:	7f 93       	push	r23
    1562:	8f 93       	push	r24
    1564:	9f 93       	push	r25
    1566:	af 93       	push	r26
    1568:	bf 93       	push	r27
    156a:	ef 93       	push	r30
    156c:	ff 93       	push	r31
    156e:	20 e0       	ldi	r18, 0x00	; 0
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	48 ea       	ldi	r20, 0xA8	; 168
    1574:	51 e6       	ldi	r21, 0x61	; 97
    1576:	05 c0       	rjmp	.+10     	; 0x1582 <__vector_2+0x36>
    1578:	ca 01       	movw	r24, r20
    157a:	01 97       	sbiw	r24, 0x01	; 1
    157c:	f1 f7       	brne	.-4      	; 0x157a <__vector_2+0x2e>
    157e:	2f 5f       	subi	r18, 0xFF	; 255
    1580:	3f 4f       	sbci	r19, 0xFF	; 255
    1582:	23 30       	cpi	r18, 0x03	; 3
    1584:	31 05       	cpc	r19, r1
    1586:	c1 f7       	brne	.-16     	; 0x1578 <__vector_2+0x2c>
	delay(0.3);
	
	switch(menu)
    1588:	80 91 4e 02 	lds	r24, 0x024E
    158c:	90 91 4f 02 	lds	r25, 0x024F
    1590:	88 32       	cpi	r24, 0x28	; 40
    1592:	91 05       	cpc	r25, r1
    1594:	99 f1       	breq	.+102    	; 0x15fc <__vector_2+0xb0>
    1596:	89 32       	cpi	r24, 0x29	; 41
    1598:	91 05       	cpc	r25, r1
    159a:	b0 f4       	brcc	.+44     	; 0x15c8 <__vector_2+0x7c>
    159c:	84 31       	cpi	r24, 0x14	; 20
    159e:	91 05       	cpc	r25, r1
    15a0:	69 f1       	breq	.+90     	; 0x15fc <__vector_2+0xb0>
    15a2:	85 31       	cpi	r24, 0x15	; 21
    15a4:	91 05       	cpc	r25, r1
    15a6:	30 f4       	brcc	.+12     	; 0x15b4 <__vector_2+0x68>
    15a8:	00 97       	sbiw	r24, 0x00	; 0
    15aa:	71 f1       	breq	.+92     	; 0x1608 <__vector_2+0xbc>
    15ac:	0a 97       	sbiw	r24, 0x0a	; 10
    15ae:	09 f0       	breq	.+2      	; 0x15b2 <__vector_2+0x66>
    15b0:	5f c0       	rjmp	.+190    	; 0x1670 <__vector_2+0x124>
    15b2:	2a c0       	rjmp	.+84     	; 0x1608 <__vector_2+0xbc>
    15b4:	8e 31       	cpi	r24, 0x1E	; 30
    15b6:	91 05       	cpc	r25, r1
    15b8:	09 f1       	breq	.+66     	; 0x15fc <__vector_2+0xb0>
    15ba:	83 32       	cpi	r24, 0x23	; 35
    15bc:	91 05       	cpc	r25, r1
    15be:	89 f1       	breq	.+98     	; 0x1622 <__vector_2+0xd6>
    15c0:	49 97       	sbiw	r24, 0x19	; 25
    15c2:	09 f0       	breq	.+2      	; 0x15c6 <__vector_2+0x7a>
    15c4:	55 c0       	rjmp	.+170    	; 0x1670 <__vector_2+0x124>
    15c6:	23 c0       	rjmp	.+70     	; 0x160e <__vector_2+0xc2>
    15c8:	8c 33       	cpi	r24, 0x3C	; 60
    15ca:	91 05       	cpc	r25, r1
    15cc:	b9 f0       	breq	.+46     	; 0x15fc <__vector_2+0xb0>
    15ce:	8d 33       	cpi	r24, 0x3D	; 61
    15d0:	91 05       	cpc	r25, r1
    15d2:	50 f4       	brcc	.+20     	; 0x15e8 <__vector_2+0x9c>
    15d4:	82 33       	cpi	r24, 0x32	; 50
    15d6:	91 05       	cpc	r25, r1
    15d8:	89 f0       	breq	.+34     	; 0x15fc <__vector_2+0xb0>
    15da:	87 33       	cpi	r24, 0x37	; 55
    15dc:	91 05       	cpc	r25, r1
    15de:	a9 f1       	breq	.+106    	; 0x164a <__vector_2+0xfe>
    15e0:	8d 97       	sbiw	r24, 0x2d	; 45
    15e2:	09 f0       	breq	.+2      	; 0x15e6 <__vector_2+0x9a>
    15e4:	45 c0       	rjmp	.+138    	; 0x1670 <__vector_2+0x124>
    15e6:	27 c0       	rjmp	.+78     	; 0x1636 <__vector_2+0xea>
    15e8:	86 34       	cpi	r24, 0x46	; 70
    15ea:	91 05       	cpc	r25, r1
    15ec:	39 f0       	breq	.+14     	; 0x15fc <__vector_2+0xb0>
    15ee:	80 35       	cpi	r24, 0x50	; 80
    15f0:	91 05       	cpc	r25, r1
    15f2:	51 f0       	breq	.+20     	; 0x1608 <__vector_2+0xbc>
    15f4:	81 34       	cpi	r24, 0x41	; 65
    15f6:	91 05       	cpc	r25, r1
    15f8:	d9 f5       	brne	.+118    	; 0x1670 <__vector_2+0x124>
    15fa:	31 c0       	rjmp	.+98     	; 0x165e <__vector_2+0x112>
		case 30:
		case 40:
		case 50:	
		case 60:
		case 70:
			menu += 10;	
    15fc:	0a 96       	adiw	r24, 0x0a	; 10
    15fe:	90 93 4f 02 	sts	0x024F, r25
    1602:	80 93 4e 02 	sts	0x024E, r24
    1606:	34 c0       	rjmp	.+104    	; 0x1670 <__vector_2+0x124>
			break;
		case 80:
			menu = 20;	
    1608:	84 e1       	ldi	r24, 0x14	; 20
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	f8 cf       	rjmp	.-16     	; 0x15fe <__vector_2+0xb2>
			break;
		case 25:
			maxspeed++;
    160e:	80 91 34 01 	lds	r24, 0x0134
    1612:	90 91 35 01 	lds	r25, 0x0135
    1616:	01 96       	adiw	r24, 0x01	; 1
    1618:	90 93 35 01 	sts	0x0135, r25
    161c:	80 93 34 01 	sts	0x0134, r24
    1620:	27 c0       	rjmp	.+78     	; 0x1670 <__vector_2+0x124>
			break;
		case 35:
			basespeed++;
    1622:	80 91 36 01 	lds	r24, 0x0136
    1626:	90 91 37 01 	lds	r25, 0x0137
    162a:	01 96       	adiw	r24, 0x01	; 1
    162c:	90 93 37 01 	sts	0x0137, r25
    1630:	80 93 36 01 	sts	0x0136, r24
    1634:	1d c0       	rjmp	.+58     	; 0x1670 <__vector_2+0x124>
			break;
		case 45:
			Kp++;
    1636:	80 91 38 01 	lds	r24, 0x0138
    163a:	90 91 39 01 	lds	r25, 0x0139
    163e:	01 96       	adiw	r24, 0x01	; 1
    1640:	90 93 39 01 	sts	0x0139, r25
    1644:	80 93 38 01 	sts	0x0138, r24
    1648:	13 c0       	rjmp	.+38     	; 0x1670 <__vector_2+0x124>
			break;
		case 55:
			Ki++;
    164a:	80 91 3a 01 	lds	r24, 0x013A
    164e:	90 91 3b 01 	lds	r25, 0x013B
    1652:	01 96       	adiw	r24, 0x01	; 1
    1654:	90 93 3b 01 	sts	0x013B, r25
    1658:	80 93 3a 01 	sts	0x013A, r24
    165c:	09 c0       	rjmp	.+18     	; 0x1670 <__vector_2+0x124>
			break;
		case 65:
			Kd++;
    165e:	80 91 3c 01 	lds	r24, 0x013C
    1662:	90 91 3d 01 	lds	r25, 0x013D
    1666:	01 96       	adiw	r24, 0x01	; 1
    1668:	90 93 3d 01 	sts	0x013D, r25
    166c:	80 93 3c 01 	sts	0x013C, r24
			break;
	}
	DispMenu(menu);
    1670:	80 91 4e 02 	lds	r24, 0x024E
    1674:	90 91 4f 02 	lds	r25, 0x024F
    1678:	0e 94 40 03 	call	0x680	; 0x680 <DispMenu>
}
    167c:	ff 91       	pop	r31
    167e:	ef 91       	pop	r30
    1680:	bf 91       	pop	r27
    1682:	af 91       	pop	r26
    1684:	9f 91       	pop	r25
    1686:	8f 91       	pop	r24
    1688:	7f 91       	pop	r23
    168a:	6f 91       	pop	r22
    168c:	5f 91       	pop	r21
    168e:	4f 91       	pop	r20
    1690:	3f 91       	pop	r19
    1692:	2f 91       	pop	r18
    1694:	0f 90       	pop	r0
    1696:	0f be       	out	0x3f, r0	; 63
    1698:	0f 90       	pop	r0
    169a:	1f 90       	pop	r1
    169c:	18 95       	reti

0000169e <__vector_18>:
	}
	DispMenu(menu);
}

SIGNAL (SIG_INTERRUPT2)						// middle switch		
{
    169e:	1f 92       	push	r1
    16a0:	0f 92       	push	r0
    16a2:	0f b6       	in	r0, 0x3f	; 63
    16a4:	0f 92       	push	r0
    16a6:	11 24       	eor	r1, r1
    16a8:	2f 93       	push	r18
    16aa:	3f 93       	push	r19
    16ac:	4f 93       	push	r20
    16ae:	5f 93       	push	r21
    16b0:	6f 93       	push	r22
    16b2:	7f 93       	push	r23
    16b4:	8f 93       	push	r24
    16b6:	9f 93       	push	r25
    16b8:	af 93       	push	r26
    16ba:	bf 93       	push	r27
    16bc:	ef 93       	push	r30
    16be:	ff 93       	push	r31
    16c0:	20 e0       	ldi	r18, 0x00	; 0
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	48 ea       	ldi	r20, 0xA8	; 168
    16c6:	51 e6       	ldi	r21, 0x61	; 97
    16c8:	05 c0       	rjmp	.+10     	; 0x16d4 <__vector_18+0x36>
    16ca:	ca 01       	movw	r24, r20
    16cc:	01 97       	sbiw	r24, 0x01	; 1
    16ce:	f1 f7       	brne	.-4      	; 0x16cc <__vector_18+0x2e>
    16d0:	2f 5f       	subi	r18, 0xFF	; 255
    16d2:	3f 4f       	sbci	r19, 0xFF	; 255
    16d4:	23 30       	cpi	r18, 0x03	; 3
    16d6:	31 05       	cpc	r19, r1
    16d8:	c1 f7       	brne	.-16     	; 0x16ca <__vector_18+0x2c>
		delay(0.3);	
		switch(menu)
    16da:	80 91 4e 02 	lds	r24, 0x024E
    16de:	90 91 4f 02 	lds	r25, 0x024F
    16e2:	82 33       	cpi	r24, 0x32	; 50
    16e4:	91 05       	cpc	r25, r1
    16e6:	81 f1       	breq	.+96     	; 0x1748 <__vector_18+0xaa>
    16e8:	83 33       	cpi	r24, 0x33	; 51
    16ea:	91 05       	cpc	r25, r1
    16ec:	b8 f4       	brcc	.+46     	; 0x171c <__vector_18+0x7e>
    16ee:	8e 31       	cpi	r24, 0x1E	; 30
    16f0:	91 05       	cpc	r25, r1
    16f2:	51 f1       	breq	.+84     	; 0x1748 <__vector_18+0xaa>
    16f4:	8f 31       	cpi	r24, 0x1F	; 31
    16f6:	91 05       	cpc	r25, r1
    16f8:	38 f4       	brcc	.+14     	; 0x1708 <__vector_18+0x6a>
    16fa:	84 31       	cpi	r24, 0x14	; 20
    16fc:	91 05       	cpc	r25, r1
    16fe:	21 f1       	breq	.+72     	; 0x1748 <__vector_18+0xaa>
    1700:	89 31       	cpi	r24, 0x19	; 25
    1702:	91 05       	cpc	r25, r1
    1704:	69 f5       	brne	.+90     	; 0x1760 <__vector_18+0xc2>
    1706:	27 c0       	rjmp	.+78     	; 0x1756 <__vector_18+0xb8>
    1708:	88 32       	cpi	r24, 0x28	; 40
    170a:	91 05       	cpc	r25, r1
    170c:	e9 f0       	breq	.+58     	; 0x1748 <__vector_18+0xaa>
    170e:	8d 32       	cpi	r24, 0x2D	; 45
    1710:	91 05       	cpc	r25, r1
    1712:	09 f1       	breq	.+66     	; 0x1756 <__vector_18+0xb8>
    1714:	83 32       	cpi	r24, 0x23	; 35
    1716:	91 05       	cpc	r25, r1
    1718:	19 f5       	brne	.+70     	; 0x1760 <__vector_18+0xc2>
    171a:	1d c0       	rjmp	.+58     	; 0x1756 <__vector_18+0xb8>
    171c:	81 34       	cpi	r24, 0x41	; 65
    171e:	91 05       	cpc	r25, r1
    1720:	d1 f0       	breq	.+52     	; 0x1756 <__vector_18+0xb8>
    1722:	82 34       	cpi	r24, 0x42	; 66
    1724:	91 05       	cpc	r25, r1
    1726:	38 f4       	brcc	.+14     	; 0x1736 <__vector_18+0x98>
    1728:	87 33       	cpi	r24, 0x37	; 55
    172a:	91 05       	cpc	r25, r1
    172c:	a1 f0       	breq	.+40     	; 0x1756 <__vector_18+0xb8>
    172e:	8c 33       	cpi	r24, 0x3C	; 60
    1730:	91 05       	cpc	r25, r1
    1732:	b1 f4       	brne	.+44     	; 0x1760 <__vector_18+0xc2>
    1734:	09 c0       	rjmp	.+18     	; 0x1748 <__vector_18+0xaa>
    1736:	8b 34       	cpi	r24, 0x4B	; 75
    1738:	91 05       	cpc	r25, r1
    173a:	69 f0       	breq	.+26     	; 0x1756 <__vector_18+0xb8>
    173c:	80 35       	cpi	r24, 0x50	; 80
    173e:	91 05       	cpc	r25, r1
    1740:	29 f0       	breq	.+10     	; 0x174c <__vector_18+0xae>
    1742:	86 34       	cpi	r24, 0x46	; 70
    1744:	91 05       	cpc	r25, r1
    1746:	61 f4       	brne	.+24     	; 0x1760 <__vector_18+0xc2>
			case 30:
			case 40:
			case 50:
			case 60:
			case 70:
				menu += 5;
    1748:	05 96       	adiw	r24, 0x05	; 5
    174a:	06 c0       	rjmp	.+12     	; 0x1758 <__vector_18+0xba>
				break;
			case 80:
				menu = 0;
    174c:	10 92 4f 02 	sts	0x024F, r1
    1750:	10 92 4e 02 	sts	0x024E, r1
    1754:	05 c0       	rjmp	.+10     	; 0x1760 <__vector_18+0xc2>
			case 35:
			case 45:
			case 55:
			case 65:
			case 75:
				menu -= 5;
    1756:	05 97       	sbiw	r24, 0x05	; 5
    1758:	90 93 4f 02 	sts	0x024F, r25
    175c:	80 93 4e 02 	sts	0x024E, r24
				break;				
		}
		DispMenu(menu);		
    1760:	80 91 4e 02 	lds	r24, 0x024E
    1764:	90 91 4f 02 	lds	r25, 0x024F
    1768:	0e 94 40 03 	call	0x680	; 0x680 <DispMenu>
		
	

}
    176c:	ff 91       	pop	r31
    176e:	ef 91       	pop	r30
    1770:	bf 91       	pop	r27
    1772:	af 91       	pop	r26
    1774:	9f 91       	pop	r25
    1776:	8f 91       	pop	r24
    1778:	7f 91       	pop	r23
    177a:	6f 91       	pop	r22
    177c:	5f 91       	pop	r21
    177e:	4f 91       	pop	r20
    1780:	3f 91       	pop	r19
    1782:	2f 91       	pop	r18
    1784:	0f 90       	pop	r0
    1786:	0f be       	out	0x3f, r0	; 63
    1788:	0f 90       	pop	r0
    178a:	1f 90       	pop	r1
    178c:	18 95       	reti

0000178e <__vector_1>:
s8=1;
}
}

SIGNAL (SIG_INTERRUPT0)						// left switch
{
    178e:	1f 92       	push	r1
    1790:	0f 92       	push	r0
    1792:	0f b6       	in	r0, 0x3f	; 63
    1794:	0f 92       	push	r0
    1796:	11 24       	eor	r1, r1
    1798:	2f 93       	push	r18
    179a:	3f 93       	push	r19
    179c:	4f 93       	push	r20
    179e:	5f 93       	push	r21
    17a0:	6f 93       	push	r22
    17a2:	7f 93       	push	r23
    17a4:	8f 93       	push	r24
    17a6:	9f 93       	push	r25
    17a8:	af 93       	push	r26
    17aa:	bf 93       	push	r27
    17ac:	ef 93       	push	r30
    17ae:	ff 93       	push	r31
    17b0:	20 e0       	ldi	r18, 0x00	; 0
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	48 ea       	ldi	r20, 0xA8	; 168
    17b6:	51 e6       	ldi	r21, 0x61	; 97
    17b8:	05 c0       	rjmp	.+10     	; 0x17c4 <__vector_1+0x36>
    17ba:	ca 01       	movw	r24, r20
    17bc:	01 97       	sbiw	r24, 0x01	; 1
    17be:	f1 f7       	brne	.-4      	; 0x17bc <__vector_1+0x2e>
    17c0:	2f 5f       	subi	r18, 0xFF	; 255
    17c2:	3f 4f       	sbci	r19, 0xFF	; 255
    17c4:	23 30       	cpi	r18, 0x03	; 3
    17c6:	31 05       	cpc	r19, r1
    17c8:	c1 f7       	brne	.-16     	; 0x17ba <__vector_1+0x2c>
	delay(0.3);	
	
	switch(menu)
    17ca:	80 91 4e 02 	lds	r24, 0x024E
    17ce:	90 91 4f 02 	lds	r25, 0x024F
    17d2:	88 32       	cpi	r24, 0x28	; 40
    17d4:	91 05       	cpc	r25, r1
    17d6:	09 f4       	brne	.+2      	; 0x17da <__vector_1+0x4c>
    17d8:	54 c0       	rjmp	.+168    	; 0x1882 <__vector_1+0xf4>
    17da:	89 32       	cpi	r24, 0x29	; 41
    17dc:	91 05       	cpc	r25, r1
    17de:	c8 f4       	brcc	.+50     	; 0x1812 <__vector_1+0x84>
    17e0:	84 31       	cpi	r24, 0x14	; 20
    17e2:	91 05       	cpc	r25, r1
    17e4:	09 f4       	brne	.+2      	; 0x17e8 <__vector_1+0x5a>
    17e6:	46 c0       	rjmp	.+140    	; 0x1874 <__vector_1+0xe6>
    17e8:	85 31       	cpi	r24, 0x15	; 21
    17ea:	91 05       	cpc	r25, r1
    17ec:	30 f4       	brcc	.+12     	; 0x17fa <__vector_1+0x6c>
    17ee:	00 97       	sbiw	r24, 0x00	; 0
    17f0:	61 f1       	breq	.+88     	; 0x184a <__vector_1+0xbc>
    17f2:	0a 97       	sbiw	r24, 0x0a	; 10
    17f4:	09 f0       	breq	.+2      	; 0x17f8 <__vector_1+0x6a>
    17f6:	78 c0       	rjmp	.+240    	; 0x18e8 <__vector_1+0x15a>
    17f8:	31 c0       	rjmp	.+98     	; 0x185c <__vector_1+0xce>
    17fa:	8e 31       	cpi	r24, 0x1E	; 30
    17fc:	91 05       	cpc	r25, r1
    17fe:	09 f4       	brne	.+2      	; 0x1802 <__vector_1+0x74>
    1800:	40 c0       	rjmp	.+128    	; 0x1882 <__vector_1+0xf4>
    1802:	83 32       	cpi	r24, 0x23	; 35
    1804:	91 05       	cpc	r25, r1
    1806:	09 f4       	brne	.+2      	; 0x180a <__vector_1+0x7c>
    1808:	48 c0       	rjmp	.+144    	; 0x189a <__vector_1+0x10c>
    180a:	49 97       	sbiw	r24, 0x19	; 25
    180c:	09 f0       	breq	.+2      	; 0x1810 <__vector_1+0x82>
    180e:	6c c0       	rjmp	.+216    	; 0x18e8 <__vector_1+0x15a>
    1810:	3a c0       	rjmp	.+116    	; 0x1886 <__vector_1+0xf8>
    1812:	8c 33       	cpi	r24, 0x3C	; 60
    1814:	91 05       	cpc	r25, r1
    1816:	a9 f1       	breq	.+106    	; 0x1882 <__vector_1+0xf4>
    1818:	8d 33       	cpi	r24, 0x3D	; 61
    181a:	91 05       	cpc	r25, r1
    181c:	58 f4       	brcc	.+22     	; 0x1834 <__vector_1+0xa6>
    181e:	82 33       	cpi	r24, 0x32	; 50
    1820:	91 05       	cpc	r25, r1
    1822:	79 f1       	breq	.+94     	; 0x1882 <__vector_1+0xf4>
    1824:	87 33       	cpi	r24, 0x37	; 55
    1826:	91 05       	cpc	r25, r1
    1828:	09 f4       	brne	.+2      	; 0x182c <__vector_1+0x9e>
    182a:	4b c0       	rjmp	.+150    	; 0x18c2 <__vector_1+0x134>
    182c:	8d 97       	sbiw	r24, 0x2d	; 45
    182e:	09 f0       	breq	.+2      	; 0x1832 <__vector_1+0xa4>
    1830:	5b c0       	rjmp	.+182    	; 0x18e8 <__vector_1+0x15a>
    1832:	3d c0       	rjmp	.+122    	; 0x18ae <__vector_1+0x120>
    1834:	86 34       	cpi	r24, 0x46	; 70
    1836:	91 05       	cpc	r25, r1
    1838:	21 f1       	breq	.+72     	; 0x1882 <__vector_1+0xf4>
    183a:	80 35       	cpi	r24, 0x50	; 80
    183c:	91 05       	cpc	r25, r1
    183e:	09 f1       	breq	.+66     	; 0x1882 <__vector_1+0xf4>
    1840:	81 34       	cpi	r24, 0x41	; 65
    1842:	91 05       	cpc	r25, r1
    1844:	09 f0       	breq	.+2      	; 0x1848 <__vector_1+0xba>
    1846:	50 c0       	rjmp	.+160    	; 0x18e8 <__vector_1+0x15a>
    1848:	46 c0       	rjmp	.+140    	; 0x18d6 <__vector_1+0x148>
	{
		case 0:
			if(pause == true)
    184a:	80 91 32 01 	lds	r24, 0x0132
    184e:	88 23       	and	r24, r24
    1850:	11 f0       	breq	.+4      	; 0x1856 <__vector_1+0xc8>
				pause = false;
    1852:	10 92 32 01 	sts	0x0132, r1
			menu = 10;
    1856:	8a e0       	ldi	r24, 0x0A	; 10
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	0e c0       	rjmp	.+28     	; 0x1878 <__vector_1+0xea>
			break;
		case 10:
			if(pause == false)
    185c:	80 91 32 01 	lds	r24, 0x0132
    1860:	88 23       	and	r24, r24
    1862:	19 f4       	brne	.+6      	; 0x186a <__vector_1+0xdc>
				pause = true;	
    1864:	81 e0       	ldi	r24, 0x01	; 1
    1866:	80 93 32 01 	sts	0x0132, r24
			menu = 0;
    186a:	10 92 4f 02 	sts	0x024F, r1
    186e:	10 92 4e 02 	sts	0x024E, r1
    1872:	3a c0       	rjmp	.+116    	; 0x18e8 <__vector_1+0x15a>
			break;
		case 20:
			menu = 80;
    1874:	80 e5       	ldi	r24, 0x50	; 80
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	90 93 4f 02 	sts	0x024F, r25
    187c:	80 93 4e 02 	sts	0x024E, r24
    1880:	33 c0       	rjmp	.+102    	; 0x18e8 <__vector_1+0x15a>
		case 40:
		case 50:			
		case 60:
		case 70:
		case 80:
			menu -= 10;	
    1882:	0a 97       	sbiw	r24, 0x0a	; 10
    1884:	f9 cf       	rjmp	.-14     	; 0x1878 <__vector_1+0xea>
			break;
		case 25:
			maxspeed--;
    1886:	80 91 34 01 	lds	r24, 0x0134
    188a:	90 91 35 01 	lds	r25, 0x0135
    188e:	01 97       	sbiw	r24, 0x01	; 1
    1890:	90 93 35 01 	sts	0x0135, r25
    1894:	80 93 34 01 	sts	0x0134, r24
    1898:	27 c0       	rjmp	.+78     	; 0x18e8 <__vector_1+0x15a>
			break;
		case 35:
			basespeed--;
    189a:	80 91 36 01 	lds	r24, 0x0136
    189e:	90 91 37 01 	lds	r25, 0x0137
    18a2:	01 97       	sbiw	r24, 0x01	; 1
    18a4:	90 93 37 01 	sts	0x0137, r25
    18a8:	80 93 36 01 	sts	0x0136, r24
    18ac:	1d c0       	rjmp	.+58     	; 0x18e8 <__vector_1+0x15a>
			break;
		case 45:
			Kp--;
    18ae:	80 91 38 01 	lds	r24, 0x0138
    18b2:	90 91 39 01 	lds	r25, 0x0139
    18b6:	01 97       	sbiw	r24, 0x01	; 1
    18b8:	90 93 39 01 	sts	0x0139, r25
    18bc:	80 93 38 01 	sts	0x0138, r24
    18c0:	13 c0       	rjmp	.+38     	; 0x18e8 <__vector_1+0x15a>
			break;
		case 55:
			Ki--;
    18c2:	80 91 3a 01 	lds	r24, 0x013A
    18c6:	90 91 3b 01 	lds	r25, 0x013B
    18ca:	01 97       	sbiw	r24, 0x01	; 1
    18cc:	90 93 3b 01 	sts	0x013B, r25
    18d0:	80 93 3a 01 	sts	0x013A, r24
    18d4:	09 c0       	rjmp	.+18     	; 0x18e8 <__vector_1+0x15a>
			break;
		case 65:
			Kd--;
    18d6:	80 91 3c 01 	lds	r24, 0x013C
    18da:	90 91 3d 01 	lds	r25, 0x013D
    18de:	01 97       	sbiw	r24, 0x01	; 1
    18e0:	90 93 3d 01 	sts	0x013D, r25
    18e4:	80 93 3c 01 	sts	0x013C, r24
			break;
	}
	DispMenu(menu);
    18e8:	80 91 4e 02 	lds	r24, 0x024E
    18ec:	90 91 4f 02 	lds	r25, 0x024F
    18f0:	0e 94 40 03 	call	0x680	; 0x680 <DispMenu>
}
    18f4:	ff 91       	pop	r31
    18f6:	ef 91       	pop	r30
    18f8:	bf 91       	pop	r27
    18fa:	af 91       	pop	r26
    18fc:	9f 91       	pop	r25
    18fe:	8f 91       	pop	r24
    1900:	7f 91       	pop	r23
    1902:	6f 91       	pop	r22
    1904:	5f 91       	pop	r21
    1906:	4f 91       	pop	r20
    1908:	3f 91       	pop	r19
    190a:	2f 91       	pop	r18
    190c:	0f 90       	pop	r0
    190e:	0f be       	out	0x3f, r0	; 63
    1910:	0f 90       	pop	r0
    1912:	1f 90       	pop	r1
    1914:	18 95       	reti

00001916 <__fixunssfsi>:
    1916:	ef 92       	push	r14
    1918:	ff 92       	push	r15
    191a:	0f 93       	push	r16
    191c:	1f 93       	push	r17
    191e:	7b 01       	movw	r14, r22
    1920:	8c 01       	movw	r16, r24
    1922:	20 e0       	ldi	r18, 0x00	; 0
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	40 e0       	ldi	r20, 0x00	; 0
    1928:	5f e4       	ldi	r21, 0x4F	; 79
    192a:	0e 94 07 10 	call	0x200e	; 0x200e <__gesf2>
    192e:	88 23       	and	r24, r24
    1930:	8c f0       	brlt	.+34     	; 0x1954 <__fixunssfsi+0x3e>
    1932:	c8 01       	movw	r24, r16
    1934:	b7 01       	movw	r22, r14
    1936:	20 e0       	ldi	r18, 0x00	; 0
    1938:	30 e0       	ldi	r19, 0x00	; 0
    193a:	40 e0       	ldi	r20, 0x00	; 0
    193c:	5f e4       	ldi	r21, 0x4F	; 79
    193e:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <__subsf3>
    1942:	0e 94 c5 10 	call	0x218a	; 0x218a <__fixsfsi>
    1946:	9b 01       	movw	r18, r22
    1948:	ac 01       	movw	r20, r24
    194a:	20 50       	subi	r18, 0x00	; 0
    194c:	30 40       	sbci	r19, 0x00	; 0
    194e:	40 40       	sbci	r20, 0x00	; 0
    1950:	50 48       	sbci	r21, 0x80	; 128
    1952:	06 c0       	rjmp	.+12     	; 0x1960 <__fixunssfsi+0x4a>
    1954:	c8 01       	movw	r24, r16
    1956:	b7 01       	movw	r22, r14
    1958:	0e 94 c5 10 	call	0x218a	; 0x218a <__fixsfsi>
    195c:	9b 01       	movw	r18, r22
    195e:	ac 01       	movw	r20, r24
    1960:	b9 01       	movw	r22, r18
    1962:	ca 01       	movw	r24, r20
    1964:	1f 91       	pop	r17
    1966:	0f 91       	pop	r16
    1968:	ff 90       	pop	r15
    196a:	ef 90       	pop	r14
    196c:	08 95       	ret

0000196e <_fpadd_parts>:
    196e:	a0 e0       	ldi	r26, 0x00	; 0
    1970:	b0 e0       	ldi	r27, 0x00	; 0
    1972:	ed eb       	ldi	r30, 0xBD	; 189
    1974:	fc e0       	ldi	r31, 0x0C	; 12
    1976:	0c 94 ae 13 	jmp	0x275c	; 0x275c <__prologue_saves__>
    197a:	dc 01       	movw	r26, r24
    197c:	2b 01       	movw	r4, r22
    197e:	fa 01       	movw	r30, r20
    1980:	9c 91       	ld	r25, X
    1982:	92 30       	cpi	r25, 0x02	; 2
    1984:	08 f4       	brcc	.+2      	; 0x1988 <_fpadd_parts+0x1a>
    1986:	39 c1       	rjmp	.+626    	; 0x1bfa <_fpadd_parts+0x28c>
    1988:	eb 01       	movw	r28, r22
    198a:	88 81       	ld	r24, Y
    198c:	82 30       	cpi	r24, 0x02	; 2
    198e:	08 f4       	brcc	.+2      	; 0x1992 <_fpadd_parts+0x24>
    1990:	33 c1       	rjmp	.+614    	; 0x1bf8 <_fpadd_parts+0x28a>
    1992:	94 30       	cpi	r25, 0x04	; 4
    1994:	69 f4       	brne	.+26     	; 0x19b0 <_fpadd_parts+0x42>
    1996:	84 30       	cpi	r24, 0x04	; 4
    1998:	09 f0       	breq	.+2      	; 0x199c <_fpadd_parts+0x2e>
    199a:	2f c1       	rjmp	.+606    	; 0x1bfa <_fpadd_parts+0x28c>
    199c:	11 96       	adiw	r26, 0x01	; 1
    199e:	9c 91       	ld	r25, X
    19a0:	11 97       	sbiw	r26, 0x01	; 1
    19a2:	89 81       	ldd	r24, Y+1	; 0x01
    19a4:	98 17       	cp	r25, r24
    19a6:	09 f4       	brne	.+2      	; 0x19aa <_fpadd_parts+0x3c>
    19a8:	28 c1       	rjmp	.+592    	; 0x1bfa <_fpadd_parts+0x28c>
    19aa:	ae e3       	ldi	r26, 0x3E	; 62
    19ac:	b1 e0       	ldi	r27, 0x01	; 1
    19ae:	25 c1       	rjmp	.+586    	; 0x1bfa <_fpadd_parts+0x28c>
    19b0:	84 30       	cpi	r24, 0x04	; 4
    19b2:	09 f4       	brne	.+2      	; 0x19b6 <_fpadd_parts+0x48>
    19b4:	21 c1       	rjmp	.+578    	; 0x1bf8 <_fpadd_parts+0x28a>
    19b6:	82 30       	cpi	r24, 0x02	; 2
    19b8:	a9 f4       	brne	.+42     	; 0x19e4 <_fpadd_parts+0x76>
    19ba:	92 30       	cpi	r25, 0x02	; 2
    19bc:	09 f0       	breq	.+2      	; 0x19c0 <_fpadd_parts+0x52>
    19be:	1d c1       	rjmp	.+570    	; 0x1bfa <_fpadd_parts+0x28c>
    19c0:	9a 01       	movw	r18, r20
    19c2:	ad 01       	movw	r20, r26
    19c4:	88 e0       	ldi	r24, 0x08	; 8
    19c6:	ea 01       	movw	r28, r20
    19c8:	09 90       	ld	r0, Y+
    19ca:	ae 01       	movw	r20, r28
    19cc:	e9 01       	movw	r28, r18
    19ce:	09 92       	st	Y+, r0
    19d0:	9e 01       	movw	r18, r28
    19d2:	81 50       	subi	r24, 0x01	; 1
    19d4:	c1 f7       	brne	.-16     	; 0x19c6 <_fpadd_parts+0x58>
    19d6:	e2 01       	movw	r28, r4
    19d8:	89 81       	ldd	r24, Y+1	; 0x01
    19da:	11 96       	adiw	r26, 0x01	; 1
    19dc:	9c 91       	ld	r25, X
    19de:	89 23       	and	r24, r25
    19e0:	81 83       	std	Z+1, r24	; 0x01
    19e2:	08 c1       	rjmp	.+528    	; 0x1bf4 <_fpadd_parts+0x286>
    19e4:	92 30       	cpi	r25, 0x02	; 2
    19e6:	09 f4       	brne	.+2      	; 0x19ea <_fpadd_parts+0x7c>
    19e8:	07 c1       	rjmp	.+526    	; 0x1bf8 <_fpadd_parts+0x28a>
    19ea:	12 96       	adiw	r26, 0x02	; 2
    19ec:	2d 90       	ld	r2, X+
    19ee:	3c 90       	ld	r3, X
    19f0:	13 97       	sbiw	r26, 0x03	; 3
    19f2:	eb 01       	movw	r28, r22
    19f4:	8a 81       	ldd	r24, Y+2	; 0x02
    19f6:	9b 81       	ldd	r25, Y+3	; 0x03
    19f8:	14 96       	adiw	r26, 0x04	; 4
    19fa:	ad 90       	ld	r10, X+
    19fc:	bd 90       	ld	r11, X+
    19fe:	cd 90       	ld	r12, X+
    1a00:	dc 90       	ld	r13, X
    1a02:	17 97       	sbiw	r26, 0x07	; 7
    1a04:	ec 80       	ldd	r14, Y+4	; 0x04
    1a06:	fd 80       	ldd	r15, Y+5	; 0x05
    1a08:	0e 81       	ldd	r16, Y+6	; 0x06
    1a0a:	1f 81       	ldd	r17, Y+7	; 0x07
    1a0c:	91 01       	movw	r18, r2
    1a0e:	28 1b       	sub	r18, r24
    1a10:	39 0b       	sbc	r19, r25
    1a12:	b9 01       	movw	r22, r18
    1a14:	37 ff       	sbrs	r19, 7
    1a16:	04 c0       	rjmp	.+8      	; 0x1a20 <_fpadd_parts+0xb2>
    1a18:	66 27       	eor	r22, r22
    1a1a:	77 27       	eor	r23, r23
    1a1c:	62 1b       	sub	r22, r18
    1a1e:	73 0b       	sbc	r23, r19
    1a20:	60 32       	cpi	r22, 0x20	; 32
    1a22:	71 05       	cpc	r23, r1
    1a24:	0c f0       	brlt	.+2      	; 0x1a28 <_fpadd_parts+0xba>
    1a26:	61 c0       	rjmp	.+194    	; 0x1aea <_fpadd_parts+0x17c>
    1a28:	12 16       	cp	r1, r18
    1a2a:	13 06       	cpc	r1, r19
    1a2c:	6c f5       	brge	.+90     	; 0x1a88 <_fpadd_parts+0x11a>
    1a2e:	37 01       	movw	r6, r14
    1a30:	48 01       	movw	r8, r16
    1a32:	06 2e       	mov	r0, r22
    1a34:	04 c0       	rjmp	.+8      	; 0x1a3e <_fpadd_parts+0xd0>
    1a36:	96 94       	lsr	r9
    1a38:	87 94       	ror	r8
    1a3a:	77 94       	ror	r7
    1a3c:	67 94       	ror	r6
    1a3e:	0a 94       	dec	r0
    1a40:	d2 f7       	brpl	.-12     	; 0x1a36 <_fpadd_parts+0xc8>
    1a42:	21 e0       	ldi	r18, 0x01	; 1
    1a44:	30 e0       	ldi	r19, 0x00	; 0
    1a46:	40 e0       	ldi	r20, 0x00	; 0
    1a48:	50 e0       	ldi	r21, 0x00	; 0
    1a4a:	04 c0       	rjmp	.+8      	; 0x1a54 <_fpadd_parts+0xe6>
    1a4c:	22 0f       	add	r18, r18
    1a4e:	33 1f       	adc	r19, r19
    1a50:	44 1f       	adc	r20, r20
    1a52:	55 1f       	adc	r21, r21
    1a54:	6a 95       	dec	r22
    1a56:	d2 f7       	brpl	.-12     	; 0x1a4c <_fpadd_parts+0xde>
    1a58:	21 50       	subi	r18, 0x01	; 1
    1a5a:	30 40       	sbci	r19, 0x00	; 0
    1a5c:	40 40       	sbci	r20, 0x00	; 0
    1a5e:	50 40       	sbci	r21, 0x00	; 0
    1a60:	2e 21       	and	r18, r14
    1a62:	3f 21       	and	r19, r15
    1a64:	40 23       	and	r20, r16
    1a66:	51 23       	and	r21, r17
    1a68:	21 15       	cp	r18, r1
    1a6a:	31 05       	cpc	r19, r1
    1a6c:	41 05       	cpc	r20, r1
    1a6e:	51 05       	cpc	r21, r1
    1a70:	21 f0       	breq	.+8      	; 0x1a7a <_fpadd_parts+0x10c>
    1a72:	21 e0       	ldi	r18, 0x01	; 1
    1a74:	30 e0       	ldi	r19, 0x00	; 0
    1a76:	40 e0       	ldi	r20, 0x00	; 0
    1a78:	50 e0       	ldi	r21, 0x00	; 0
    1a7a:	79 01       	movw	r14, r18
    1a7c:	8a 01       	movw	r16, r20
    1a7e:	e6 28       	or	r14, r6
    1a80:	f7 28       	or	r15, r7
    1a82:	08 29       	or	r16, r8
    1a84:	19 29       	or	r17, r9
    1a86:	3c c0       	rjmp	.+120    	; 0x1b00 <_fpadd_parts+0x192>
    1a88:	23 2b       	or	r18, r19
    1a8a:	d1 f1       	breq	.+116    	; 0x1b00 <_fpadd_parts+0x192>
    1a8c:	26 0e       	add	r2, r22
    1a8e:	37 1e       	adc	r3, r23
    1a90:	35 01       	movw	r6, r10
    1a92:	46 01       	movw	r8, r12
    1a94:	06 2e       	mov	r0, r22
    1a96:	04 c0       	rjmp	.+8      	; 0x1aa0 <_fpadd_parts+0x132>
    1a98:	96 94       	lsr	r9
    1a9a:	87 94       	ror	r8
    1a9c:	77 94       	ror	r7
    1a9e:	67 94       	ror	r6
    1aa0:	0a 94       	dec	r0
    1aa2:	d2 f7       	brpl	.-12     	; 0x1a98 <_fpadd_parts+0x12a>
    1aa4:	21 e0       	ldi	r18, 0x01	; 1
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	40 e0       	ldi	r20, 0x00	; 0
    1aaa:	50 e0       	ldi	r21, 0x00	; 0
    1aac:	04 c0       	rjmp	.+8      	; 0x1ab6 <_fpadd_parts+0x148>
    1aae:	22 0f       	add	r18, r18
    1ab0:	33 1f       	adc	r19, r19
    1ab2:	44 1f       	adc	r20, r20
    1ab4:	55 1f       	adc	r21, r21
    1ab6:	6a 95       	dec	r22
    1ab8:	d2 f7       	brpl	.-12     	; 0x1aae <_fpadd_parts+0x140>
    1aba:	21 50       	subi	r18, 0x01	; 1
    1abc:	30 40       	sbci	r19, 0x00	; 0
    1abe:	40 40       	sbci	r20, 0x00	; 0
    1ac0:	50 40       	sbci	r21, 0x00	; 0
    1ac2:	2a 21       	and	r18, r10
    1ac4:	3b 21       	and	r19, r11
    1ac6:	4c 21       	and	r20, r12
    1ac8:	5d 21       	and	r21, r13
    1aca:	21 15       	cp	r18, r1
    1acc:	31 05       	cpc	r19, r1
    1ace:	41 05       	cpc	r20, r1
    1ad0:	51 05       	cpc	r21, r1
    1ad2:	21 f0       	breq	.+8      	; 0x1adc <_fpadd_parts+0x16e>
    1ad4:	21 e0       	ldi	r18, 0x01	; 1
    1ad6:	30 e0       	ldi	r19, 0x00	; 0
    1ad8:	40 e0       	ldi	r20, 0x00	; 0
    1ada:	50 e0       	ldi	r21, 0x00	; 0
    1adc:	59 01       	movw	r10, r18
    1ade:	6a 01       	movw	r12, r20
    1ae0:	a6 28       	or	r10, r6
    1ae2:	b7 28       	or	r11, r7
    1ae4:	c8 28       	or	r12, r8
    1ae6:	d9 28       	or	r13, r9
    1ae8:	0b c0       	rjmp	.+22     	; 0x1b00 <_fpadd_parts+0x192>
    1aea:	82 15       	cp	r24, r2
    1aec:	93 05       	cpc	r25, r3
    1aee:	2c f0       	brlt	.+10     	; 0x1afa <_fpadd_parts+0x18c>
    1af0:	1c 01       	movw	r2, r24
    1af2:	aa 24       	eor	r10, r10
    1af4:	bb 24       	eor	r11, r11
    1af6:	65 01       	movw	r12, r10
    1af8:	03 c0       	rjmp	.+6      	; 0x1b00 <_fpadd_parts+0x192>
    1afa:	ee 24       	eor	r14, r14
    1afc:	ff 24       	eor	r15, r15
    1afe:	87 01       	movw	r16, r14
    1b00:	11 96       	adiw	r26, 0x01	; 1
    1b02:	9c 91       	ld	r25, X
    1b04:	d2 01       	movw	r26, r4
    1b06:	11 96       	adiw	r26, 0x01	; 1
    1b08:	8c 91       	ld	r24, X
    1b0a:	98 17       	cp	r25, r24
    1b0c:	09 f4       	brne	.+2      	; 0x1b10 <_fpadd_parts+0x1a2>
    1b0e:	45 c0       	rjmp	.+138    	; 0x1b9a <_fpadd_parts+0x22c>
    1b10:	99 23       	and	r25, r25
    1b12:	39 f0       	breq	.+14     	; 0x1b22 <_fpadd_parts+0x1b4>
    1b14:	a8 01       	movw	r20, r16
    1b16:	97 01       	movw	r18, r14
    1b18:	2a 19       	sub	r18, r10
    1b1a:	3b 09       	sbc	r19, r11
    1b1c:	4c 09       	sbc	r20, r12
    1b1e:	5d 09       	sbc	r21, r13
    1b20:	06 c0       	rjmp	.+12     	; 0x1b2e <_fpadd_parts+0x1c0>
    1b22:	a6 01       	movw	r20, r12
    1b24:	95 01       	movw	r18, r10
    1b26:	2e 19       	sub	r18, r14
    1b28:	3f 09       	sbc	r19, r15
    1b2a:	40 0b       	sbc	r20, r16
    1b2c:	51 0b       	sbc	r21, r17
    1b2e:	57 fd       	sbrc	r21, 7
    1b30:	08 c0       	rjmp	.+16     	; 0x1b42 <_fpadd_parts+0x1d4>
    1b32:	11 82       	std	Z+1, r1	; 0x01
    1b34:	33 82       	std	Z+3, r3	; 0x03
    1b36:	22 82       	std	Z+2, r2	; 0x02
    1b38:	24 83       	std	Z+4, r18	; 0x04
    1b3a:	35 83       	std	Z+5, r19	; 0x05
    1b3c:	46 83       	std	Z+6, r20	; 0x06
    1b3e:	57 83       	std	Z+7, r21	; 0x07
    1b40:	1d c0       	rjmp	.+58     	; 0x1b7c <_fpadd_parts+0x20e>
    1b42:	81 e0       	ldi	r24, 0x01	; 1
    1b44:	81 83       	std	Z+1, r24	; 0x01
    1b46:	33 82       	std	Z+3, r3	; 0x03
    1b48:	22 82       	std	Z+2, r2	; 0x02
    1b4a:	88 27       	eor	r24, r24
    1b4c:	99 27       	eor	r25, r25
    1b4e:	dc 01       	movw	r26, r24
    1b50:	82 1b       	sub	r24, r18
    1b52:	93 0b       	sbc	r25, r19
    1b54:	a4 0b       	sbc	r26, r20
    1b56:	b5 0b       	sbc	r27, r21
    1b58:	84 83       	std	Z+4, r24	; 0x04
    1b5a:	95 83       	std	Z+5, r25	; 0x05
    1b5c:	a6 83       	std	Z+6, r26	; 0x06
    1b5e:	b7 83       	std	Z+7, r27	; 0x07
    1b60:	0d c0       	rjmp	.+26     	; 0x1b7c <_fpadd_parts+0x20e>
    1b62:	22 0f       	add	r18, r18
    1b64:	33 1f       	adc	r19, r19
    1b66:	44 1f       	adc	r20, r20
    1b68:	55 1f       	adc	r21, r21
    1b6a:	24 83       	std	Z+4, r18	; 0x04
    1b6c:	35 83       	std	Z+5, r19	; 0x05
    1b6e:	46 83       	std	Z+6, r20	; 0x06
    1b70:	57 83       	std	Z+7, r21	; 0x07
    1b72:	82 81       	ldd	r24, Z+2	; 0x02
    1b74:	93 81       	ldd	r25, Z+3	; 0x03
    1b76:	01 97       	sbiw	r24, 0x01	; 1
    1b78:	93 83       	std	Z+3, r25	; 0x03
    1b7a:	82 83       	std	Z+2, r24	; 0x02
    1b7c:	24 81       	ldd	r18, Z+4	; 0x04
    1b7e:	35 81       	ldd	r19, Z+5	; 0x05
    1b80:	46 81       	ldd	r20, Z+6	; 0x06
    1b82:	57 81       	ldd	r21, Z+7	; 0x07
    1b84:	da 01       	movw	r26, r20
    1b86:	c9 01       	movw	r24, r18
    1b88:	01 97       	sbiw	r24, 0x01	; 1
    1b8a:	a1 09       	sbc	r26, r1
    1b8c:	b1 09       	sbc	r27, r1
    1b8e:	8f 5f       	subi	r24, 0xFF	; 255
    1b90:	9f 4f       	sbci	r25, 0xFF	; 255
    1b92:	af 4f       	sbci	r26, 0xFF	; 255
    1b94:	bf 43       	sbci	r27, 0x3F	; 63
    1b96:	28 f3       	brcs	.-54     	; 0x1b62 <_fpadd_parts+0x1f4>
    1b98:	0b c0       	rjmp	.+22     	; 0x1bb0 <_fpadd_parts+0x242>
    1b9a:	91 83       	std	Z+1, r25	; 0x01
    1b9c:	33 82       	std	Z+3, r3	; 0x03
    1b9e:	22 82       	std	Z+2, r2	; 0x02
    1ba0:	ea 0c       	add	r14, r10
    1ba2:	fb 1c       	adc	r15, r11
    1ba4:	0c 1d       	adc	r16, r12
    1ba6:	1d 1d       	adc	r17, r13
    1ba8:	e4 82       	std	Z+4, r14	; 0x04
    1baa:	f5 82       	std	Z+5, r15	; 0x05
    1bac:	06 83       	std	Z+6, r16	; 0x06
    1bae:	17 83       	std	Z+7, r17	; 0x07
    1bb0:	83 e0       	ldi	r24, 0x03	; 3
    1bb2:	80 83       	st	Z, r24
    1bb4:	24 81       	ldd	r18, Z+4	; 0x04
    1bb6:	35 81       	ldd	r19, Z+5	; 0x05
    1bb8:	46 81       	ldd	r20, Z+6	; 0x06
    1bba:	57 81       	ldd	r21, Z+7	; 0x07
    1bbc:	57 ff       	sbrs	r21, 7
    1bbe:	1a c0       	rjmp	.+52     	; 0x1bf4 <_fpadd_parts+0x286>
    1bc0:	c9 01       	movw	r24, r18
    1bc2:	aa 27       	eor	r26, r26
    1bc4:	97 fd       	sbrc	r25, 7
    1bc6:	a0 95       	com	r26
    1bc8:	ba 2f       	mov	r27, r26
    1bca:	81 70       	andi	r24, 0x01	; 1
    1bcc:	90 70       	andi	r25, 0x00	; 0
    1bce:	a0 70       	andi	r26, 0x00	; 0
    1bd0:	b0 70       	andi	r27, 0x00	; 0
    1bd2:	56 95       	lsr	r21
    1bd4:	47 95       	ror	r20
    1bd6:	37 95       	ror	r19
    1bd8:	27 95       	ror	r18
    1bda:	82 2b       	or	r24, r18
    1bdc:	93 2b       	or	r25, r19
    1bde:	a4 2b       	or	r26, r20
    1be0:	b5 2b       	or	r27, r21
    1be2:	84 83       	std	Z+4, r24	; 0x04
    1be4:	95 83       	std	Z+5, r25	; 0x05
    1be6:	a6 83       	std	Z+6, r26	; 0x06
    1be8:	b7 83       	std	Z+7, r27	; 0x07
    1bea:	82 81       	ldd	r24, Z+2	; 0x02
    1bec:	93 81       	ldd	r25, Z+3	; 0x03
    1bee:	01 96       	adiw	r24, 0x01	; 1
    1bf0:	93 83       	std	Z+3, r25	; 0x03
    1bf2:	82 83       	std	Z+2, r24	; 0x02
    1bf4:	df 01       	movw	r26, r30
    1bf6:	01 c0       	rjmp	.+2      	; 0x1bfa <_fpadd_parts+0x28c>
    1bf8:	d2 01       	movw	r26, r4
    1bfa:	cd 01       	movw	r24, r26
    1bfc:	cd b7       	in	r28, 0x3d	; 61
    1bfe:	de b7       	in	r29, 0x3e	; 62
    1c00:	e2 e1       	ldi	r30, 0x12	; 18
    1c02:	0c 94 ca 13 	jmp	0x2794	; 0x2794 <__epilogue_restores__>

00001c06 <__subsf3>:
    1c06:	a0 e2       	ldi	r26, 0x20	; 32
    1c08:	b0 e0       	ldi	r27, 0x00	; 0
    1c0a:	e9 e0       	ldi	r30, 0x09	; 9
    1c0c:	fe e0       	ldi	r31, 0x0E	; 14
    1c0e:	0c 94 ba 13 	jmp	0x2774	; 0x2774 <__prologue_saves__+0x18>
    1c12:	69 83       	std	Y+1, r22	; 0x01
    1c14:	7a 83       	std	Y+2, r23	; 0x02
    1c16:	8b 83       	std	Y+3, r24	; 0x03
    1c18:	9c 83       	std	Y+4, r25	; 0x04
    1c1a:	2d 83       	std	Y+5, r18	; 0x05
    1c1c:	3e 83       	std	Y+6, r19	; 0x06
    1c1e:	4f 83       	std	Y+7, r20	; 0x07
    1c20:	58 87       	std	Y+8, r21	; 0x08
    1c22:	e9 e0       	ldi	r30, 0x09	; 9
    1c24:	ee 2e       	mov	r14, r30
    1c26:	f1 2c       	mov	r15, r1
    1c28:	ec 0e       	add	r14, r28
    1c2a:	fd 1e       	adc	r15, r29
    1c2c:	ce 01       	movw	r24, r28
    1c2e:	01 96       	adiw	r24, 0x01	; 1
    1c30:	b7 01       	movw	r22, r14
    1c32:	0e 94 b6 12 	call	0x256c	; 0x256c <__unpack_f>
    1c36:	8e 01       	movw	r16, r28
    1c38:	0f 5e       	subi	r16, 0xEF	; 239
    1c3a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c3c:	ce 01       	movw	r24, r28
    1c3e:	05 96       	adiw	r24, 0x05	; 5
    1c40:	b8 01       	movw	r22, r16
    1c42:	0e 94 b6 12 	call	0x256c	; 0x256c <__unpack_f>
    1c46:	8a 89       	ldd	r24, Y+18	; 0x12
    1c48:	91 e0       	ldi	r25, 0x01	; 1
    1c4a:	89 27       	eor	r24, r25
    1c4c:	8a 8b       	std	Y+18, r24	; 0x12
    1c4e:	c7 01       	movw	r24, r14
    1c50:	b8 01       	movw	r22, r16
    1c52:	ae 01       	movw	r20, r28
    1c54:	47 5e       	subi	r20, 0xE7	; 231
    1c56:	5f 4f       	sbci	r21, 0xFF	; 255
    1c58:	0e 94 b7 0c 	call	0x196e	; 0x196e <_fpadd_parts>
    1c5c:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <__pack_f>
    1c60:	a0 96       	adiw	r28, 0x20	; 32
    1c62:	e6 e0       	ldi	r30, 0x06	; 6
    1c64:	0c 94 d6 13 	jmp	0x27ac	; 0x27ac <__epilogue_restores__+0x18>

00001c68 <__addsf3>:
    1c68:	a0 e2       	ldi	r26, 0x20	; 32
    1c6a:	b0 e0       	ldi	r27, 0x00	; 0
    1c6c:	ea e3       	ldi	r30, 0x3A	; 58
    1c6e:	fe e0       	ldi	r31, 0x0E	; 14
    1c70:	0c 94 ba 13 	jmp	0x2774	; 0x2774 <__prologue_saves__+0x18>
    1c74:	69 83       	std	Y+1, r22	; 0x01
    1c76:	7a 83       	std	Y+2, r23	; 0x02
    1c78:	8b 83       	std	Y+3, r24	; 0x03
    1c7a:	9c 83       	std	Y+4, r25	; 0x04
    1c7c:	2d 83       	std	Y+5, r18	; 0x05
    1c7e:	3e 83       	std	Y+6, r19	; 0x06
    1c80:	4f 83       	std	Y+7, r20	; 0x07
    1c82:	58 87       	std	Y+8, r21	; 0x08
    1c84:	f9 e0       	ldi	r31, 0x09	; 9
    1c86:	ef 2e       	mov	r14, r31
    1c88:	f1 2c       	mov	r15, r1
    1c8a:	ec 0e       	add	r14, r28
    1c8c:	fd 1e       	adc	r15, r29
    1c8e:	ce 01       	movw	r24, r28
    1c90:	01 96       	adiw	r24, 0x01	; 1
    1c92:	b7 01       	movw	r22, r14
    1c94:	0e 94 b6 12 	call	0x256c	; 0x256c <__unpack_f>
    1c98:	8e 01       	movw	r16, r28
    1c9a:	0f 5e       	subi	r16, 0xEF	; 239
    1c9c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c9e:	ce 01       	movw	r24, r28
    1ca0:	05 96       	adiw	r24, 0x05	; 5
    1ca2:	b8 01       	movw	r22, r16
    1ca4:	0e 94 b6 12 	call	0x256c	; 0x256c <__unpack_f>
    1ca8:	c7 01       	movw	r24, r14
    1caa:	b8 01       	movw	r22, r16
    1cac:	ae 01       	movw	r20, r28
    1cae:	47 5e       	subi	r20, 0xE7	; 231
    1cb0:	5f 4f       	sbci	r21, 0xFF	; 255
    1cb2:	0e 94 b7 0c 	call	0x196e	; 0x196e <_fpadd_parts>
    1cb6:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <__pack_f>
    1cba:	a0 96       	adiw	r28, 0x20	; 32
    1cbc:	e6 e0       	ldi	r30, 0x06	; 6
    1cbe:	0c 94 d6 13 	jmp	0x27ac	; 0x27ac <__epilogue_restores__+0x18>

00001cc2 <__mulsf3>:
    1cc2:	a0 e2       	ldi	r26, 0x20	; 32
    1cc4:	b0 e0       	ldi	r27, 0x00	; 0
    1cc6:	e7 e6       	ldi	r30, 0x67	; 103
    1cc8:	fe e0       	ldi	r31, 0x0E	; 14
    1cca:	0c 94 ae 13 	jmp	0x275c	; 0x275c <__prologue_saves__>
    1cce:	69 83       	std	Y+1, r22	; 0x01
    1cd0:	7a 83       	std	Y+2, r23	; 0x02
    1cd2:	8b 83       	std	Y+3, r24	; 0x03
    1cd4:	9c 83       	std	Y+4, r25	; 0x04
    1cd6:	2d 83       	std	Y+5, r18	; 0x05
    1cd8:	3e 83       	std	Y+6, r19	; 0x06
    1cda:	4f 83       	std	Y+7, r20	; 0x07
    1cdc:	58 87       	std	Y+8, r21	; 0x08
    1cde:	ce 01       	movw	r24, r28
    1ce0:	01 96       	adiw	r24, 0x01	; 1
    1ce2:	be 01       	movw	r22, r28
    1ce4:	67 5f       	subi	r22, 0xF7	; 247
    1ce6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ce8:	0e 94 b6 12 	call	0x256c	; 0x256c <__unpack_f>
    1cec:	ce 01       	movw	r24, r28
    1cee:	05 96       	adiw	r24, 0x05	; 5
    1cf0:	be 01       	movw	r22, r28
    1cf2:	6f 5e       	subi	r22, 0xEF	; 239
    1cf4:	7f 4f       	sbci	r23, 0xFF	; 255
    1cf6:	0e 94 b6 12 	call	0x256c	; 0x256c <__unpack_f>
    1cfa:	99 85       	ldd	r25, Y+9	; 0x09
    1cfc:	92 30       	cpi	r25, 0x02	; 2
    1cfe:	88 f0       	brcs	.+34     	; 0x1d22 <__mulsf3+0x60>
    1d00:	89 89       	ldd	r24, Y+17	; 0x11
    1d02:	82 30       	cpi	r24, 0x02	; 2
    1d04:	c8 f0       	brcs	.+50     	; 0x1d38 <__mulsf3+0x76>
    1d06:	94 30       	cpi	r25, 0x04	; 4
    1d08:	19 f4       	brne	.+6      	; 0x1d10 <__mulsf3+0x4e>
    1d0a:	82 30       	cpi	r24, 0x02	; 2
    1d0c:	51 f4       	brne	.+20     	; 0x1d22 <__mulsf3+0x60>
    1d0e:	04 c0       	rjmp	.+8      	; 0x1d18 <__mulsf3+0x56>
    1d10:	84 30       	cpi	r24, 0x04	; 4
    1d12:	29 f4       	brne	.+10     	; 0x1d1e <__mulsf3+0x5c>
    1d14:	92 30       	cpi	r25, 0x02	; 2
    1d16:	81 f4       	brne	.+32     	; 0x1d38 <__mulsf3+0x76>
    1d18:	8e e3       	ldi	r24, 0x3E	; 62
    1d1a:	91 e0       	ldi	r25, 0x01	; 1
    1d1c:	c6 c0       	rjmp	.+396    	; 0x1eaa <__mulsf3+0x1e8>
    1d1e:	92 30       	cpi	r25, 0x02	; 2
    1d20:	49 f4       	brne	.+18     	; 0x1d34 <__mulsf3+0x72>
    1d22:	20 e0       	ldi	r18, 0x00	; 0
    1d24:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d26:	8a 89       	ldd	r24, Y+18	; 0x12
    1d28:	98 13       	cpse	r25, r24
    1d2a:	21 e0       	ldi	r18, 0x01	; 1
    1d2c:	2a 87       	std	Y+10, r18	; 0x0a
    1d2e:	ce 01       	movw	r24, r28
    1d30:	09 96       	adiw	r24, 0x09	; 9
    1d32:	bb c0       	rjmp	.+374    	; 0x1eaa <__mulsf3+0x1e8>
    1d34:	82 30       	cpi	r24, 0x02	; 2
    1d36:	49 f4       	brne	.+18     	; 0x1d4a <__mulsf3+0x88>
    1d38:	20 e0       	ldi	r18, 0x00	; 0
    1d3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d3c:	8a 89       	ldd	r24, Y+18	; 0x12
    1d3e:	98 13       	cpse	r25, r24
    1d40:	21 e0       	ldi	r18, 0x01	; 1
    1d42:	2a 8b       	std	Y+18, r18	; 0x12
    1d44:	ce 01       	movw	r24, r28
    1d46:	41 96       	adiw	r24, 0x11	; 17
    1d48:	b0 c0       	rjmp	.+352    	; 0x1eaa <__mulsf3+0x1e8>
    1d4a:	2d 84       	ldd	r2, Y+13	; 0x0d
    1d4c:	3e 84       	ldd	r3, Y+14	; 0x0e
    1d4e:	4f 84       	ldd	r4, Y+15	; 0x0f
    1d50:	58 88       	ldd	r5, Y+16	; 0x10
    1d52:	6d 88       	ldd	r6, Y+21	; 0x15
    1d54:	7e 88       	ldd	r7, Y+22	; 0x16
    1d56:	8f 88       	ldd	r8, Y+23	; 0x17
    1d58:	98 8c       	ldd	r9, Y+24	; 0x18
    1d5a:	ee 24       	eor	r14, r14
    1d5c:	ff 24       	eor	r15, r15
    1d5e:	87 01       	movw	r16, r14
    1d60:	aa 24       	eor	r10, r10
    1d62:	bb 24       	eor	r11, r11
    1d64:	65 01       	movw	r12, r10
    1d66:	40 e0       	ldi	r20, 0x00	; 0
    1d68:	50 e0       	ldi	r21, 0x00	; 0
    1d6a:	60 e0       	ldi	r22, 0x00	; 0
    1d6c:	70 e0       	ldi	r23, 0x00	; 0
    1d6e:	e0 e0       	ldi	r30, 0x00	; 0
    1d70:	f0 e0       	ldi	r31, 0x00	; 0
    1d72:	c1 01       	movw	r24, r2
    1d74:	81 70       	andi	r24, 0x01	; 1
    1d76:	90 70       	andi	r25, 0x00	; 0
    1d78:	89 2b       	or	r24, r25
    1d7a:	e9 f0       	breq	.+58     	; 0x1db6 <__mulsf3+0xf4>
    1d7c:	e6 0c       	add	r14, r6
    1d7e:	f7 1c       	adc	r15, r7
    1d80:	08 1d       	adc	r16, r8
    1d82:	19 1d       	adc	r17, r9
    1d84:	9a 01       	movw	r18, r20
    1d86:	ab 01       	movw	r20, r22
    1d88:	2a 0d       	add	r18, r10
    1d8a:	3b 1d       	adc	r19, r11
    1d8c:	4c 1d       	adc	r20, r12
    1d8e:	5d 1d       	adc	r21, r13
    1d90:	80 e0       	ldi	r24, 0x00	; 0
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	a0 e0       	ldi	r26, 0x00	; 0
    1d96:	b0 e0       	ldi	r27, 0x00	; 0
    1d98:	e6 14       	cp	r14, r6
    1d9a:	f7 04       	cpc	r15, r7
    1d9c:	08 05       	cpc	r16, r8
    1d9e:	19 05       	cpc	r17, r9
    1da0:	20 f4       	brcc	.+8      	; 0x1daa <__mulsf3+0xe8>
    1da2:	81 e0       	ldi	r24, 0x01	; 1
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	a0 e0       	ldi	r26, 0x00	; 0
    1da8:	b0 e0       	ldi	r27, 0x00	; 0
    1daa:	ba 01       	movw	r22, r20
    1dac:	a9 01       	movw	r20, r18
    1dae:	48 0f       	add	r20, r24
    1db0:	59 1f       	adc	r21, r25
    1db2:	6a 1f       	adc	r22, r26
    1db4:	7b 1f       	adc	r23, r27
    1db6:	aa 0c       	add	r10, r10
    1db8:	bb 1c       	adc	r11, r11
    1dba:	cc 1c       	adc	r12, r12
    1dbc:	dd 1c       	adc	r13, r13
    1dbe:	97 fe       	sbrs	r9, 7
    1dc0:	08 c0       	rjmp	.+16     	; 0x1dd2 <__mulsf3+0x110>
    1dc2:	81 e0       	ldi	r24, 0x01	; 1
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	a0 e0       	ldi	r26, 0x00	; 0
    1dc8:	b0 e0       	ldi	r27, 0x00	; 0
    1dca:	a8 2a       	or	r10, r24
    1dcc:	b9 2a       	or	r11, r25
    1dce:	ca 2a       	or	r12, r26
    1dd0:	db 2a       	or	r13, r27
    1dd2:	31 96       	adiw	r30, 0x01	; 1
    1dd4:	e0 32       	cpi	r30, 0x20	; 32
    1dd6:	f1 05       	cpc	r31, r1
    1dd8:	49 f0       	breq	.+18     	; 0x1dec <__mulsf3+0x12a>
    1dda:	66 0c       	add	r6, r6
    1ddc:	77 1c       	adc	r7, r7
    1dde:	88 1c       	adc	r8, r8
    1de0:	99 1c       	adc	r9, r9
    1de2:	56 94       	lsr	r5
    1de4:	47 94       	ror	r4
    1de6:	37 94       	ror	r3
    1de8:	27 94       	ror	r2
    1dea:	c3 cf       	rjmp	.-122    	; 0x1d72 <__mulsf3+0xb0>
    1dec:	fa 85       	ldd	r31, Y+10	; 0x0a
    1dee:	ea 89       	ldd	r30, Y+18	; 0x12
    1df0:	2b 89       	ldd	r18, Y+19	; 0x13
    1df2:	3c 89       	ldd	r19, Y+20	; 0x14
    1df4:	8b 85       	ldd	r24, Y+11	; 0x0b
    1df6:	9c 85       	ldd	r25, Y+12	; 0x0c
    1df8:	28 0f       	add	r18, r24
    1dfa:	39 1f       	adc	r19, r25
    1dfc:	2e 5f       	subi	r18, 0xFE	; 254
    1dfe:	3f 4f       	sbci	r19, 0xFF	; 255
    1e00:	17 c0       	rjmp	.+46     	; 0x1e30 <__mulsf3+0x16e>
    1e02:	ca 01       	movw	r24, r20
    1e04:	81 70       	andi	r24, 0x01	; 1
    1e06:	90 70       	andi	r25, 0x00	; 0
    1e08:	89 2b       	or	r24, r25
    1e0a:	61 f0       	breq	.+24     	; 0x1e24 <__mulsf3+0x162>
    1e0c:	16 95       	lsr	r17
    1e0e:	07 95       	ror	r16
    1e10:	f7 94       	ror	r15
    1e12:	e7 94       	ror	r14
    1e14:	80 e0       	ldi	r24, 0x00	; 0
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	a0 e0       	ldi	r26, 0x00	; 0
    1e1a:	b0 e8       	ldi	r27, 0x80	; 128
    1e1c:	e8 2a       	or	r14, r24
    1e1e:	f9 2a       	or	r15, r25
    1e20:	0a 2b       	or	r16, r26
    1e22:	1b 2b       	or	r17, r27
    1e24:	76 95       	lsr	r23
    1e26:	67 95       	ror	r22
    1e28:	57 95       	ror	r21
    1e2a:	47 95       	ror	r20
    1e2c:	2f 5f       	subi	r18, 0xFF	; 255
    1e2e:	3f 4f       	sbci	r19, 0xFF	; 255
    1e30:	77 fd       	sbrc	r23, 7
    1e32:	e7 cf       	rjmp	.-50     	; 0x1e02 <__mulsf3+0x140>
    1e34:	0c c0       	rjmp	.+24     	; 0x1e4e <__mulsf3+0x18c>
    1e36:	44 0f       	add	r20, r20
    1e38:	55 1f       	adc	r21, r21
    1e3a:	66 1f       	adc	r22, r22
    1e3c:	77 1f       	adc	r23, r23
    1e3e:	17 fd       	sbrc	r17, 7
    1e40:	41 60       	ori	r20, 0x01	; 1
    1e42:	ee 0c       	add	r14, r14
    1e44:	ff 1c       	adc	r15, r15
    1e46:	00 1f       	adc	r16, r16
    1e48:	11 1f       	adc	r17, r17
    1e4a:	21 50       	subi	r18, 0x01	; 1
    1e4c:	30 40       	sbci	r19, 0x00	; 0
    1e4e:	40 30       	cpi	r20, 0x00	; 0
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	59 07       	cpc	r21, r25
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	69 07       	cpc	r22, r25
    1e58:	90 e4       	ldi	r25, 0x40	; 64
    1e5a:	79 07       	cpc	r23, r25
    1e5c:	60 f3       	brcs	.-40     	; 0x1e36 <__mulsf3+0x174>
    1e5e:	2b 8f       	std	Y+27, r18	; 0x1b
    1e60:	3c 8f       	std	Y+28, r19	; 0x1c
    1e62:	db 01       	movw	r26, r22
    1e64:	ca 01       	movw	r24, r20
    1e66:	8f 77       	andi	r24, 0x7F	; 127
    1e68:	90 70       	andi	r25, 0x00	; 0
    1e6a:	a0 70       	andi	r26, 0x00	; 0
    1e6c:	b0 70       	andi	r27, 0x00	; 0
    1e6e:	80 34       	cpi	r24, 0x40	; 64
    1e70:	91 05       	cpc	r25, r1
    1e72:	a1 05       	cpc	r26, r1
    1e74:	b1 05       	cpc	r27, r1
    1e76:	61 f4       	brne	.+24     	; 0x1e90 <__mulsf3+0x1ce>
    1e78:	47 fd       	sbrc	r20, 7
    1e7a:	0a c0       	rjmp	.+20     	; 0x1e90 <__mulsf3+0x1ce>
    1e7c:	e1 14       	cp	r14, r1
    1e7e:	f1 04       	cpc	r15, r1
    1e80:	01 05       	cpc	r16, r1
    1e82:	11 05       	cpc	r17, r1
    1e84:	29 f0       	breq	.+10     	; 0x1e90 <__mulsf3+0x1ce>
    1e86:	40 5c       	subi	r20, 0xC0	; 192
    1e88:	5f 4f       	sbci	r21, 0xFF	; 255
    1e8a:	6f 4f       	sbci	r22, 0xFF	; 255
    1e8c:	7f 4f       	sbci	r23, 0xFF	; 255
    1e8e:	40 78       	andi	r20, 0x80	; 128
    1e90:	1a 8e       	std	Y+26, r1	; 0x1a
    1e92:	fe 17       	cp	r31, r30
    1e94:	11 f0       	breq	.+4      	; 0x1e9a <__mulsf3+0x1d8>
    1e96:	81 e0       	ldi	r24, 0x01	; 1
    1e98:	8a 8f       	std	Y+26, r24	; 0x1a
    1e9a:	4d 8f       	std	Y+29, r20	; 0x1d
    1e9c:	5e 8f       	std	Y+30, r21	; 0x1e
    1e9e:	6f 8f       	std	Y+31, r22	; 0x1f
    1ea0:	78 a3       	std	Y+32, r23	; 0x20
    1ea2:	83 e0       	ldi	r24, 0x03	; 3
    1ea4:	89 8f       	std	Y+25, r24	; 0x19
    1ea6:	ce 01       	movw	r24, r28
    1ea8:	49 96       	adiw	r24, 0x19	; 25
    1eaa:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <__pack_f>
    1eae:	a0 96       	adiw	r28, 0x20	; 32
    1eb0:	e2 e1       	ldi	r30, 0x12	; 18
    1eb2:	0c 94 ca 13 	jmp	0x2794	; 0x2794 <__epilogue_restores__>

00001eb6 <__divsf3>:
    1eb6:	a8 e1       	ldi	r26, 0x18	; 24
    1eb8:	b0 e0       	ldi	r27, 0x00	; 0
    1eba:	e1 e6       	ldi	r30, 0x61	; 97
    1ebc:	ff e0       	ldi	r31, 0x0F	; 15
    1ebe:	0c 94 b6 13 	jmp	0x276c	; 0x276c <__prologue_saves__+0x10>
    1ec2:	69 83       	std	Y+1, r22	; 0x01
    1ec4:	7a 83       	std	Y+2, r23	; 0x02
    1ec6:	8b 83       	std	Y+3, r24	; 0x03
    1ec8:	9c 83       	std	Y+4, r25	; 0x04
    1eca:	2d 83       	std	Y+5, r18	; 0x05
    1ecc:	3e 83       	std	Y+6, r19	; 0x06
    1ece:	4f 83       	std	Y+7, r20	; 0x07
    1ed0:	58 87       	std	Y+8, r21	; 0x08
    1ed2:	b9 e0       	ldi	r27, 0x09	; 9
    1ed4:	eb 2e       	mov	r14, r27
    1ed6:	f1 2c       	mov	r15, r1
    1ed8:	ec 0e       	add	r14, r28
    1eda:	fd 1e       	adc	r15, r29
    1edc:	ce 01       	movw	r24, r28
    1ede:	01 96       	adiw	r24, 0x01	; 1
    1ee0:	b7 01       	movw	r22, r14
    1ee2:	0e 94 b6 12 	call	0x256c	; 0x256c <__unpack_f>
    1ee6:	8e 01       	movw	r16, r28
    1ee8:	0f 5e       	subi	r16, 0xEF	; 239
    1eea:	1f 4f       	sbci	r17, 0xFF	; 255
    1eec:	ce 01       	movw	r24, r28
    1eee:	05 96       	adiw	r24, 0x05	; 5
    1ef0:	b8 01       	movw	r22, r16
    1ef2:	0e 94 b6 12 	call	0x256c	; 0x256c <__unpack_f>
    1ef6:	29 85       	ldd	r18, Y+9	; 0x09
    1ef8:	22 30       	cpi	r18, 0x02	; 2
    1efa:	08 f4       	brcc	.+2      	; 0x1efe <__divsf3+0x48>
    1efc:	7e c0       	rjmp	.+252    	; 0x1ffa <__divsf3+0x144>
    1efe:	39 89       	ldd	r19, Y+17	; 0x11
    1f00:	32 30       	cpi	r19, 0x02	; 2
    1f02:	10 f4       	brcc	.+4      	; 0x1f08 <__divsf3+0x52>
    1f04:	b8 01       	movw	r22, r16
    1f06:	7c c0       	rjmp	.+248    	; 0x2000 <__divsf3+0x14a>
    1f08:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f0a:	9a 89       	ldd	r25, Y+18	; 0x12
    1f0c:	89 27       	eor	r24, r25
    1f0e:	8a 87       	std	Y+10, r24	; 0x0a
    1f10:	24 30       	cpi	r18, 0x04	; 4
    1f12:	11 f0       	breq	.+4      	; 0x1f18 <__divsf3+0x62>
    1f14:	22 30       	cpi	r18, 0x02	; 2
    1f16:	31 f4       	brne	.+12     	; 0x1f24 <__divsf3+0x6e>
    1f18:	23 17       	cp	r18, r19
    1f1a:	09 f0       	breq	.+2      	; 0x1f1e <__divsf3+0x68>
    1f1c:	6e c0       	rjmp	.+220    	; 0x1ffa <__divsf3+0x144>
    1f1e:	6e e3       	ldi	r22, 0x3E	; 62
    1f20:	71 e0       	ldi	r23, 0x01	; 1
    1f22:	6e c0       	rjmp	.+220    	; 0x2000 <__divsf3+0x14a>
    1f24:	34 30       	cpi	r19, 0x04	; 4
    1f26:	39 f4       	brne	.+14     	; 0x1f36 <__divsf3+0x80>
    1f28:	1d 86       	std	Y+13, r1	; 0x0d
    1f2a:	1e 86       	std	Y+14, r1	; 0x0e
    1f2c:	1f 86       	std	Y+15, r1	; 0x0f
    1f2e:	18 8a       	std	Y+16, r1	; 0x10
    1f30:	1c 86       	std	Y+12, r1	; 0x0c
    1f32:	1b 86       	std	Y+11, r1	; 0x0b
    1f34:	04 c0       	rjmp	.+8      	; 0x1f3e <__divsf3+0x88>
    1f36:	32 30       	cpi	r19, 0x02	; 2
    1f38:	21 f4       	brne	.+8      	; 0x1f42 <__divsf3+0x8c>
    1f3a:	84 e0       	ldi	r24, 0x04	; 4
    1f3c:	89 87       	std	Y+9, r24	; 0x09
    1f3e:	b7 01       	movw	r22, r14
    1f40:	5f c0       	rjmp	.+190    	; 0x2000 <__divsf3+0x14a>
    1f42:	2b 85       	ldd	r18, Y+11	; 0x0b
    1f44:	3c 85       	ldd	r19, Y+12	; 0x0c
    1f46:	8b 89       	ldd	r24, Y+19	; 0x13
    1f48:	9c 89       	ldd	r25, Y+20	; 0x14
    1f4a:	28 1b       	sub	r18, r24
    1f4c:	39 0b       	sbc	r19, r25
    1f4e:	3c 87       	std	Y+12, r19	; 0x0c
    1f50:	2b 87       	std	Y+11, r18	; 0x0b
    1f52:	ed 84       	ldd	r14, Y+13	; 0x0d
    1f54:	fe 84       	ldd	r15, Y+14	; 0x0e
    1f56:	0f 85       	ldd	r16, Y+15	; 0x0f
    1f58:	18 89       	ldd	r17, Y+16	; 0x10
    1f5a:	ad 88       	ldd	r10, Y+21	; 0x15
    1f5c:	be 88       	ldd	r11, Y+22	; 0x16
    1f5e:	cf 88       	ldd	r12, Y+23	; 0x17
    1f60:	d8 8c       	ldd	r13, Y+24	; 0x18
    1f62:	ea 14       	cp	r14, r10
    1f64:	fb 04       	cpc	r15, r11
    1f66:	0c 05       	cpc	r16, r12
    1f68:	1d 05       	cpc	r17, r13
    1f6a:	40 f4       	brcc	.+16     	; 0x1f7c <__divsf3+0xc6>
    1f6c:	ee 0c       	add	r14, r14
    1f6e:	ff 1c       	adc	r15, r15
    1f70:	00 1f       	adc	r16, r16
    1f72:	11 1f       	adc	r17, r17
    1f74:	21 50       	subi	r18, 0x01	; 1
    1f76:	30 40       	sbci	r19, 0x00	; 0
    1f78:	3c 87       	std	Y+12, r19	; 0x0c
    1f7a:	2b 87       	std	Y+11, r18	; 0x0b
    1f7c:	20 e0       	ldi	r18, 0x00	; 0
    1f7e:	30 e0       	ldi	r19, 0x00	; 0
    1f80:	40 e0       	ldi	r20, 0x00	; 0
    1f82:	50 e0       	ldi	r21, 0x00	; 0
    1f84:	80 e0       	ldi	r24, 0x00	; 0
    1f86:	90 e0       	ldi	r25, 0x00	; 0
    1f88:	a0 e0       	ldi	r26, 0x00	; 0
    1f8a:	b0 e4       	ldi	r27, 0x40	; 64
    1f8c:	60 e0       	ldi	r22, 0x00	; 0
    1f8e:	70 e0       	ldi	r23, 0x00	; 0
    1f90:	ea 14       	cp	r14, r10
    1f92:	fb 04       	cpc	r15, r11
    1f94:	0c 05       	cpc	r16, r12
    1f96:	1d 05       	cpc	r17, r13
    1f98:	40 f0       	brcs	.+16     	; 0x1faa <__divsf3+0xf4>
    1f9a:	28 2b       	or	r18, r24
    1f9c:	39 2b       	or	r19, r25
    1f9e:	4a 2b       	or	r20, r26
    1fa0:	5b 2b       	or	r21, r27
    1fa2:	ea 18       	sub	r14, r10
    1fa4:	fb 08       	sbc	r15, r11
    1fa6:	0c 09       	sbc	r16, r12
    1fa8:	1d 09       	sbc	r17, r13
    1faa:	b6 95       	lsr	r27
    1fac:	a7 95       	ror	r26
    1fae:	97 95       	ror	r25
    1fb0:	87 95       	ror	r24
    1fb2:	ee 0c       	add	r14, r14
    1fb4:	ff 1c       	adc	r15, r15
    1fb6:	00 1f       	adc	r16, r16
    1fb8:	11 1f       	adc	r17, r17
    1fba:	6f 5f       	subi	r22, 0xFF	; 255
    1fbc:	7f 4f       	sbci	r23, 0xFF	; 255
    1fbe:	6f 31       	cpi	r22, 0x1F	; 31
    1fc0:	71 05       	cpc	r23, r1
    1fc2:	31 f7       	brne	.-52     	; 0x1f90 <__divsf3+0xda>
    1fc4:	da 01       	movw	r26, r20
    1fc6:	c9 01       	movw	r24, r18
    1fc8:	8f 77       	andi	r24, 0x7F	; 127
    1fca:	90 70       	andi	r25, 0x00	; 0
    1fcc:	a0 70       	andi	r26, 0x00	; 0
    1fce:	b0 70       	andi	r27, 0x00	; 0
    1fd0:	80 34       	cpi	r24, 0x40	; 64
    1fd2:	91 05       	cpc	r25, r1
    1fd4:	a1 05       	cpc	r26, r1
    1fd6:	b1 05       	cpc	r27, r1
    1fd8:	61 f4       	brne	.+24     	; 0x1ff2 <__divsf3+0x13c>
    1fda:	27 fd       	sbrc	r18, 7
    1fdc:	0a c0       	rjmp	.+20     	; 0x1ff2 <__divsf3+0x13c>
    1fde:	e1 14       	cp	r14, r1
    1fe0:	f1 04       	cpc	r15, r1
    1fe2:	01 05       	cpc	r16, r1
    1fe4:	11 05       	cpc	r17, r1
    1fe6:	29 f0       	breq	.+10     	; 0x1ff2 <__divsf3+0x13c>
    1fe8:	20 5c       	subi	r18, 0xC0	; 192
    1fea:	3f 4f       	sbci	r19, 0xFF	; 255
    1fec:	4f 4f       	sbci	r20, 0xFF	; 255
    1fee:	5f 4f       	sbci	r21, 0xFF	; 255
    1ff0:	20 78       	andi	r18, 0x80	; 128
    1ff2:	2d 87       	std	Y+13, r18	; 0x0d
    1ff4:	3e 87       	std	Y+14, r19	; 0x0e
    1ff6:	4f 87       	std	Y+15, r20	; 0x0f
    1ff8:	58 8b       	std	Y+16, r21	; 0x10
    1ffa:	be 01       	movw	r22, r28
    1ffc:	67 5f       	subi	r22, 0xF7	; 247
    1ffe:	7f 4f       	sbci	r23, 0xFF	; 255
    2000:	cb 01       	movw	r24, r22
    2002:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <__pack_f>
    2006:	68 96       	adiw	r28, 0x18	; 24
    2008:	ea e0       	ldi	r30, 0x0A	; 10
    200a:	0c 94 d2 13 	jmp	0x27a4	; 0x27a4 <__epilogue_restores__+0x10>

0000200e <__gesf2>:
    200e:	a8 e1       	ldi	r26, 0x18	; 24
    2010:	b0 e0       	ldi	r27, 0x00	; 0
    2012:	ed e0       	ldi	r30, 0x0D	; 13
    2014:	f0 e1       	ldi	r31, 0x10	; 16
    2016:	0c 94 ba 13 	jmp	0x2774	; 0x2774 <__prologue_saves__+0x18>
    201a:	69 83       	std	Y+1, r22	; 0x01
    201c:	7a 83       	std	Y+2, r23	; 0x02
    201e:	8b 83       	std	Y+3, r24	; 0x03
    2020:	9c 83       	std	Y+4, r25	; 0x04
    2022:	2d 83       	std	Y+5, r18	; 0x05
    2024:	3e 83       	std	Y+6, r19	; 0x06
    2026:	4f 83       	std	Y+7, r20	; 0x07
    2028:	58 87       	std	Y+8, r21	; 0x08
    202a:	89 e0       	ldi	r24, 0x09	; 9
    202c:	e8 2e       	mov	r14, r24
    202e:	f1 2c       	mov	r15, r1
    2030:	ec 0e       	add	r14, r28
    2032:	fd 1e       	adc	r15, r29
    2034:	ce 01       	movw	r24, r28
    2036:	01 96       	adiw	r24, 0x01	; 1
    2038:	b7 01       	movw	r22, r14
    203a:	0e 94 b6 12 	call	0x256c	; 0x256c <__unpack_f>
    203e:	8e 01       	movw	r16, r28
    2040:	0f 5e       	subi	r16, 0xEF	; 239
    2042:	1f 4f       	sbci	r17, 0xFF	; 255
    2044:	ce 01       	movw	r24, r28
    2046:	05 96       	adiw	r24, 0x05	; 5
    2048:	b8 01       	movw	r22, r16
    204a:	0e 94 b6 12 	call	0x256c	; 0x256c <__unpack_f>
    204e:	89 85       	ldd	r24, Y+9	; 0x09
    2050:	82 30       	cpi	r24, 0x02	; 2
    2052:	40 f0       	brcs	.+16     	; 0x2064 <__gesf2+0x56>
    2054:	89 89       	ldd	r24, Y+17	; 0x11
    2056:	82 30       	cpi	r24, 0x02	; 2
    2058:	28 f0       	brcs	.+10     	; 0x2064 <__gesf2+0x56>
    205a:	c7 01       	movw	r24, r14
    205c:	b8 01       	movw	r22, r16
    205e:	0e 94 2e 13 	call	0x265c	; 0x265c <__fpcmp_parts_f>
    2062:	01 c0       	rjmp	.+2      	; 0x2066 <__gesf2+0x58>
    2064:	8f ef       	ldi	r24, 0xFF	; 255
    2066:	68 96       	adiw	r28, 0x18	; 24
    2068:	e6 e0       	ldi	r30, 0x06	; 6
    206a:	0c 94 d6 13 	jmp	0x27ac	; 0x27ac <__epilogue_restores__+0x18>

0000206e <__ltsf2>:
    206e:	a8 e1       	ldi	r26, 0x18	; 24
    2070:	b0 e0       	ldi	r27, 0x00	; 0
    2072:	ed e3       	ldi	r30, 0x3D	; 61
    2074:	f0 e1       	ldi	r31, 0x10	; 16
    2076:	0c 94 ba 13 	jmp	0x2774	; 0x2774 <__prologue_saves__+0x18>
    207a:	69 83       	std	Y+1, r22	; 0x01
    207c:	7a 83       	std	Y+2, r23	; 0x02
    207e:	8b 83       	std	Y+3, r24	; 0x03
    2080:	9c 83       	std	Y+4, r25	; 0x04
    2082:	2d 83       	std	Y+5, r18	; 0x05
    2084:	3e 83       	std	Y+6, r19	; 0x06
    2086:	4f 83       	std	Y+7, r20	; 0x07
    2088:	58 87       	std	Y+8, r21	; 0x08
    208a:	89 e0       	ldi	r24, 0x09	; 9
    208c:	e8 2e       	mov	r14, r24
    208e:	f1 2c       	mov	r15, r1
    2090:	ec 0e       	add	r14, r28
    2092:	fd 1e       	adc	r15, r29
    2094:	ce 01       	movw	r24, r28
    2096:	01 96       	adiw	r24, 0x01	; 1
    2098:	b7 01       	movw	r22, r14
    209a:	0e 94 b6 12 	call	0x256c	; 0x256c <__unpack_f>
    209e:	8e 01       	movw	r16, r28
    20a0:	0f 5e       	subi	r16, 0xEF	; 239
    20a2:	1f 4f       	sbci	r17, 0xFF	; 255
    20a4:	ce 01       	movw	r24, r28
    20a6:	05 96       	adiw	r24, 0x05	; 5
    20a8:	b8 01       	movw	r22, r16
    20aa:	0e 94 b6 12 	call	0x256c	; 0x256c <__unpack_f>
    20ae:	89 85       	ldd	r24, Y+9	; 0x09
    20b0:	82 30       	cpi	r24, 0x02	; 2
    20b2:	40 f0       	brcs	.+16     	; 0x20c4 <__ltsf2+0x56>
    20b4:	89 89       	ldd	r24, Y+17	; 0x11
    20b6:	82 30       	cpi	r24, 0x02	; 2
    20b8:	28 f0       	brcs	.+10     	; 0x20c4 <__ltsf2+0x56>
    20ba:	c7 01       	movw	r24, r14
    20bc:	b8 01       	movw	r22, r16
    20be:	0e 94 2e 13 	call	0x265c	; 0x265c <__fpcmp_parts_f>
    20c2:	01 c0       	rjmp	.+2      	; 0x20c6 <__ltsf2+0x58>
    20c4:	81 e0       	ldi	r24, 0x01	; 1
    20c6:	68 96       	adiw	r28, 0x18	; 24
    20c8:	e6 e0       	ldi	r30, 0x06	; 6
    20ca:	0c 94 d6 13 	jmp	0x27ac	; 0x27ac <__epilogue_restores__+0x18>

000020ce <__floatsisf>:
    20ce:	a8 e0       	ldi	r26, 0x08	; 8
    20d0:	b0 e0       	ldi	r27, 0x00	; 0
    20d2:	ed e6       	ldi	r30, 0x6D	; 109
    20d4:	f0 e1       	ldi	r31, 0x10	; 16
    20d6:	0c 94 b7 13 	jmp	0x276e	; 0x276e <__prologue_saves__+0x12>
    20da:	9b 01       	movw	r18, r22
    20dc:	ac 01       	movw	r20, r24
    20de:	83 e0       	ldi	r24, 0x03	; 3
    20e0:	89 83       	std	Y+1, r24	; 0x01
    20e2:	da 01       	movw	r26, r20
    20e4:	c9 01       	movw	r24, r18
    20e6:	88 27       	eor	r24, r24
    20e8:	b7 fd       	sbrc	r27, 7
    20ea:	83 95       	inc	r24
    20ec:	99 27       	eor	r25, r25
    20ee:	aa 27       	eor	r26, r26
    20f0:	bb 27       	eor	r27, r27
    20f2:	b8 2e       	mov	r11, r24
    20f4:	21 15       	cp	r18, r1
    20f6:	31 05       	cpc	r19, r1
    20f8:	41 05       	cpc	r20, r1
    20fa:	51 05       	cpc	r21, r1
    20fc:	19 f4       	brne	.+6      	; 0x2104 <__floatsisf+0x36>
    20fe:	82 e0       	ldi	r24, 0x02	; 2
    2100:	89 83       	std	Y+1, r24	; 0x01
    2102:	3a c0       	rjmp	.+116    	; 0x2178 <__floatsisf+0xaa>
    2104:	88 23       	and	r24, r24
    2106:	a9 f0       	breq	.+42     	; 0x2132 <__floatsisf+0x64>
    2108:	20 30       	cpi	r18, 0x00	; 0
    210a:	80 e0       	ldi	r24, 0x00	; 0
    210c:	38 07       	cpc	r19, r24
    210e:	80 e0       	ldi	r24, 0x00	; 0
    2110:	48 07       	cpc	r20, r24
    2112:	80 e8       	ldi	r24, 0x80	; 128
    2114:	58 07       	cpc	r21, r24
    2116:	29 f4       	brne	.+10     	; 0x2122 <__floatsisf+0x54>
    2118:	60 e0       	ldi	r22, 0x00	; 0
    211a:	70 e0       	ldi	r23, 0x00	; 0
    211c:	80 e0       	ldi	r24, 0x00	; 0
    211e:	9f ec       	ldi	r25, 0xCF	; 207
    2120:	30 c0       	rjmp	.+96     	; 0x2182 <__floatsisf+0xb4>
    2122:	ee 24       	eor	r14, r14
    2124:	ff 24       	eor	r15, r15
    2126:	87 01       	movw	r16, r14
    2128:	e2 1a       	sub	r14, r18
    212a:	f3 0a       	sbc	r15, r19
    212c:	04 0b       	sbc	r16, r20
    212e:	15 0b       	sbc	r17, r21
    2130:	02 c0       	rjmp	.+4      	; 0x2136 <__floatsisf+0x68>
    2132:	79 01       	movw	r14, r18
    2134:	8a 01       	movw	r16, r20
    2136:	8e e1       	ldi	r24, 0x1E	; 30
    2138:	c8 2e       	mov	r12, r24
    213a:	d1 2c       	mov	r13, r1
    213c:	dc 82       	std	Y+4, r13	; 0x04
    213e:	cb 82       	std	Y+3, r12	; 0x03
    2140:	ed 82       	std	Y+5, r14	; 0x05
    2142:	fe 82       	std	Y+6, r15	; 0x06
    2144:	0f 83       	std	Y+7, r16	; 0x07
    2146:	18 87       	std	Y+8, r17	; 0x08
    2148:	c8 01       	movw	r24, r16
    214a:	b7 01       	movw	r22, r14
    214c:	0e 94 92 11 	call	0x2324	; 0x2324 <__clzsi2>
    2150:	01 97       	sbiw	r24, 0x01	; 1
    2152:	18 16       	cp	r1, r24
    2154:	19 06       	cpc	r1, r25
    2156:	84 f4       	brge	.+32     	; 0x2178 <__floatsisf+0xaa>
    2158:	08 2e       	mov	r0, r24
    215a:	04 c0       	rjmp	.+8      	; 0x2164 <__floatsisf+0x96>
    215c:	ee 0c       	add	r14, r14
    215e:	ff 1c       	adc	r15, r15
    2160:	00 1f       	adc	r16, r16
    2162:	11 1f       	adc	r17, r17
    2164:	0a 94       	dec	r0
    2166:	d2 f7       	brpl	.-12     	; 0x215c <__floatsisf+0x8e>
    2168:	ed 82       	std	Y+5, r14	; 0x05
    216a:	fe 82       	std	Y+6, r15	; 0x06
    216c:	0f 83       	std	Y+7, r16	; 0x07
    216e:	18 87       	std	Y+8, r17	; 0x08
    2170:	c8 1a       	sub	r12, r24
    2172:	d9 0a       	sbc	r13, r25
    2174:	dc 82       	std	Y+4, r13	; 0x04
    2176:	cb 82       	std	Y+3, r12	; 0x03
    2178:	ba 82       	std	Y+2, r11	; 0x02
    217a:	ce 01       	movw	r24, r28
    217c:	01 96       	adiw	r24, 0x01	; 1
    217e:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <__pack_f>
    2182:	28 96       	adiw	r28, 0x08	; 8
    2184:	e9 e0       	ldi	r30, 0x09	; 9
    2186:	0c 94 d3 13 	jmp	0x27a6	; 0x27a6 <__epilogue_restores__+0x12>

0000218a <__fixsfsi>:
    218a:	ac e0       	ldi	r26, 0x0C	; 12
    218c:	b0 e0       	ldi	r27, 0x00	; 0
    218e:	eb ec       	ldi	r30, 0xCB	; 203
    2190:	f0 e1       	ldi	r31, 0x10	; 16
    2192:	0c 94 be 13 	jmp	0x277c	; 0x277c <__prologue_saves__+0x20>
    2196:	69 83       	std	Y+1, r22	; 0x01
    2198:	7a 83       	std	Y+2, r23	; 0x02
    219a:	8b 83       	std	Y+3, r24	; 0x03
    219c:	9c 83       	std	Y+4, r25	; 0x04
    219e:	ce 01       	movw	r24, r28
    21a0:	01 96       	adiw	r24, 0x01	; 1
    21a2:	be 01       	movw	r22, r28
    21a4:	6b 5f       	subi	r22, 0xFB	; 251
    21a6:	7f 4f       	sbci	r23, 0xFF	; 255
    21a8:	0e 94 b6 12 	call	0x256c	; 0x256c <__unpack_f>
    21ac:	8d 81       	ldd	r24, Y+5	; 0x05
    21ae:	82 30       	cpi	r24, 0x02	; 2
    21b0:	61 f1       	breq	.+88     	; 0x220a <__fixsfsi+0x80>
    21b2:	82 30       	cpi	r24, 0x02	; 2
    21b4:	50 f1       	brcs	.+84     	; 0x220a <__fixsfsi+0x80>
    21b6:	84 30       	cpi	r24, 0x04	; 4
    21b8:	21 f4       	brne	.+8      	; 0x21c2 <__fixsfsi+0x38>
    21ba:	8e 81       	ldd	r24, Y+6	; 0x06
    21bc:	88 23       	and	r24, r24
    21be:	51 f1       	breq	.+84     	; 0x2214 <__fixsfsi+0x8a>
    21c0:	2e c0       	rjmp	.+92     	; 0x221e <__fixsfsi+0x94>
    21c2:	2f 81       	ldd	r18, Y+7	; 0x07
    21c4:	38 85       	ldd	r19, Y+8	; 0x08
    21c6:	37 fd       	sbrc	r19, 7
    21c8:	20 c0       	rjmp	.+64     	; 0x220a <__fixsfsi+0x80>
    21ca:	6e 81       	ldd	r22, Y+6	; 0x06
    21cc:	2f 31       	cpi	r18, 0x1F	; 31
    21ce:	31 05       	cpc	r19, r1
    21d0:	1c f0       	brlt	.+6      	; 0x21d8 <__fixsfsi+0x4e>
    21d2:	66 23       	and	r22, r22
    21d4:	f9 f0       	breq	.+62     	; 0x2214 <__fixsfsi+0x8a>
    21d6:	23 c0       	rjmp	.+70     	; 0x221e <__fixsfsi+0x94>
    21d8:	8e e1       	ldi	r24, 0x1E	; 30
    21da:	90 e0       	ldi	r25, 0x00	; 0
    21dc:	82 1b       	sub	r24, r18
    21de:	93 0b       	sbc	r25, r19
    21e0:	29 85       	ldd	r18, Y+9	; 0x09
    21e2:	3a 85       	ldd	r19, Y+10	; 0x0a
    21e4:	4b 85       	ldd	r20, Y+11	; 0x0b
    21e6:	5c 85       	ldd	r21, Y+12	; 0x0c
    21e8:	04 c0       	rjmp	.+8      	; 0x21f2 <__fixsfsi+0x68>
    21ea:	56 95       	lsr	r21
    21ec:	47 95       	ror	r20
    21ee:	37 95       	ror	r19
    21f0:	27 95       	ror	r18
    21f2:	8a 95       	dec	r24
    21f4:	d2 f7       	brpl	.-12     	; 0x21ea <__fixsfsi+0x60>
    21f6:	66 23       	and	r22, r22
    21f8:	b1 f0       	breq	.+44     	; 0x2226 <__fixsfsi+0x9c>
    21fa:	50 95       	com	r21
    21fc:	40 95       	com	r20
    21fe:	30 95       	com	r19
    2200:	21 95       	neg	r18
    2202:	3f 4f       	sbci	r19, 0xFF	; 255
    2204:	4f 4f       	sbci	r20, 0xFF	; 255
    2206:	5f 4f       	sbci	r21, 0xFF	; 255
    2208:	0e c0       	rjmp	.+28     	; 0x2226 <__fixsfsi+0x9c>
    220a:	20 e0       	ldi	r18, 0x00	; 0
    220c:	30 e0       	ldi	r19, 0x00	; 0
    220e:	40 e0       	ldi	r20, 0x00	; 0
    2210:	50 e0       	ldi	r21, 0x00	; 0
    2212:	09 c0       	rjmp	.+18     	; 0x2226 <__fixsfsi+0x9c>
    2214:	2f ef       	ldi	r18, 0xFF	; 255
    2216:	3f ef       	ldi	r19, 0xFF	; 255
    2218:	4f ef       	ldi	r20, 0xFF	; 255
    221a:	5f e7       	ldi	r21, 0x7F	; 127
    221c:	04 c0       	rjmp	.+8      	; 0x2226 <__fixsfsi+0x9c>
    221e:	20 e0       	ldi	r18, 0x00	; 0
    2220:	30 e0       	ldi	r19, 0x00	; 0
    2222:	40 e0       	ldi	r20, 0x00	; 0
    2224:	50 e8       	ldi	r21, 0x80	; 128
    2226:	b9 01       	movw	r22, r18
    2228:	ca 01       	movw	r24, r20
    222a:	2c 96       	adiw	r28, 0x0c	; 12
    222c:	e2 e0       	ldi	r30, 0x02	; 2
    222e:	0c 94 da 13 	jmp	0x27b4	; 0x27b4 <__epilogue_restores__+0x20>

00002232 <__floatunsisf>:
    2232:	a8 e0       	ldi	r26, 0x08	; 8
    2234:	b0 e0       	ldi	r27, 0x00	; 0
    2236:	ef e1       	ldi	r30, 0x1F	; 31
    2238:	f1 e1       	ldi	r31, 0x11	; 17
    223a:	0c 94 b6 13 	jmp	0x276c	; 0x276c <__prologue_saves__+0x10>
    223e:	7b 01       	movw	r14, r22
    2240:	8c 01       	movw	r16, r24
    2242:	61 15       	cp	r22, r1
    2244:	71 05       	cpc	r23, r1
    2246:	81 05       	cpc	r24, r1
    2248:	91 05       	cpc	r25, r1
    224a:	19 f4       	brne	.+6      	; 0x2252 <__floatunsisf+0x20>
    224c:	82 e0       	ldi	r24, 0x02	; 2
    224e:	89 83       	std	Y+1, r24	; 0x01
    2250:	60 c0       	rjmp	.+192    	; 0x2312 <__floatunsisf+0xe0>
    2252:	83 e0       	ldi	r24, 0x03	; 3
    2254:	89 83       	std	Y+1, r24	; 0x01
    2256:	8e e1       	ldi	r24, 0x1E	; 30
    2258:	c8 2e       	mov	r12, r24
    225a:	d1 2c       	mov	r13, r1
    225c:	dc 82       	std	Y+4, r13	; 0x04
    225e:	cb 82       	std	Y+3, r12	; 0x03
    2260:	ed 82       	std	Y+5, r14	; 0x05
    2262:	fe 82       	std	Y+6, r15	; 0x06
    2264:	0f 83       	std	Y+7, r16	; 0x07
    2266:	18 87       	std	Y+8, r17	; 0x08
    2268:	c8 01       	movw	r24, r16
    226a:	b7 01       	movw	r22, r14
    226c:	0e 94 92 11 	call	0x2324	; 0x2324 <__clzsi2>
    2270:	fc 01       	movw	r30, r24
    2272:	31 97       	sbiw	r30, 0x01	; 1
    2274:	f7 ff       	sbrs	r31, 7
    2276:	3b c0       	rjmp	.+118    	; 0x22ee <__floatunsisf+0xbc>
    2278:	22 27       	eor	r18, r18
    227a:	33 27       	eor	r19, r19
    227c:	2e 1b       	sub	r18, r30
    227e:	3f 0b       	sbc	r19, r31
    2280:	57 01       	movw	r10, r14
    2282:	68 01       	movw	r12, r16
    2284:	02 2e       	mov	r0, r18
    2286:	04 c0       	rjmp	.+8      	; 0x2290 <__floatunsisf+0x5e>
    2288:	d6 94       	lsr	r13
    228a:	c7 94       	ror	r12
    228c:	b7 94       	ror	r11
    228e:	a7 94       	ror	r10
    2290:	0a 94       	dec	r0
    2292:	d2 f7       	brpl	.-12     	; 0x2288 <__floatunsisf+0x56>
    2294:	40 e0       	ldi	r20, 0x00	; 0
    2296:	50 e0       	ldi	r21, 0x00	; 0
    2298:	60 e0       	ldi	r22, 0x00	; 0
    229a:	70 e0       	ldi	r23, 0x00	; 0
    229c:	81 e0       	ldi	r24, 0x01	; 1
    229e:	90 e0       	ldi	r25, 0x00	; 0
    22a0:	a0 e0       	ldi	r26, 0x00	; 0
    22a2:	b0 e0       	ldi	r27, 0x00	; 0
    22a4:	04 c0       	rjmp	.+8      	; 0x22ae <__floatunsisf+0x7c>
    22a6:	88 0f       	add	r24, r24
    22a8:	99 1f       	adc	r25, r25
    22aa:	aa 1f       	adc	r26, r26
    22ac:	bb 1f       	adc	r27, r27
    22ae:	2a 95       	dec	r18
    22b0:	d2 f7       	brpl	.-12     	; 0x22a6 <__floatunsisf+0x74>
    22b2:	01 97       	sbiw	r24, 0x01	; 1
    22b4:	a1 09       	sbc	r26, r1
    22b6:	b1 09       	sbc	r27, r1
    22b8:	8e 21       	and	r24, r14
    22ba:	9f 21       	and	r25, r15
    22bc:	a0 23       	and	r26, r16
    22be:	b1 23       	and	r27, r17
    22c0:	00 97       	sbiw	r24, 0x00	; 0
    22c2:	a1 05       	cpc	r26, r1
    22c4:	b1 05       	cpc	r27, r1
    22c6:	21 f0       	breq	.+8      	; 0x22d0 <__floatunsisf+0x9e>
    22c8:	41 e0       	ldi	r20, 0x01	; 1
    22ca:	50 e0       	ldi	r21, 0x00	; 0
    22cc:	60 e0       	ldi	r22, 0x00	; 0
    22ce:	70 e0       	ldi	r23, 0x00	; 0
    22d0:	4a 29       	or	r20, r10
    22d2:	5b 29       	or	r21, r11
    22d4:	6c 29       	or	r22, r12
    22d6:	7d 29       	or	r23, r13
    22d8:	4d 83       	std	Y+5, r20	; 0x05
    22da:	5e 83       	std	Y+6, r21	; 0x06
    22dc:	6f 83       	std	Y+7, r22	; 0x07
    22de:	78 87       	std	Y+8, r23	; 0x08
    22e0:	8e e1       	ldi	r24, 0x1E	; 30
    22e2:	90 e0       	ldi	r25, 0x00	; 0
    22e4:	8e 1b       	sub	r24, r30
    22e6:	9f 0b       	sbc	r25, r31
    22e8:	9c 83       	std	Y+4, r25	; 0x04
    22ea:	8b 83       	std	Y+3, r24	; 0x03
    22ec:	12 c0       	rjmp	.+36     	; 0x2312 <__floatunsisf+0xe0>
    22ee:	30 97       	sbiw	r30, 0x00	; 0
    22f0:	81 f0       	breq	.+32     	; 0x2312 <__floatunsisf+0xe0>
    22f2:	0e 2e       	mov	r0, r30
    22f4:	04 c0       	rjmp	.+8      	; 0x22fe <__floatunsisf+0xcc>
    22f6:	ee 0c       	add	r14, r14
    22f8:	ff 1c       	adc	r15, r15
    22fa:	00 1f       	adc	r16, r16
    22fc:	11 1f       	adc	r17, r17
    22fe:	0a 94       	dec	r0
    2300:	d2 f7       	brpl	.-12     	; 0x22f6 <__floatunsisf+0xc4>
    2302:	ed 82       	std	Y+5, r14	; 0x05
    2304:	fe 82       	std	Y+6, r15	; 0x06
    2306:	0f 83       	std	Y+7, r16	; 0x07
    2308:	18 87       	std	Y+8, r17	; 0x08
    230a:	ce 1a       	sub	r12, r30
    230c:	df 0a       	sbc	r13, r31
    230e:	dc 82       	std	Y+4, r13	; 0x04
    2310:	cb 82       	std	Y+3, r12	; 0x03
    2312:	1a 82       	std	Y+2, r1	; 0x02
    2314:	ce 01       	movw	r24, r28
    2316:	01 96       	adiw	r24, 0x01	; 1
    2318:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <__pack_f>
    231c:	28 96       	adiw	r28, 0x08	; 8
    231e:	ea e0       	ldi	r30, 0x0A	; 10
    2320:	0c 94 d2 13 	jmp	0x27a4	; 0x27a4 <__epilogue_restores__+0x10>

00002324 <__clzsi2>:
    2324:	ef 92       	push	r14
    2326:	ff 92       	push	r15
    2328:	0f 93       	push	r16
    232a:	1f 93       	push	r17
    232c:	7b 01       	movw	r14, r22
    232e:	8c 01       	movw	r16, r24
    2330:	80 e0       	ldi	r24, 0x00	; 0
    2332:	e8 16       	cp	r14, r24
    2334:	80 e0       	ldi	r24, 0x00	; 0
    2336:	f8 06       	cpc	r15, r24
    2338:	81 e0       	ldi	r24, 0x01	; 1
    233a:	08 07       	cpc	r16, r24
    233c:	80 e0       	ldi	r24, 0x00	; 0
    233e:	18 07       	cpc	r17, r24
    2340:	88 f4       	brcc	.+34     	; 0x2364 <__clzsi2+0x40>
    2342:	8f ef       	ldi	r24, 0xFF	; 255
    2344:	e8 16       	cp	r14, r24
    2346:	f1 04       	cpc	r15, r1
    2348:	01 05       	cpc	r16, r1
    234a:	11 05       	cpc	r17, r1
    234c:	31 f0       	breq	.+12     	; 0x235a <__clzsi2+0x36>
    234e:	28 f0       	brcs	.+10     	; 0x235a <__clzsi2+0x36>
    2350:	88 e0       	ldi	r24, 0x08	; 8
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	a0 e0       	ldi	r26, 0x00	; 0
    2356:	b0 e0       	ldi	r27, 0x00	; 0
    2358:	17 c0       	rjmp	.+46     	; 0x2388 <__clzsi2+0x64>
    235a:	80 e0       	ldi	r24, 0x00	; 0
    235c:	90 e0       	ldi	r25, 0x00	; 0
    235e:	a0 e0       	ldi	r26, 0x00	; 0
    2360:	b0 e0       	ldi	r27, 0x00	; 0
    2362:	12 c0       	rjmp	.+36     	; 0x2388 <__clzsi2+0x64>
    2364:	80 e0       	ldi	r24, 0x00	; 0
    2366:	e8 16       	cp	r14, r24
    2368:	80 e0       	ldi	r24, 0x00	; 0
    236a:	f8 06       	cpc	r15, r24
    236c:	80 e0       	ldi	r24, 0x00	; 0
    236e:	08 07       	cpc	r16, r24
    2370:	81 e0       	ldi	r24, 0x01	; 1
    2372:	18 07       	cpc	r17, r24
    2374:	28 f0       	brcs	.+10     	; 0x2380 <__clzsi2+0x5c>
    2376:	88 e1       	ldi	r24, 0x18	; 24
    2378:	90 e0       	ldi	r25, 0x00	; 0
    237a:	a0 e0       	ldi	r26, 0x00	; 0
    237c:	b0 e0       	ldi	r27, 0x00	; 0
    237e:	04 c0       	rjmp	.+8      	; 0x2388 <__clzsi2+0x64>
    2380:	80 e1       	ldi	r24, 0x10	; 16
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	a0 e0       	ldi	r26, 0x00	; 0
    2386:	b0 e0       	ldi	r27, 0x00	; 0
    2388:	20 e2       	ldi	r18, 0x20	; 32
    238a:	30 e0       	ldi	r19, 0x00	; 0
    238c:	40 e0       	ldi	r20, 0x00	; 0
    238e:	50 e0       	ldi	r21, 0x00	; 0
    2390:	28 1b       	sub	r18, r24
    2392:	39 0b       	sbc	r19, r25
    2394:	4a 0b       	sbc	r20, r26
    2396:	5b 0b       	sbc	r21, r27
    2398:	04 c0       	rjmp	.+8      	; 0x23a2 <__clzsi2+0x7e>
    239a:	16 95       	lsr	r17
    239c:	07 95       	ror	r16
    239e:	f7 94       	ror	r15
    23a0:	e7 94       	ror	r14
    23a2:	8a 95       	dec	r24
    23a4:	d2 f7       	brpl	.-12     	; 0x239a <__clzsi2+0x76>
    23a6:	f7 01       	movw	r30, r14
    23a8:	ea 5b       	subi	r30, 0xBA	; 186
    23aa:	fe 4f       	sbci	r31, 0xFE	; 254
    23ac:	80 81       	ld	r24, Z
    23ae:	28 1b       	sub	r18, r24
    23b0:	31 09       	sbc	r19, r1
    23b2:	41 09       	sbc	r20, r1
    23b4:	51 09       	sbc	r21, r1
    23b6:	c9 01       	movw	r24, r18
    23b8:	1f 91       	pop	r17
    23ba:	0f 91       	pop	r16
    23bc:	ff 90       	pop	r15
    23be:	ef 90       	pop	r14
    23c0:	08 95       	ret

000023c2 <__pack_f>:
    23c2:	df 92       	push	r13
    23c4:	ef 92       	push	r14
    23c6:	ff 92       	push	r15
    23c8:	0f 93       	push	r16
    23ca:	1f 93       	push	r17
    23cc:	fc 01       	movw	r30, r24
    23ce:	e4 80       	ldd	r14, Z+4	; 0x04
    23d0:	f5 80       	ldd	r15, Z+5	; 0x05
    23d2:	06 81       	ldd	r16, Z+6	; 0x06
    23d4:	17 81       	ldd	r17, Z+7	; 0x07
    23d6:	d1 80       	ldd	r13, Z+1	; 0x01
    23d8:	80 81       	ld	r24, Z
    23da:	82 30       	cpi	r24, 0x02	; 2
    23dc:	48 f4       	brcc	.+18     	; 0x23f0 <__pack_f+0x2e>
    23de:	80 e0       	ldi	r24, 0x00	; 0
    23e0:	90 e0       	ldi	r25, 0x00	; 0
    23e2:	a0 e1       	ldi	r26, 0x10	; 16
    23e4:	b0 e0       	ldi	r27, 0x00	; 0
    23e6:	e8 2a       	or	r14, r24
    23e8:	f9 2a       	or	r15, r25
    23ea:	0a 2b       	or	r16, r26
    23ec:	1b 2b       	or	r17, r27
    23ee:	a5 c0       	rjmp	.+330    	; 0x253a <__pack_f+0x178>
    23f0:	84 30       	cpi	r24, 0x04	; 4
    23f2:	09 f4       	brne	.+2      	; 0x23f6 <__pack_f+0x34>
    23f4:	9f c0       	rjmp	.+318    	; 0x2534 <__pack_f+0x172>
    23f6:	82 30       	cpi	r24, 0x02	; 2
    23f8:	21 f4       	brne	.+8      	; 0x2402 <__pack_f+0x40>
    23fa:	ee 24       	eor	r14, r14
    23fc:	ff 24       	eor	r15, r15
    23fe:	87 01       	movw	r16, r14
    2400:	05 c0       	rjmp	.+10     	; 0x240c <__pack_f+0x4a>
    2402:	e1 14       	cp	r14, r1
    2404:	f1 04       	cpc	r15, r1
    2406:	01 05       	cpc	r16, r1
    2408:	11 05       	cpc	r17, r1
    240a:	19 f4       	brne	.+6      	; 0x2412 <__pack_f+0x50>
    240c:	e0 e0       	ldi	r30, 0x00	; 0
    240e:	f0 e0       	ldi	r31, 0x00	; 0
    2410:	96 c0       	rjmp	.+300    	; 0x253e <__pack_f+0x17c>
    2412:	62 81       	ldd	r22, Z+2	; 0x02
    2414:	73 81       	ldd	r23, Z+3	; 0x03
    2416:	9f ef       	ldi	r25, 0xFF	; 255
    2418:	62 38       	cpi	r22, 0x82	; 130
    241a:	79 07       	cpc	r23, r25
    241c:	0c f0       	brlt	.+2      	; 0x2420 <__pack_f+0x5e>
    241e:	5b c0       	rjmp	.+182    	; 0x24d6 <__pack_f+0x114>
    2420:	22 e8       	ldi	r18, 0x82	; 130
    2422:	3f ef       	ldi	r19, 0xFF	; 255
    2424:	26 1b       	sub	r18, r22
    2426:	37 0b       	sbc	r19, r23
    2428:	2a 31       	cpi	r18, 0x1A	; 26
    242a:	31 05       	cpc	r19, r1
    242c:	2c f0       	brlt	.+10     	; 0x2438 <__pack_f+0x76>
    242e:	20 e0       	ldi	r18, 0x00	; 0
    2430:	30 e0       	ldi	r19, 0x00	; 0
    2432:	40 e0       	ldi	r20, 0x00	; 0
    2434:	50 e0       	ldi	r21, 0x00	; 0
    2436:	2a c0       	rjmp	.+84     	; 0x248c <__pack_f+0xca>
    2438:	b8 01       	movw	r22, r16
    243a:	a7 01       	movw	r20, r14
    243c:	02 2e       	mov	r0, r18
    243e:	04 c0       	rjmp	.+8      	; 0x2448 <__pack_f+0x86>
    2440:	76 95       	lsr	r23
    2442:	67 95       	ror	r22
    2444:	57 95       	ror	r21
    2446:	47 95       	ror	r20
    2448:	0a 94       	dec	r0
    244a:	d2 f7       	brpl	.-12     	; 0x2440 <__pack_f+0x7e>
    244c:	81 e0       	ldi	r24, 0x01	; 1
    244e:	90 e0       	ldi	r25, 0x00	; 0
    2450:	a0 e0       	ldi	r26, 0x00	; 0
    2452:	b0 e0       	ldi	r27, 0x00	; 0
    2454:	04 c0       	rjmp	.+8      	; 0x245e <__pack_f+0x9c>
    2456:	88 0f       	add	r24, r24
    2458:	99 1f       	adc	r25, r25
    245a:	aa 1f       	adc	r26, r26
    245c:	bb 1f       	adc	r27, r27
    245e:	2a 95       	dec	r18
    2460:	d2 f7       	brpl	.-12     	; 0x2456 <__pack_f+0x94>
    2462:	01 97       	sbiw	r24, 0x01	; 1
    2464:	a1 09       	sbc	r26, r1
    2466:	b1 09       	sbc	r27, r1
    2468:	8e 21       	and	r24, r14
    246a:	9f 21       	and	r25, r15
    246c:	a0 23       	and	r26, r16
    246e:	b1 23       	and	r27, r17
    2470:	00 97       	sbiw	r24, 0x00	; 0
    2472:	a1 05       	cpc	r26, r1
    2474:	b1 05       	cpc	r27, r1
    2476:	21 f0       	breq	.+8      	; 0x2480 <__pack_f+0xbe>
    2478:	81 e0       	ldi	r24, 0x01	; 1
    247a:	90 e0       	ldi	r25, 0x00	; 0
    247c:	a0 e0       	ldi	r26, 0x00	; 0
    247e:	b0 e0       	ldi	r27, 0x00	; 0
    2480:	9a 01       	movw	r18, r20
    2482:	ab 01       	movw	r20, r22
    2484:	28 2b       	or	r18, r24
    2486:	39 2b       	or	r19, r25
    2488:	4a 2b       	or	r20, r26
    248a:	5b 2b       	or	r21, r27
    248c:	da 01       	movw	r26, r20
    248e:	c9 01       	movw	r24, r18
    2490:	8f 77       	andi	r24, 0x7F	; 127
    2492:	90 70       	andi	r25, 0x00	; 0
    2494:	a0 70       	andi	r26, 0x00	; 0
    2496:	b0 70       	andi	r27, 0x00	; 0
    2498:	80 34       	cpi	r24, 0x40	; 64
    249a:	91 05       	cpc	r25, r1
    249c:	a1 05       	cpc	r26, r1
    249e:	b1 05       	cpc	r27, r1
    24a0:	39 f4       	brne	.+14     	; 0x24b0 <__pack_f+0xee>
    24a2:	27 ff       	sbrs	r18, 7
    24a4:	09 c0       	rjmp	.+18     	; 0x24b8 <__pack_f+0xf6>
    24a6:	20 5c       	subi	r18, 0xC0	; 192
    24a8:	3f 4f       	sbci	r19, 0xFF	; 255
    24aa:	4f 4f       	sbci	r20, 0xFF	; 255
    24ac:	5f 4f       	sbci	r21, 0xFF	; 255
    24ae:	04 c0       	rjmp	.+8      	; 0x24b8 <__pack_f+0xf6>
    24b0:	21 5c       	subi	r18, 0xC1	; 193
    24b2:	3f 4f       	sbci	r19, 0xFF	; 255
    24b4:	4f 4f       	sbci	r20, 0xFF	; 255
    24b6:	5f 4f       	sbci	r21, 0xFF	; 255
    24b8:	e0 e0       	ldi	r30, 0x00	; 0
    24ba:	f0 e0       	ldi	r31, 0x00	; 0
    24bc:	20 30       	cpi	r18, 0x00	; 0
    24be:	a0 e0       	ldi	r26, 0x00	; 0
    24c0:	3a 07       	cpc	r19, r26
    24c2:	a0 e0       	ldi	r26, 0x00	; 0
    24c4:	4a 07       	cpc	r20, r26
    24c6:	a0 e4       	ldi	r26, 0x40	; 64
    24c8:	5a 07       	cpc	r21, r26
    24ca:	10 f0       	brcs	.+4      	; 0x24d0 <__pack_f+0x10e>
    24cc:	e1 e0       	ldi	r30, 0x01	; 1
    24ce:	f0 e0       	ldi	r31, 0x00	; 0
    24d0:	79 01       	movw	r14, r18
    24d2:	8a 01       	movw	r16, r20
    24d4:	27 c0       	rjmp	.+78     	; 0x2524 <__pack_f+0x162>
    24d6:	60 38       	cpi	r22, 0x80	; 128
    24d8:	71 05       	cpc	r23, r1
    24da:	64 f5       	brge	.+88     	; 0x2534 <__pack_f+0x172>
    24dc:	fb 01       	movw	r30, r22
    24de:	e1 58       	subi	r30, 0x81	; 129
    24e0:	ff 4f       	sbci	r31, 0xFF	; 255
    24e2:	d8 01       	movw	r26, r16
    24e4:	c7 01       	movw	r24, r14
    24e6:	8f 77       	andi	r24, 0x7F	; 127
    24e8:	90 70       	andi	r25, 0x00	; 0
    24ea:	a0 70       	andi	r26, 0x00	; 0
    24ec:	b0 70       	andi	r27, 0x00	; 0
    24ee:	80 34       	cpi	r24, 0x40	; 64
    24f0:	91 05       	cpc	r25, r1
    24f2:	a1 05       	cpc	r26, r1
    24f4:	b1 05       	cpc	r27, r1
    24f6:	39 f4       	brne	.+14     	; 0x2506 <__pack_f+0x144>
    24f8:	e7 fe       	sbrs	r14, 7
    24fa:	0d c0       	rjmp	.+26     	; 0x2516 <__pack_f+0x154>
    24fc:	80 e4       	ldi	r24, 0x40	; 64
    24fe:	90 e0       	ldi	r25, 0x00	; 0
    2500:	a0 e0       	ldi	r26, 0x00	; 0
    2502:	b0 e0       	ldi	r27, 0x00	; 0
    2504:	04 c0       	rjmp	.+8      	; 0x250e <__pack_f+0x14c>
    2506:	8f e3       	ldi	r24, 0x3F	; 63
    2508:	90 e0       	ldi	r25, 0x00	; 0
    250a:	a0 e0       	ldi	r26, 0x00	; 0
    250c:	b0 e0       	ldi	r27, 0x00	; 0
    250e:	e8 0e       	add	r14, r24
    2510:	f9 1e       	adc	r15, r25
    2512:	0a 1f       	adc	r16, r26
    2514:	1b 1f       	adc	r17, r27
    2516:	17 ff       	sbrs	r17, 7
    2518:	05 c0       	rjmp	.+10     	; 0x2524 <__pack_f+0x162>
    251a:	16 95       	lsr	r17
    251c:	07 95       	ror	r16
    251e:	f7 94       	ror	r15
    2520:	e7 94       	ror	r14
    2522:	31 96       	adiw	r30, 0x01	; 1
    2524:	87 e0       	ldi	r24, 0x07	; 7
    2526:	16 95       	lsr	r17
    2528:	07 95       	ror	r16
    252a:	f7 94       	ror	r15
    252c:	e7 94       	ror	r14
    252e:	8a 95       	dec	r24
    2530:	d1 f7       	brne	.-12     	; 0x2526 <__pack_f+0x164>
    2532:	05 c0       	rjmp	.+10     	; 0x253e <__pack_f+0x17c>
    2534:	ee 24       	eor	r14, r14
    2536:	ff 24       	eor	r15, r15
    2538:	87 01       	movw	r16, r14
    253a:	ef ef       	ldi	r30, 0xFF	; 255
    253c:	f0 e0       	ldi	r31, 0x00	; 0
    253e:	6e 2f       	mov	r22, r30
    2540:	67 95       	ror	r22
    2542:	66 27       	eor	r22, r22
    2544:	67 95       	ror	r22
    2546:	90 2f       	mov	r25, r16
    2548:	9f 77       	andi	r25, 0x7F	; 127
    254a:	d7 94       	ror	r13
    254c:	dd 24       	eor	r13, r13
    254e:	d7 94       	ror	r13
    2550:	8e 2f       	mov	r24, r30
    2552:	86 95       	lsr	r24
    2554:	49 2f       	mov	r20, r25
    2556:	46 2b       	or	r20, r22
    2558:	58 2f       	mov	r21, r24
    255a:	5d 29       	or	r21, r13
    255c:	b7 01       	movw	r22, r14
    255e:	ca 01       	movw	r24, r20
    2560:	1f 91       	pop	r17
    2562:	0f 91       	pop	r16
    2564:	ff 90       	pop	r15
    2566:	ef 90       	pop	r14
    2568:	df 90       	pop	r13
    256a:	08 95       	ret

0000256c <__unpack_f>:
    256c:	fc 01       	movw	r30, r24
    256e:	db 01       	movw	r26, r22
    2570:	40 81       	ld	r20, Z
    2572:	51 81       	ldd	r21, Z+1	; 0x01
    2574:	22 81       	ldd	r18, Z+2	; 0x02
    2576:	62 2f       	mov	r22, r18
    2578:	6f 77       	andi	r22, 0x7F	; 127
    257a:	70 e0       	ldi	r23, 0x00	; 0
    257c:	22 1f       	adc	r18, r18
    257e:	22 27       	eor	r18, r18
    2580:	22 1f       	adc	r18, r18
    2582:	93 81       	ldd	r25, Z+3	; 0x03
    2584:	89 2f       	mov	r24, r25
    2586:	88 0f       	add	r24, r24
    2588:	82 2b       	or	r24, r18
    258a:	28 2f       	mov	r18, r24
    258c:	30 e0       	ldi	r19, 0x00	; 0
    258e:	99 1f       	adc	r25, r25
    2590:	99 27       	eor	r25, r25
    2592:	99 1f       	adc	r25, r25
    2594:	11 96       	adiw	r26, 0x01	; 1
    2596:	9c 93       	st	X, r25
    2598:	11 97       	sbiw	r26, 0x01	; 1
    259a:	21 15       	cp	r18, r1
    259c:	31 05       	cpc	r19, r1
    259e:	a9 f5       	brne	.+106    	; 0x260a <__unpack_f+0x9e>
    25a0:	41 15       	cp	r20, r1
    25a2:	51 05       	cpc	r21, r1
    25a4:	61 05       	cpc	r22, r1
    25a6:	71 05       	cpc	r23, r1
    25a8:	11 f4       	brne	.+4      	; 0x25ae <__unpack_f+0x42>
    25aa:	82 e0       	ldi	r24, 0x02	; 2
    25ac:	37 c0       	rjmp	.+110    	; 0x261c <__unpack_f+0xb0>
    25ae:	82 e8       	ldi	r24, 0x82	; 130
    25b0:	9f ef       	ldi	r25, 0xFF	; 255
    25b2:	13 96       	adiw	r26, 0x03	; 3
    25b4:	9c 93       	st	X, r25
    25b6:	8e 93       	st	-X, r24
    25b8:	12 97       	sbiw	r26, 0x02	; 2
    25ba:	9a 01       	movw	r18, r20
    25bc:	ab 01       	movw	r20, r22
    25be:	67 e0       	ldi	r22, 0x07	; 7
    25c0:	22 0f       	add	r18, r18
    25c2:	33 1f       	adc	r19, r19
    25c4:	44 1f       	adc	r20, r20
    25c6:	55 1f       	adc	r21, r21
    25c8:	6a 95       	dec	r22
    25ca:	d1 f7       	brne	.-12     	; 0x25c0 <__unpack_f+0x54>
    25cc:	83 e0       	ldi	r24, 0x03	; 3
    25ce:	8c 93       	st	X, r24
    25d0:	0d c0       	rjmp	.+26     	; 0x25ec <__unpack_f+0x80>
    25d2:	22 0f       	add	r18, r18
    25d4:	33 1f       	adc	r19, r19
    25d6:	44 1f       	adc	r20, r20
    25d8:	55 1f       	adc	r21, r21
    25da:	12 96       	adiw	r26, 0x02	; 2
    25dc:	8d 91       	ld	r24, X+
    25de:	9c 91       	ld	r25, X
    25e0:	13 97       	sbiw	r26, 0x03	; 3
    25e2:	01 97       	sbiw	r24, 0x01	; 1
    25e4:	13 96       	adiw	r26, 0x03	; 3
    25e6:	9c 93       	st	X, r25
    25e8:	8e 93       	st	-X, r24
    25ea:	12 97       	sbiw	r26, 0x02	; 2
    25ec:	20 30       	cpi	r18, 0x00	; 0
    25ee:	80 e0       	ldi	r24, 0x00	; 0
    25f0:	38 07       	cpc	r19, r24
    25f2:	80 e0       	ldi	r24, 0x00	; 0
    25f4:	48 07       	cpc	r20, r24
    25f6:	80 e4       	ldi	r24, 0x40	; 64
    25f8:	58 07       	cpc	r21, r24
    25fa:	58 f3       	brcs	.-42     	; 0x25d2 <__unpack_f+0x66>
    25fc:	14 96       	adiw	r26, 0x04	; 4
    25fe:	2d 93       	st	X+, r18
    2600:	3d 93       	st	X+, r19
    2602:	4d 93       	st	X+, r20
    2604:	5c 93       	st	X, r21
    2606:	17 97       	sbiw	r26, 0x07	; 7
    2608:	08 95       	ret
    260a:	2f 3f       	cpi	r18, 0xFF	; 255
    260c:	31 05       	cpc	r19, r1
    260e:	79 f4       	brne	.+30     	; 0x262e <__unpack_f+0xc2>
    2610:	41 15       	cp	r20, r1
    2612:	51 05       	cpc	r21, r1
    2614:	61 05       	cpc	r22, r1
    2616:	71 05       	cpc	r23, r1
    2618:	19 f4       	brne	.+6      	; 0x2620 <__unpack_f+0xb4>
    261a:	84 e0       	ldi	r24, 0x04	; 4
    261c:	8c 93       	st	X, r24
    261e:	08 95       	ret
    2620:	64 ff       	sbrs	r22, 4
    2622:	03 c0       	rjmp	.+6      	; 0x262a <__unpack_f+0xbe>
    2624:	81 e0       	ldi	r24, 0x01	; 1
    2626:	8c 93       	st	X, r24
    2628:	12 c0       	rjmp	.+36     	; 0x264e <__unpack_f+0xe2>
    262a:	1c 92       	st	X, r1
    262c:	10 c0       	rjmp	.+32     	; 0x264e <__unpack_f+0xe2>
    262e:	2f 57       	subi	r18, 0x7F	; 127
    2630:	30 40       	sbci	r19, 0x00	; 0
    2632:	13 96       	adiw	r26, 0x03	; 3
    2634:	3c 93       	st	X, r19
    2636:	2e 93       	st	-X, r18
    2638:	12 97       	sbiw	r26, 0x02	; 2
    263a:	83 e0       	ldi	r24, 0x03	; 3
    263c:	8c 93       	st	X, r24
    263e:	87 e0       	ldi	r24, 0x07	; 7
    2640:	44 0f       	add	r20, r20
    2642:	55 1f       	adc	r21, r21
    2644:	66 1f       	adc	r22, r22
    2646:	77 1f       	adc	r23, r23
    2648:	8a 95       	dec	r24
    264a:	d1 f7       	brne	.-12     	; 0x2640 <__unpack_f+0xd4>
    264c:	70 64       	ori	r23, 0x40	; 64
    264e:	14 96       	adiw	r26, 0x04	; 4
    2650:	4d 93       	st	X+, r20
    2652:	5d 93       	st	X+, r21
    2654:	6d 93       	st	X+, r22
    2656:	7c 93       	st	X, r23
    2658:	17 97       	sbiw	r26, 0x07	; 7
    265a:	08 95       	ret

0000265c <__fpcmp_parts_f>:
    265c:	1f 93       	push	r17
    265e:	dc 01       	movw	r26, r24
    2660:	fb 01       	movw	r30, r22
    2662:	9c 91       	ld	r25, X
    2664:	92 30       	cpi	r25, 0x02	; 2
    2666:	08 f4       	brcc	.+2      	; 0x266a <__fpcmp_parts_f+0xe>
    2668:	47 c0       	rjmp	.+142    	; 0x26f8 <__fpcmp_parts_f+0x9c>
    266a:	80 81       	ld	r24, Z
    266c:	82 30       	cpi	r24, 0x02	; 2
    266e:	08 f4       	brcc	.+2      	; 0x2672 <__fpcmp_parts_f+0x16>
    2670:	43 c0       	rjmp	.+134    	; 0x26f8 <__fpcmp_parts_f+0x9c>
    2672:	94 30       	cpi	r25, 0x04	; 4
    2674:	51 f4       	brne	.+20     	; 0x268a <__fpcmp_parts_f+0x2e>
    2676:	11 96       	adiw	r26, 0x01	; 1
    2678:	1c 91       	ld	r17, X
    267a:	84 30       	cpi	r24, 0x04	; 4
    267c:	99 f5       	brne	.+102    	; 0x26e4 <__fpcmp_parts_f+0x88>
    267e:	81 81       	ldd	r24, Z+1	; 0x01
    2680:	68 2f       	mov	r22, r24
    2682:	70 e0       	ldi	r23, 0x00	; 0
    2684:	61 1b       	sub	r22, r17
    2686:	71 09       	sbc	r23, r1
    2688:	3f c0       	rjmp	.+126    	; 0x2708 <__fpcmp_parts_f+0xac>
    268a:	84 30       	cpi	r24, 0x04	; 4
    268c:	21 f0       	breq	.+8      	; 0x2696 <__fpcmp_parts_f+0x3a>
    268e:	92 30       	cpi	r25, 0x02	; 2
    2690:	31 f4       	brne	.+12     	; 0x269e <__fpcmp_parts_f+0x42>
    2692:	82 30       	cpi	r24, 0x02	; 2
    2694:	b9 f1       	breq	.+110    	; 0x2704 <__fpcmp_parts_f+0xa8>
    2696:	81 81       	ldd	r24, Z+1	; 0x01
    2698:	88 23       	and	r24, r24
    269a:	89 f1       	breq	.+98     	; 0x26fe <__fpcmp_parts_f+0xa2>
    269c:	2d c0       	rjmp	.+90     	; 0x26f8 <__fpcmp_parts_f+0x9c>
    269e:	11 96       	adiw	r26, 0x01	; 1
    26a0:	1c 91       	ld	r17, X
    26a2:	11 97       	sbiw	r26, 0x01	; 1
    26a4:	82 30       	cpi	r24, 0x02	; 2
    26a6:	f1 f0       	breq	.+60     	; 0x26e4 <__fpcmp_parts_f+0x88>
    26a8:	81 81       	ldd	r24, Z+1	; 0x01
    26aa:	18 17       	cp	r17, r24
    26ac:	d9 f4       	brne	.+54     	; 0x26e4 <__fpcmp_parts_f+0x88>
    26ae:	12 96       	adiw	r26, 0x02	; 2
    26b0:	2d 91       	ld	r18, X+
    26b2:	3c 91       	ld	r19, X
    26b4:	13 97       	sbiw	r26, 0x03	; 3
    26b6:	82 81       	ldd	r24, Z+2	; 0x02
    26b8:	93 81       	ldd	r25, Z+3	; 0x03
    26ba:	82 17       	cp	r24, r18
    26bc:	93 07       	cpc	r25, r19
    26be:	94 f0       	brlt	.+36     	; 0x26e4 <__fpcmp_parts_f+0x88>
    26c0:	28 17       	cp	r18, r24
    26c2:	39 07       	cpc	r19, r25
    26c4:	bc f0       	brlt	.+46     	; 0x26f4 <__fpcmp_parts_f+0x98>
    26c6:	14 96       	adiw	r26, 0x04	; 4
    26c8:	8d 91       	ld	r24, X+
    26ca:	9d 91       	ld	r25, X+
    26cc:	0d 90       	ld	r0, X+
    26ce:	bc 91       	ld	r27, X
    26d0:	a0 2d       	mov	r26, r0
    26d2:	24 81       	ldd	r18, Z+4	; 0x04
    26d4:	35 81       	ldd	r19, Z+5	; 0x05
    26d6:	46 81       	ldd	r20, Z+6	; 0x06
    26d8:	57 81       	ldd	r21, Z+7	; 0x07
    26da:	28 17       	cp	r18, r24
    26dc:	39 07       	cpc	r19, r25
    26de:	4a 07       	cpc	r20, r26
    26e0:	5b 07       	cpc	r21, r27
    26e2:	18 f4       	brcc	.+6      	; 0x26ea <__fpcmp_parts_f+0x8e>
    26e4:	11 23       	and	r17, r17
    26e6:	41 f0       	breq	.+16     	; 0x26f8 <__fpcmp_parts_f+0x9c>
    26e8:	0a c0       	rjmp	.+20     	; 0x26fe <__fpcmp_parts_f+0xa2>
    26ea:	82 17       	cp	r24, r18
    26ec:	93 07       	cpc	r25, r19
    26ee:	a4 07       	cpc	r26, r20
    26f0:	b5 07       	cpc	r27, r21
    26f2:	40 f4       	brcc	.+16     	; 0x2704 <__fpcmp_parts_f+0xa8>
    26f4:	11 23       	and	r17, r17
    26f6:	19 f0       	breq	.+6      	; 0x26fe <__fpcmp_parts_f+0xa2>
    26f8:	61 e0       	ldi	r22, 0x01	; 1
    26fa:	70 e0       	ldi	r23, 0x00	; 0
    26fc:	05 c0       	rjmp	.+10     	; 0x2708 <__fpcmp_parts_f+0xac>
    26fe:	6f ef       	ldi	r22, 0xFF	; 255
    2700:	7f ef       	ldi	r23, 0xFF	; 255
    2702:	02 c0       	rjmp	.+4      	; 0x2708 <__fpcmp_parts_f+0xac>
    2704:	60 e0       	ldi	r22, 0x00	; 0
    2706:	70 e0       	ldi	r23, 0x00	; 0
    2708:	cb 01       	movw	r24, r22
    270a:	1f 91       	pop	r17
    270c:	08 95       	ret

0000270e <__divmodhi4>:
    270e:	97 fb       	bst	r25, 7
    2710:	09 2e       	mov	r0, r25
    2712:	07 26       	eor	r0, r23
    2714:	0a d0       	rcall	.+20     	; 0x272a <__divmodhi4_neg1>
    2716:	77 fd       	sbrc	r23, 7
    2718:	04 d0       	rcall	.+8      	; 0x2722 <__divmodhi4_neg2>
    271a:	0c d0       	rcall	.+24     	; 0x2734 <__udivmodhi4>
    271c:	06 d0       	rcall	.+12     	; 0x272a <__divmodhi4_neg1>
    271e:	00 20       	and	r0, r0
    2720:	1a f4       	brpl	.+6      	; 0x2728 <__divmodhi4_exit>

00002722 <__divmodhi4_neg2>:
    2722:	70 95       	com	r23
    2724:	61 95       	neg	r22
    2726:	7f 4f       	sbci	r23, 0xFF	; 255

00002728 <__divmodhi4_exit>:
    2728:	08 95       	ret

0000272a <__divmodhi4_neg1>:
    272a:	f6 f7       	brtc	.-4      	; 0x2728 <__divmodhi4_exit>
    272c:	90 95       	com	r25
    272e:	81 95       	neg	r24
    2730:	9f 4f       	sbci	r25, 0xFF	; 255
    2732:	08 95       	ret

00002734 <__udivmodhi4>:
    2734:	aa 1b       	sub	r26, r26
    2736:	bb 1b       	sub	r27, r27
    2738:	51 e1       	ldi	r21, 0x11	; 17
    273a:	07 c0       	rjmp	.+14     	; 0x274a <__udivmodhi4_ep>

0000273c <__udivmodhi4_loop>:
    273c:	aa 1f       	adc	r26, r26
    273e:	bb 1f       	adc	r27, r27
    2740:	a6 17       	cp	r26, r22
    2742:	b7 07       	cpc	r27, r23
    2744:	10 f0       	brcs	.+4      	; 0x274a <__udivmodhi4_ep>
    2746:	a6 1b       	sub	r26, r22
    2748:	b7 0b       	sbc	r27, r23

0000274a <__udivmodhi4_ep>:
    274a:	88 1f       	adc	r24, r24
    274c:	99 1f       	adc	r25, r25
    274e:	5a 95       	dec	r21
    2750:	a9 f7       	brne	.-22     	; 0x273c <__udivmodhi4_loop>
    2752:	80 95       	com	r24
    2754:	90 95       	com	r25
    2756:	bc 01       	movw	r22, r24
    2758:	cd 01       	movw	r24, r26
    275a:	08 95       	ret

0000275c <__prologue_saves__>:
    275c:	2f 92       	push	r2
    275e:	3f 92       	push	r3
    2760:	4f 92       	push	r4
    2762:	5f 92       	push	r5
    2764:	6f 92       	push	r6
    2766:	7f 92       	push	r7
    2768:	8f 92       	push	r8
    276a:	9f 92       	push	r9
    276c:	af 92       	push	r10
    276e:	bf 92       	push	r11
    2770:	cf 92       	push	r12
    2772:	df 92       	push	r13
    2774:	ef 92       	push	r14
    2776:	ff 92       	push	r15
    2778:	0f 93       	push	r16
    277a:	1f 93       	push	r17
    277c:	cf 93       	push	r28
    277e:	df 93       	push	r29
    2780:	cd b7       	in	r28, 0x3d	; 61
    2782:	de b7       	in	r29, 0x3e	; 62
    2784:	ca 1b       	sub	r28, r26
    2786:	db 0b       	sbc	r29, r27
    2788:	0f b6       	in	r0, 0x3f	; 63
    278a:	f8 94       	cli
    278c:	de bf       	out	0x3e, r29	; 62
    278e:	0f be       	out	0x3f, r0	; 63
    2790:	cd bf       	out	0x3d, r28	; 61
    2792:	09 94       	ijmp

00002794 <__epilogue_restores__>:
    2794:	2a 88       	ldd	r2, Y+18	; 0x12
    2796:	39 88       	ldd	r3, Y+17	; 0x11
    2798:	48 88       	ldd	r4, Y+16	; 0x10
    279a:	5f 84       	ldd	r5, Y+15	; 0x0f
    279c:	6e 84       	ldd	r6, Y+14	; 0x0e
    279e:	7d 84       	ldd	r7, Y+13	; 0x0d
    27a0:	8c 84       	ldd	r8, Y+12	; 0x0c
    27a2:	9b 84       	ldd	r9, Y+11	; 0x0b
    27a4:	aa 84       	ldd	r10, Y+10	; 0x0a
    27a6:	b9 84       	ldd	r11, Y+9	; 0x09
    27a8:	c8 84       	ldd	r12, Y+8	; 0x08
    27aa:	df 80       	ldd	r13, Y+7	; 0x07
    27ac:	ee 80       	ldd	r14, Y+6	; 0x06
    27ae:	fd 80       	ldd	r15, Y+5	; 0x05
    27b0:	0c 81       	ldd	r16, Y+4	; 0x04
    27b2:	1b 81       	ldd	r17, Y+3	; 0x03
    27b4:	aa 81       	ldd	r26, Y+2	; 0x02
    27b6:	b9 81       	ldd	r27, Y+1	; 0x01
    27b8:	ce 0f       	add	r28, r30
    27ba:	d1 1d       	adc	r29, r1
    27bc:	0f b6       	in	r0, 0x3f	; 63
    27be:	f8 94       	cli
    27c0:	de bf       	out	0x3e, r29	; 62
    27c2:	0f be       	out	0x3f, r0	; 63
    27c4:	cd bf       	out	0x3d, r28	; 61
    27c6:	ed 01       	movw	r28, r26
    27c8:	08 95       	ret

000027ca <_exit>:
    27ca:	f8 94       	cli

000027cc <__stop_program>:
    27cc:	ff cf       	rjmp	.-2      	; 0x27cc <__stop_program>
