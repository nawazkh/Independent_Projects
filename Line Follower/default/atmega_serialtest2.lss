
atmega_serialtest2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000138  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000004c  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000268  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000157  00000000  00000000  00000460  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000025e  00000000  00000000  000005b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000050  00000000  00000000  00000818  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000f5  00000000  00000000  00000868  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000ee  00000000  00000000  0000095d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000000a8  00000000  00000000  00000a4b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 5a 00 	call	0xb4	; 0xb4 <main>
  78:	0c 94 9a 00 	jmp	0x134	; 0x134 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <serial_init>:
#include <util/delay.h>

void serial_init(unsigned int bittimer)
{
	/* Set the baud rate */
	UBRR0H = (unsigned char) (bittimer >> 8);
  80:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char) bittimer;
  84:	80 93 c4 00 	sts	0x00C4, r24
	/* set the framing to 8N1 */
	UCSR0C = (3 << UCSZ00);
  88:	86 e0       	ldi	r24, 0x06	; 6
  8a:	80 93 c2 00 	sts	0x00C2, r24
	/* Engage! */
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
  8e:	88 e1       	ldi	r24, 0x18	; 24
  90:	80 93 c1 00 	sts	0x00C1, r24
	return;
}
  94:	08 95       	ret

00000096 <serial_read>:

unsigned char serial_read(void)
{
	while( !(UCSR0A & (1 << RXC0)) )
  96:	80 91 c0 00 	lds	r24, 0x00C0
  9a:	87 ff       	sbrs	r24, 7
  9c:	fc cf       	rjmp	.-8      	; 0x96 <serial_read>
		;
	return UDR0;
  9e:	80 91 c6 00 	lds	r24, 0x00C6
}
  a2:	08 95       	ret

000000a4 <serial_write>:

void serial_write(unsigned char c)
{
  a4:	98 2f       	mov	r25, r24
	while ( !(UCSR0A & (1 << UDRE0)) )
  a6:	80 91 c0 00 	lds	r24, 0x00C0
  aa:	85 ff       	sbrs	r24, 5
  ac:	fc cf       	rjmp	.-8      	; 0xa6 <serial_write+0x2>
		;
	UDR0 = c;
  ae:	90 93 c6 00 	sts	0x00C6, r25
}
  b2:	08 95       	ret

000000b4 <main>:
#define SPEED 9600
int main (void)
{
	int old_state = 0, ledstate = 0;
	/* set PORTB for output*/
	DDRB = 0xFF;
  b4:	8f ef       	ldi	r24, 0xFF	; 255
  b6:	84 b9       	out	0x04, r24	; 4
	/* set PORTD for input*/
	DDRD &= 0xFB;
  b8:	52 98       	cbi	0x0a, 2	; 10
	PORTD |= 0x04;
  ba:	5a 9a       	sbi	0x0b, 2	; 11
#include <util/delay.h>

void serial_init(unsigned int bittimer)
{
	/* Set the baud rate */
	UBRR0H = (unsigned char) (bittimer >> 8);
  bc:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char) bittimer;
  c0:	85 e0       	ldi	r24, 0x05	; 5
  c2:	80 93 c4 00 	sts	0x00C4, r24
	/* set the framing to 8N1 */
	UCSR0C = (3 << UCSZ00);
  c6:	86 e0       	ldi	r24, 0x06	; 6
  c8:	80 93 c2 00 	sts	0x00C2, r24
	/* Engage! */
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
  cc:	88 e1       	ldi	r24, 0x18	; 24
  ce:	80 93 c1 00 	sts	0x00C1, r24
  d2:	20 e0       	ldi	r18, 0x00	; 0
  d4:	30 e0       	ldi	r19, 0x00	; 0
			_delay_ms(2);
			ledstate = ~ledstate;
		}

		if (ledstate)
		{	PORTB=0b11111111;
  d6:	af ef       	ldi	r26, 0xFF	; 255
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  d8:	49 e1       	ldi	r20, 0x19	; 25
  da:	50 e0       	ldi	r21, 0x00	; 0
	return;
}

unsigned char serial_read(void)
{
	while( !(UCSR0A & (1 << RXC0)) )
  dc:	64 ef       	ldi	r22, 0xF4	; 244
  de:	71 e0       	ldi	r23, 0x01	; 1
  e0:	80 91 c0 00 	lds	r24, 0x00C0
  e4:	87 ff       	sbrs	r24, 7
  e6:	fc cf       	rjmp	.-8      	; 0xe0 <main+0x2c>
		;
	return UDR0;
  e8:	90 91 c6 00 	lds	r25, 0x00C6
}

void serial_write(unsigned char c)
{
	while ( !(UCSR0A & (1 << UDRE0)) )
  ec:	80 91 c0 00 	lds	r24, 0x00C0
  f0:	85 ff       	sbrs	r24, 5
  f2:	fc cf       	rjmp	.-8      	; 0xec <main+0x38>
	/* let the preprocessor calculate this */
	serial_init( ( F_CPU / SPEED / 16 ) - 1);

	while (1) {
		/* read a character and echo back the next one */
		serial_write( serial_read() + 1);
  f4:	9f 5f       	subi	r25, 0xFF	; 255

void serial_write(unsigned char c)
{
	while ( !(UCSR0A & (1 << UDRE0)) )
		;
	UDR0 = c;
  f6:	90 93 c6 00 	sts	0x00C6, r25
	while (1) {
		/* read a character and echo back the next one */
		serial_write( serial_read() + 1);
		/* read serial port */
		/* test button */
		if (PIND & 0x04){
  fa:	4a 9b       	sbis	0x09, 2	; 9
  fc:	05 c0       	rjmp	.+10     	; 0x108 <main+0x54>
  fe:	cb 01       	movw	r24, r22
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <main+0x4c>
			_delay_ms(2);
			ledstate = ~ledstate;
 104:	20 95       	com	r18
 106:	30 95       	com	r19
		}

		if (ledstate)
 108:	21 15       	cp	r18, r1
 10a:	31 05       	cpc	r19, r1
 10c:	89 f0       	breq	.+34     	; 0x130 <main+0x7c>
		{	PORTB=0b11111111;
 10e:	a5 b9       	out	0x05, r26	; 5
 110:	80 e1       	ldi	r24, 0x10	; 16
 112:	97 e2       	ldi	r25, 0x27	; 39
 114:	fa 01       	movw	r30, r20
 116:	31 97       	sbiw	r30, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <main+0x62>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 11a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 11c:	d9 f7       	brne	.-10     	; 0x114 <main+0x60>
			_delay_ms(1000);
			PORTB=0b00000000;
 11e:	15 b8       	out	0x05, r1	; 5
 120:	80 e1       	ldi	r24, 0x10	; 16
 122:	97 e2       	ldi	r25, 0x27	; 39
 124:	fa 01       	movw	r30, r20
 126:	31 97       	sbiw	r30, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <main+0x72>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 12a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 12c:	d9 f7       	brne	.-10     	; 0x124 <main+0x70>
 12e:	d8 cf       	rjmp	.-80     	; 0xe0 <main+0x2c>
			_delay_ms(1000);}
		else
			PORTB=0b00000000;
 130:	15 b8       	out	0x05, r1	; 5
 132:	d6 cf       	rjmp	.-84     	; 0xe0 <main+0x2c>

00000134 <_exit>:
 134:	f8 94       	cli

00000136 <__stop_program>:
 136:	ff cf       	rjmp	.-2      	; 0x136 <__stop_program>
